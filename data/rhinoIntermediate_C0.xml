<apiSet name="Rhinoscript">
    <object category="Application_Methods" name="Rhino">
      <method name="AddAlias">
        <description>Adds a new command alias to Rhino. Command aliases can be added manually by using Rhino's Options command and modifying the contents of the Aliases tab. See "Options Aliases" in the Rhino help file for more details.</description>
        <OLE-syntax>Rhino.AddAlias (strAlias, strMacro)<input name="strAlias" optional="Required" vartype="String">The name of the new command alias. The name cannot match command names or existing aliases.
          <input name="strMacro" optional="Required" vartype="String">The macro to run when the alias is executed.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="AddSearchPath">
        <description>Adds a new path to Rhino's search path list. Search path items can be added manually by using Rhino's Options command and modifying the contents of the Files tab. See "Options Files settings" in the Rhino help file for more details.</description>
        <OLE-syntax>Rhino.AddSearchPath (strFolder [, intIndex])<input name="strFolder" optional="Required" vartype="String">A valid folder, or path, to add.
          <input name="intIndex" optional="Optional" vartype="integer">A zero-based position index in the search path list to insert the string. If omitted, the path will be appended to the end of the search path list.
          <output name="missing" optional="Optional" vartype="Number">The zero-based index of the new search path item. If the index is less than zero, then the path item was not added to the search path list.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="AddStartupScript">
        <description>Adds a new startup script to RhinoScript's startup script list. Startup script items can be added manually by using Rhino's Options command and modifying the contents of the RhinoScript tab.</description>
        <OLE-syntax>Rhino.AddStartupScript (strScriptFile [, intIndex])<input name="strScriptFile" optional="Required" vartype="String">A valid path to a RhinoScript .RVB file.
          <input name="intIndex" optional="Optional" vartype="integer">A zero-based position index in the startup script list to insert the string. If omitted, the path will be appended to the end of the startup script list.
          <output name="missing" optional="Optional" vartype="Number">The zero-based index of the new startup script item. If the index is less than zero, then the path item was not added to the search path list.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="AliasCount">
        <description>Returns the number of command alias in Rhino.</description>
        <OLE-syntax>Rhino.AliasCount ()<output name="missing" optional="Optional" vartype="Number">True or False indicating success or failure.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="AliasMacro">
        <description>Returns or modifies the macro of a command alias.</description>
        <OLE-syntax>Rhino.AliasMacro (strAlias [, strMacro])<input name="strAlias" optional="Required" vartype="String">The name of an existing command alias.
          <input name="strMacro" optional="Optional" vartype="String">The new macro to run when the alias is executed.
          <output name="missing" optional="Optional" vartype="String">If a new macro is not specified, the existing macro if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a new macro is specified, the previous macro if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="AliasNames">
        <description>Returns a list of command alias names.</description>
        <OLE-syntax>Rhino.AliasNames ()<output name="missing" optional="Optional" vartype="Array">An array of string identifying the command alias names.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="AppearanceColor">
        <description>Returns or modifies an application interface item's color. Colors are represented as RGB colors. An RGB color specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</description>
        <OLE-syntax>Rhino.AppearanceColor (intItem [, lngColor])<input name="intItem" optional="Required" vartype="integer">Item number  to either query or modify. The available items are as follows:<input-subset name="0" optional="Required" vartype="integer">Viewport background</input-subset>
            <input-subset name="1" optional="Required" vartype="integer">Major grid line</input-subset>
            <input-subset name="2" optional="Required" vartype="integer">Minor grid line</input-subset>
            <input-subset name="3" optional="Required" vartype="integer">X-axis line</input-subset>
            <input-subset name="4" optional="Required" vartype="integer">Y-axis line</input-subset>
            <input-subset name="5" optional="Required" vartype="integer">Selected objects</input-subset>
            <input-subset name="6" optional="Required" vartype="integer">Locked objects</input-subset>
            <input-subset name="7" optional="Required" vartype="integer">New layer</input-subset>
            <input-subset name="8" optional="Required" vartype="integer">Feedback</input-subset>
            <input-subset name="9" optional="Required" vartype="integer">Tracking lines</input-subset>
            <input-subset name="10" optional="Required" vartype="integer">Crosshair</input-subset>
            <input-subset name="11" optional="Required" vartype="integer">Command prompt text</input-subset>
            <input-subset name="12" optional="Required" vartype="integer">Command prompt background</input-subset>
            <input-subset name="13" optional="Required" vartype="integer">Command prompt hover</input-subset>
            <input-subset name="14" optional="Required" vartype="integer">Z-axis line</input-subset>
            <input-subset name="15" optional="Required" vartype="integer">World coordinate icon X-axis</input-subset>
            <input-subset name="16" optional="Required" vartype="integer">World coordinate icon Y-axis</input-subset>
            <input-subset name="17" optional="Required" vartype="integer">World coordinate icon Z-axis</input-subset>
            <input-subset name="18" optional="Required" vartype="integer">Layout settings background</input-subset>
            <input-subset name="19" optional="Required" vartype="integer">Layout</input-subset>
            <input-subset name="20" optional="Required" vartype="integer">Window color 1</input-subset>
            <input-subset name="21" optional="Required" vartype="integer">Window color 2</input-subset>
            <input-subset name="22" optional="Required" vartype="integer">Window color 3</input-subset>
            <input-subset name="23" optional="Required" vartype="integer">Window border</input-subset>
            <input-subset name="24" optional="Required" vartype="integer">Window text</input-subset>
            <input-subset name="25" optional="Required" vartype="integer">Active viewport title</input-subset>
            <input-subset name="26" optional="Required" vartype="integer">Inactive viewport title</input-subset>
          
          <input name="lngColor" optional="Optional" vartype="long">The new color  value. If omitted, the current item color is returned.
          <output name="missing" optional="Optional" vartype="Number">If a lngColor  is not specified, the current item color if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a lngColor  is specified, the previous item color if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="AppearanceDisplay">
        <description>Returns or modifies an application interface item's visibility.</description>
        <OLE-syntax>Rhino.AppearanceDisplay (intItem [, blnShow])<input name="intItem" optional="Required" vartype="integer">Item number to either query or modify. The available items are as follows:<input-subset name="0" optional="Required" vartype="integer">Application menu</input-subset>
            <input-subset name="1" optional="Required" vartype="integer">Command prompt</input-subset>
            <input-subset name="2" optional="Required" vartype="integer">Status bar</input-subset>
            <input-subset name="3" optional="Required" vartype="integer">View title bars</input-subset>
            <input-subset name="4" optional="Required" vartype="integer">Application title bar</input-subset>
            <input-subset name="5" optional="Required" vartype="integer">Full path in application title bar</input-subset>
            <input-subset name="6" optional="Required" vartype="integer">Cross hair cursor</input-subset>
          
          <input name="blnShow" optional="Optional" vartype="Boolean">The new visibility state, either visible (True) or hidden (False). If omitted, the current visibility state is returned.
          <output name="missing" optional="Optional" vartype="Number">If a blnShow is not specified, the current visibility state if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a blnShow is specified, the visibility state if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="AutosaveFile">
        <description>Returns or changes the file name used by Rhino's automatic file saving mechanism.</description>
        <OLE-syntax>Rhino.AutosaveFile ([strFile])<input name="strFile" optional="Optional" vartype="String">The name of the new autosave file.
          <output name="missing" optional="Optional" vartype="String">If an autosave file is not specified, the name of the current autosave file if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If an autosave file is specified, the name of the previous autosave file if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="AutosaveInterval">
        <description>Returns or changes how often the document will be saved when Rhino's automatic file saving mechanism is enabled.</description>
        <OLE-syntax>Rhino.AutosaveInterval ([intMinutes])<input name="intMinutes" optional="Optional" vartype="integer">The number of minutes between saves.
          <output name="missing" optional="Optional" vartype="Number">If an interval is not specified, the current interval in minutes if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If an interval is specified, the previous interval in minutes if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="BuildDate">
        <description>Returns the build date of Rhino. The build date is a number in the form of YYYYMMDD.</description>
        <OLE-syntax>Rhino.BuildDate ()<output name="missing" optional="Optional" vartype="Number">The build date of Rhino if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="CheckNewObjects">
        <description>Enables or disables new object error reporting that occurs when they are created or imported. For more information, see the Rhino help file for the CheckNewObjects command.</description>
        <OLE-syntax>Rhino.CheckNewObjects ([blnCheck])<input name="blnCheck" optional="Optional" vartype="boolean">Enables (True)  or disables (False) new object error reporting.
          <output name="missing" optional="Optional" vartype="Boolean">If blnCheck  is not specified, then the current reporting mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnCheck  is specified, then the previous reporting mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="ClearCommandHistory">
        <description>Clears the contents of Rhino's command history window. You can view the command history by using the CommandHistory command.</description>
        <OLE-syntax>Rhino.ClearCommandHistory ()</OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="Command">
        <description>Runs a Rhino command script. All Rhino commands can be used in command scripts. The command can be a build-in Rhino command or a command that is provided by a 3rd party plug-in.</description>
        <OLE-syntax>Rhino.Command (strCommand [, blnEcho])<input name="strCommand" optional="Required" vartype="String">A Rhino command including any arguments.
          <input name="blnEcho" optional="Optional" vartype="Boolean">The command echo mode. If omitted, command prompts are echoed (True).
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="CommandHistory">
        <description>Returns the contents of Rhino's command history window. You can view the command history by using the CommandHistory command.</description>
        <OLE-syntax>Rhino.CommandHistory ()<output name="missing" optional="Optional" vartype="String">A string containing the contents of Rhino's command history window if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="CommandLineArgs">
        <description>Retrieves the command-line arguments, or switches, used to launch Rhino. Command line switches are parameters that you add to the RHINO.EXE command line which enable Rhino to perform additional operations when it starts.</description>
        <OLE-syntax>Rhino.CommandLineArgs ()<output name="missing" optional="Optional" vartype="Array">An array of strings containing the command-line  arguments if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="DefaultRenderer">
        <description>Returns or changes Rhino's current, or default, render plug-in. Use the PlugIns method to get a list of available render plug-ins.</description>
        <OLE-syntax>Rhino.DefaultRenderer ([strRenderer])<input name="strRenderer" optional="Optional" vartype="String">The name of a render plug-in to set as default.
          <output name="missing" optional="Optional" vartype="String">If a render plug-in is not specified, the name of the current render plug-in if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a render plug-in is specified, the name of the previous current render plug-in if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="DeleteAlias">
        <description>Deletes an existing command alias from Rhino.</description>
        <OLE-syntax>Rhino.DeleteAlias (strAlias)<input name="strAlias" optional="Required" vartype="String">The name of an existing command alias.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="DeleteSearchPath">
        <description>Removes an existing path from Rhino's search path list. Search path items can be removed manually by using Rhino's Options command and modifying the contents of the Files tab. See "Options Files settings" in the Rhino help file for more details.</description>
        <OLE-syntax>Rhino.DeleteSearchPath (strFolder)<input name="strFolder" optional="Required" vartype="String">A valid folder, or path, to remove.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="DeleteStartupScript">
        <description>Removes an existing startup script from RhinoScript's startup script list. Startup script items can be removed manually by using Rhino's Options command and modifying the contents of the RhinoScript tab.</description>
        <OLE-syntax>Rhino.DeleteStartupScript (strScriptFile)<input name="strScriptFile" optional="Required" vartype="String">An existing script file path to remove.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="DisplayOleAlerts">
        <description>Enables or disables OLE Server Busy/Not Responding dialog boxes from appearing during a lengthy OLE, or COM, operations. In detail, this function does the following:</description>
        <OLE-syntax>Rhino.DisplayOleAlerts (blnDisplay)<input name="blnDisplay" optional="Required" vartype="Boolean">Enable or disable the display of OLE alert dialog boxes.
          <output name="missing" optional="Optional" vartype="Null">If successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="EdgeAnalysisColor">
        <description>Returns or modifies edge analysis color displayed by the ShowEdges command. Colors are represented as RGB colors. An RGB color specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</description>
        <OLE-syntax>Rhino.EdgeAnalysisColor ([lngColor])<input name="lngColor" optional="Optional" vartype="long">The new color value. If omitted, the current item color is returned.
          <output name="missing" optional="Optional" vartype="Number">If a lngColor is not specified, the current edge analysis color if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a lngColor is specified, the previous edge analysis color if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="EdgeAnalysisMode">
        <description>Returns or modifies edge analysis mode displayed by the ShowEdges command.</description>
        <OLE-syntax>Rhino.EdgeAnalysisMode ([intMode])<input name="intMode" optional="Optional" vartype="integer">The new display mode. If omitted, the current display mode is returned. The available mores are as follows:<input-subset name="0" optional="Optional" vartype="integer">Display all edges.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Display naked edges.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If a intMode is not specified, the current edge analysis display mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a intMode is specified, the previous edge analysis display mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="EnableAutosave">
        <description>Enables or disables Rhino's automatic file saving mechanism.</description>
        <OLE-syntax>Rhino.EnableAutosave ([blnEnable])<input name="blnEnable" optional="Optional" vartype="Boolean">The autosave state. If omitted, automatic saving is enabled (True).
          <output name="missing" optional="Optional" vartype="Boolean">The previous autosave state.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="EnableHistoryRecording">
        <description>Enables or disables Rhino's command history recording for the next command to be run. This function provides equivalent functionality to clicking on the "Record History" button on Rhino's status bar. For more information, see the Rhino help file for the History command.</description>
        <OLE-syntax>Rhino.EnableHistoryRecording ([blnEnable])<input name="blnEnable" optional="Optional" vartype="Boolean">The history recording  state to set.
          <output name="missing" optional="Optional" vartype="Boolean">If bEnable  is not specified, then the current history recording state.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If bEnable  is specified, then the previous history recording state.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="EnablePlugIn">
        <description>Enables or disables Rhino's a Rhino plug-in. Note, changes make to a plug-in's enabled status will not take effect until you restart Rhino.</description>
        <OLE-syntax>Rhino.EnablePlugIn (strPlugIn, [blnEnable])<input name="strPlugIn" optional="Required" vartype="String">The name  or identifier of an existing plug-in.
          <input name="blnEnable" optional="Optional" vartype="Boolean">The enabled  status.
          <output name="missing" optional="Optional" vartype="Boolean">If bEnable  is not specified, then the plug-in enabled status.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If bEnable  is specified, then the previous plug-in enabled status.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="ExeFolder">
        <description>Returns the full path to Rhino's executable folder.</description>
        <OLE-syntax>Rhino.ExeFolder ()<output name="missing" optional="Optional" vartype="String">Rhino's executable folder if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="ExePlatform">
        <description>Returns the platform of the Rhino executable.</description>
        <OLE-syntax>Rhino.ExePlatform ()<output name="missing" optional="Optional" vartype="Number">The Rhino platform if successful. Possible  values are as follows:</output>
          <output name="missing" optional="Optional" vartype="Value">Description</output>
          <output name="missing" optional="Optional" vartype="0">32-Bit Rhino (x86)</output>
          <output name="missing" optional="Optional" vartype="1">64-bit Rhino (x64)</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="ExeServiceRelease">
        <description>Returns the service release version of this Rhino executable (e.g. 0, 1, 2, ...). </description>
        <OLE-syntax>Rhino.ExeServiceRelease ()<output name="missing" optional="Optional" vartype="Number">The Rhino service release version number  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="ExeVersion">
        <description>Returns the major version number of this Rhino executable (e.g. 4, 5, ...).</description>
        <OLE-syntax>Rhino.ExeVersion ()<output name="missing" optional="Optional" vartype="Number">The Rhino version number if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="Exit">
        <description>Closes the Rhino application.</description>
        <OLE-syntax>Rhino.Exit ()</OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="FindFile">
        <description>Searches for a file using Rhino's search path. Rhino will look for a file in the following locations:</description>
        <OLE-syntax>Rhino.FindFile (strFilename)<input name="strFilename" optional="Required" vartype="String">A valid filename.
          <output name="missing" optional="Optional" vartype="String">A qualified path to the specified filename if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="GetPlugInObject">
        <description>Returns a scriptable object from a specified plug-in. Note, not all plug-ins contain scriptable objects. Check with the manufacturer of your plug-in to see if they support this capability.</description>
        <OLE-syntax>Rhino.GetPlugInObject (strPlugIn)<input name="strPlugIn" optional="Required" vartype="String">The name of a registered plug-in that supports scripting. If the plug-in is registered but not loaded, it will be loaded.
          <output name="missing" optional="Optional" vartype="Object">A scriptable object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="Help">
        <description>Displays a topic in Rhino's Help file.</description>
        <OLE-syntax>Rhino.Help ([intTopic])<input name="intTopic" optional="Optional" vartype="integer">A help topic.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="InCommand">
        <description>Determines if Rhino is currently running a command. Because Rhino allow for transparent commands (commands that can be run from inside of other commands), this method returns the total number of active commands.</description>
        <OLE-syntax>Rhino.InCommand ([blnIgnoreRunners])<input name="blnIgnoreRunners" optional="Optional" vartype="Boolean">If true, script running commands, such as LoadScript, RunScript, and ReadCommandFile will not counted. The default is not to count script running command (true).
          <output name="missing" optional="Optional" vartype="Number">The number of active commands.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="InstallType">
        <description>Returns the license installation type of this Rhino executable. The license installation types are as follows:</description>
        <OLE-syntax>Rhino.InstallType ()<output name="missing" optional="Optional" vartype="Number">The Rhino license installation type if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="InstallFolder">
        <description>Returns the full path to Rhino's installation folder.</description>
        <OLE-syntax>Rhino.InstallFolder ()<output name="missing" optional="Optional" vartype="String">Rhino's installation folder if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="IsAlias">
        <description>Verifies that a command alias exists in Rhino.</description>
        <OLE-syntax>Rhino.IsAlias (strAlias)<input name="strAlias" optional="Required" vartype="String">The name of an existing command alias.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="IsCommand">
        <description>Verifies that a command exists in Rhino. The function is useful when scripting commands found in 3rd party plug-ins.</description>
        <OLE-syntax>Rhino.IsCommand (strCommandName])<input name="strCommandName" optional="Required" vartype="String">The command name to test.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="IsocurveDensity">
        <description>Defines the default surface isoparametric curve density for new objects.</description>
        <OLE-syntax>Rhino.IsocurveDensity ([intDensity])<input name="intDensity" optional="Optional" vartype="integer">Theisoparametric  curve density to set.<input-subset name="0" optional="Optional" vartype="integer">No isocurves on knot-free spans.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">One isocurve at each knot, or one  isocurve on knot-free spans.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">One isocurve at each knot, plus  one isocurve between knot locations.</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">One isocurve at each knot, plus  two isocurves between knot locations.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If intDensity is not specified, then the currentisoparametric curve  density if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intDensity is specified, then the previousisoparametric curve  density if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="IsPlugIn">
        <description>Verifies that a plug-in is registered.</description>
        <OLE-syntax>Rhino.IsPlugIn (strPlugIn)<input name="strPlugIn" optional="Required" vartype="String">The name  or identifier of an existing plug-in.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="LastCommandName">
        <description>Returns the name of the last executed command.</description>
        <OLE-syntax>Rhino.LastCommandName ()<output name="missing" optional="Optional" vartype="String">The name of the last executed command.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="LastCommandResult">
        <description>Returns the result code for the last executed command.</description>
        <OLE-syntax>Rhino.LastCommandResult ()<output name="missing" optional="Optional" vartype="Number">The result code successful. The result codes are as follows:</output>
          <output name="missing" optional="Optional" vartype="Value">Description</output>
          <output name="missing" optional="Optional" vartype="0">Success. The command successfully completed.</output>
          <output name="missing" optional="Optional" vartype="1">Cancel. The command was cancelled by the user.</output>
          <output name="missing" optional="Optional" vartype="2">Nothing. The command did nothing (but it was not cancelled).</output>
          <output name="missing" optional="Optional" vartype="3">Failure. The command failed (i.e. bad input, computational problem, etc).</output>
          <output name="missing" optional="Optional" vartype="4">Unknown command. The command was not found.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="LastLoadedScriptFile">
        <description>Return the full path to the last RhinoScript file that was loaded using the LoadScript command..</description>
        <OLE-syntax>Rhino.LastLoadedScriptFile ()<output name="missing" optional="Optional" vartype="String">The last loaded script file if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="LocaleID">
        <description>Returns the language used for the Rhino interface. The current language is returned as a locale ID, or LCID, value.</description>
        <OLE-syntax>Rhino.LocaleID ()<output name="missing" optional="Optional" vartype="Number">Rhino's current locale ID, or LCID. The languages currently supported by Rhino are as follows:</output>
          <output name="missing" optional="Optional" vartype="Value">Description</output>
          <output name="missing" optional="Optional" vartype="1029">Czech</output>
          <output name="missing" optional="Optional" vartype="1031">German - Germany</output>
          <output name="missing" optional="Optional" vartype="1033">English - United States</output>
          <output name="missing" optional="Optional" vartype="1034">Spanish - Spain</output>
          <output name="missing" optional="Optional" vartype="1036">French - France</output>
          <output name="missing" optional="Optional" vartype="1040">Italian - Italy</output>
          <output name="missing" optional="Optional" vartype="1041">Japanese</output>
          <output name="missing" optional="Optional" vartype="1042">Korean</output>
          <output name="missing" optional="Optional" vartype="1045">Polish</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="NodeType">
        <description>Returns the license node type of this Rhino executable, where 0 = standalone node, 1 = network node (license obtained from a Zoo server) and 2 = network node with license checked out (from a Zoo server).</description>
        <OLE-syntax>Rhino.NodeType ()<output name="missing" optional="Optional" vartype="Number">The Rhino license node type if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="Ortho">
        <description>Enables or disables Rhino's ortho modeling aid.</description>
        <OLE-syntax>Rhino.Ortho ([blnEnable])<input name="blnEnable" optional="Optional" vartype="Boolean">The new enabled status, either True or False.
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is not specified, then the current ortho status if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is specified, then the previous ortho status if successful.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="Osnap">
        <description>Enables or disables Rhino's object snap modeling aid. Object snaps are tools for specifying points on existing objects.</description>
        <OLE-syntax>Rhino.Osnap ([blnEnable])<input name="blnEnable" optional="Optional" vartype="Boolean">The new enabled status, either True or False.
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is not specified, then the current object snap status if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is specified, then the previous object snap status if successful.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="OsnapDialog">
        <description>Shows or hides Rhino's dockable object snap bar.</description>
        <OLE-syntax>Rhino.OsnapDialog ([blnVisible])<input name="blnVisible" optional="Optional" vartype="Boolean">The new visibility state, either True or False.
          <output name="missing" optional="Optional" vartype="Boolean">If blnVisible is not specified, then the current visibility state if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnVisible is specified, then the previous visibility state if successful.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="OsnapMode">
        <description>Returns or sets the object snap mode. Object snaps are tools for specifying points on existing objects.</description>
        <OLE-syntax>Rhino.OsnapMode ([intMode])<input name="intMode" optional="Optional" vartype="integer">The object snap mode or modes to set. Object snap modes can be added together to set multiple modes.<input-subset name="0" optional="Optional" vartype="integer">None</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Near</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Focus</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Center</input-subset>
            <input-subset name="8" optional="Optional" vartype="integer">Knot</input-subset>
            <input-subset name="16" optional="Optional" vartype="integer">Quadrant</input-subset>
            <input-subset name="32" optional="Optional" vartype="integer">Midpoint</input-subset>
            <input-subset name="64" optional="Optional" vartype="integer">Intersection</input-subset>
            <input-subset name="128" optional="Optional" vartype="integer">End</input-subset>
            <input-subset name="256" optional="Optional" vartype="integer">Perpendicular</input-subset>
            <input-subset name="512" optional="Optional" vartype="integer">Tangent</input-subset>
            <input-subset name="1024" optional="Optional" vartype="integer">Point</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If intMode is not specified, then the current object snap mode or modes if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intMode is specified, then the previous object snap mode or modes if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="Planar">
        <description>Enables or disables Rhino's planar modeling aid.</description>
        <OLE-syntax>Rhino.Planar ([blnEnable])<input name="blnEnable" optional="Optional" vartype="Boolean">The new enabled status, either True or False
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is not specified, then the current planar status if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is specified, then the previous planar status if successful.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="PlugInId">
        <description>Returns the identifier of a plug-in given the plug-in's name.</description>
        <OLE-syntax>Rhino.PlugInId (strPlugIn)<input name="strPlugIn" optional="Required" vartype="String">The name  of an existingplug-in.
          <output name="missing" optional="Optional" vartype="String">Theplug-in's  identifier if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="PlugInIds">
        <description>Returns the identifiers of all registered plug-ins.</description>
        <OLE-syntax>Rhino.PlugInIds ([intTypes [, intStatus]])<input name="intTypes" optional="Optional" vartype="integer">The type or types  of plug-ins to return. Plug-in types can be added together  to filter several different kinds of plug-ins. If omitted,  all plug-in types are returned.<input-subset name="0" optional="Optional" vartype="integer">All plug-ins</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Render plug-ins</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">File export plug-ins</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">File import plug-ins</input-subset>
            <input-subset name="8" optional="Optional" vartype="integer">Digitizer plug-ins</input-subset>
            <input-subset name="16" optional="Optional" vartype="integer">Utility plug-ins</input-subset>
          
          <input name="intStatus" optional="Optional" vartype="integer">The status,  either loaded or unloaded, of the plug-ins to return. If  omitted, both loaded and unloaded plug-ins are returned.<input-subset name="0" optional="Optional" vartype="integer">Both loaded or unloaded plug-ins..</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Loaded plug-ins.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Unloaded plug-ins.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An array of plug-in identifiers successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="PlugInInfo">
        <description>Returned detailed information about a registered plug-in.</description>
        <OLE-syntax>Rhino.PlugInInfo (strPlugIn)<input name="strPlugIn" optional="Required" vartype="String">The name  or identifier of an existing plug-in.
          <output name="missing" optional="Optional" vartype="Array">An  array of detailed plug-in information if successful. The  array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="String">The plug-in identifier.</output>
          <output name="missing" optional="Optional" vartype="1">String</output>
          <output name="missing" optional="Optional" vartype="The plug-in name.">2</output>
          <output name="missing" optional="Optional" vartype="String">The full path to the plug-in file.</output>
          <output name="missing" optional="Optional" vartype="3">String</output>
          <output name="missing" optional="Optional" vartype="The plug-in version.">4</output>
          <output name="missing" optional="Optional" vartype="Number">The version of the Rhino SDK that  the plug-in requires.</output>
          <output name="missing" optional="Optional" vartype="5">Number</output>
          <output name="missing" optional="Optional" vartype="The service release of the Rhino  SDK that the plug-in requires.">6</output>
          <output name="missing" optional="Optional" vartype="String">The developer or organization.</output>
          <output name="missing" optional="Optional" vartype="7">String</output>
          <output name="missing" optional="Optional" vartype="The developer address.">8</output>
          <output name="missing" optional="Optional" vartype="String">The developer country.</output>
          <output name="missing" optional="Optional" vartype="9">String</output>
          <output name="missing" optional="Optional" vartype="The developer e-mail address.">10</output>
          <output name="missing" optional="Optional" vartype="String">The developer phone number.</output>
          <output name="missing" optional="Optional" vartype="11">String</output>
          <output name="missing" optional="Optional" vartype="The developer FAX number.">12</output>
          <output name="missing" optional="Optional" vartype="String">The developer web site.</output>
          <output name="missing" optional="Optional" vartype="13">String</output>
          <output name="missing" optional="Optional" vartype="The developer update URL.">14</output>
          <output name="missing" optional="Optional" vartype="Number">The plug-in type. See PlugInIds or PlugIns for a list of plug-in  type values.</output>
          <output name="missing" optional="Optional" vartype="15">Number</output>
          <output name="missing" optional="Optional" vartype="The plug-in load time, where 0  = disabled, 1 = load at startup, 2 = load on demand.">16</output>
          <output name="missing" optional="Optional" vartype="Boolean">True if the plug-in is loaded,  False otherwise.</output>
          <output name="missing" optional="Optional" vartype="17">Boolean</output>
          <output name="missing" optional="Optional" vartype="True if the plug-in is disabled,  False otherwise.">18</output>
          <output name="missing" optional="Optional" vartype="Boolean">True if the plug-in shipped with  Rhino. False otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="PlugInName">
        <description>Returns the name of a plug-in given the plug-in's identifier.</description>
        <OLE-syntax>Rhino.PlugInName (strPlugIn)<input name="strPlugIn" optional="Required" vartype="String">The identifier  of an existing plug-in.
          <output name="missing" optional="Optional" vartype="String">The  plug-in's name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="PlugIns">
        <description>Returns the names of all registered plug-ins.</description>
        <OLE-syntax>Rhino.PlugIns ([intTypes [, intStatus]])<input name="intTypes" optional="Optional" vartype="integer">The type or types  of plug-ins to return. Plug-in types can be added together  to filter several different kinds of plug-ins. If omitted,  all plug-in types are returned.<input-subset name="0" optional="Optional" vartype="integer">All plug-ins</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Render plug-ins</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">File export plug-ins</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">File import plug-ins</input-subset>
            <input-subset name="8" optional="Optional" vartype="integer">Digitizer plug-ins</input-subset>
            <input-subset name="16" optional="Optional" vartype="integer">Utility plug-ins</input-subset>
          
          <input name="intStatus" optional="Optional" vartype="integer">The status,  either loaded or unloaded, of the plug-ins to return. If  omitted, both loaded and unloaded plug-ins are returned.<input-subset name="0" optional="Optional" vartype="integer">Both loaded or unloaded plug-ins..</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Loaded plug-ins.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Unloaded plug-ins.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An array of plug-in names successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="Print">
        <description>Prints a string to Rhino's command window. Note, this method cannot be called from Visual Basic. If you are using Visual Basic, use the PrintEx method.</description>
        <OLE-syntax>Rhino.Print ([strMessage])<input name="strMessage" optional="Optional" vartype="String">A prompt, message, or value.
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="PrintEx">
        <description>Prints a string to Rhino's command window. Use this method, instead of the Print method, if you are using Visual Basic.</description>
        <OLE-syntax>Rhino.PrintEx ([strMessage])<input name="strMessage" optional="Optional" vartype="String">A prompt, message, or value.
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="ProjectOsnaps">
        <description>Enables or disables object snap projection.</description>
        <OLE-syntax>Rhino.ProjectOsnaps ([blnEnable])<input name="blnEnable" optional="Optional" vartype="Boolean">The new enabled status, either True or False.
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is not specified, then the current object snap projection status if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is specified, then the previous object snap projection status if successful.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="Prompt">
        <description>Changes Rhino's command window prompt.</description>
        <OLE-syntax>Rhino.Prompt ([strPrompt])<input name="strPrompt" optional="Optional" vartype="String">A prompt.
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="RegistryKey">
        <description>Returns Rhino's Windows Registry key.</description>
        <OLE-syntax>Rhino.RegistryKey ([intKey])<input name="intKey" optional="Optional" vartype="integer">The Rhino  registry key to return.<input-subset name="0 (Default)" optional="Optional" vartype="integer">Rhino's "root" registry  key.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Rhino's "plug-ins" registry  key.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Rhino's "scheme" registry  key.</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Rhino's "global options"  registry key.</input-subset>
          
          <output name="missing" optional="Optional" vartype="String">Rhino's  Windows Registry key if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="ScreenSize">
        <description>Returns the current width and height, in pixels, of the screen of the primary display monitor.</description>
        <OLE-syntax>Rhino.ScreenSize ()<output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array containing two numbers identifying the width and height if successful</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="SdkServiceRelease">
        <description>Returns the service release of the Rhino SDK supported by this Rhino executable. Rhino will only load plug-ins that require a service release of &lt;= this release number. Rhino SDK versions are 9 digit numbers in the form of YYYYMMDDn.</description>
        <OLE-syntax>Rhino.SdkServiceRelease ()<output name="missing" optional="Optional" vartype="Number">The Rhino SDK service release version number  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="SdkVersion">
        <description>Returns the base version of the Rhino SDK supported by this Rhino executable. Rhino will only load plug-ins that were build with exactly the same version of the SDK. Rhino SDK versions are 9 digit numbers in the form of YYYYMMDDn.</description>
        <OLE-syntax>Rhino.SdkVersion ()<output name="missing" optional="Optional" vartype="Number">The Rhino SDK version number if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="SearchPathCount">
        <description>Returns the number of path items in Rhino's search path list. See "Options Files settings" in the Rhino help file for more details.</description>
        <OLE-syntax>Rhino.SearchPathCount ()<output name="missing" optional="Optional" vartype="Number">The number of path items in Rhino's search path list.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="SearchPathList">
        <description>Returns all of the path items in Rhino's search path list. See "Options Files settings" in the Rhino help file for more details.</description>
        <OLE-syntax>Rhino.SearchPathList ()<output name="missing" optional="Optional" vartype="Array">An array of strings containing all of the path items in Rhino's search path list.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="SendKeystrokes">
        <description>Sends a string of printable characters, including spaces, to Rhino's command line.</description>
        <OLE-syntax>Rhino.SendKeystrokes ([strKeys [, blnAddReturn]])<input name="strKeys" optional="Optional" vartype="String">A string to characters to send to the command line.
          <input name="blnAddReturn" optional="Optional" vartype="String">Append a return character to the end of the string. The default is to append a return character (True).
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="SerialNumber">
        <description>Returns the serial number of this Rhino executable, as seen in Rhino's About dialog box.</description>
        <OLE-syntax>Rhino.SerialNumber ()<output name="missing" optional="Optional" vartype="String">The Rhino serial number if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="ShowIsocurves">
        <description>Sets the display of surface isoparametric curves for new objects.</description>
        <OLE-syntax>Rhino.ShowIsocurves ([blnShow])<input name="blnShow" optional="Optional" vartype="Boolean">Show (True)  or hide (False) surface isoparametric curves for new objects.
          <output name="missing" optional="Optional" vartype="Boolean">If blnShow is not specified, then the currentisoparametric curve  visibility of new objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnShow is specified, then the previousisoparametric curve  visibility of new objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="Snap">
        <description>Enables or disables Rhino's grid snap modeling aid.</description>
        <OLE-syntax>Rhino.Snap ([blnEnable])<input name="blnEnable" optional="Optional" vartype="Boolean">The new enabled status, either True or False
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is not specified, then the current grid snap status if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is specified, then the previous grid snap status if successful.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="SnapToLocked">
        <description>Returns or modifies Rhino's "snap-to-locked" setting, which controls whether or not object snaps work on locked objects and on objects on locked layers.</description>
        <OLE-syntax>Rhino.SnapToLocked ([blnEnable])<input name="blnEnable" optional="Optional" vartype="Boolean">The new  enabled status, either True or False
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable  is not specified, then the current "snap-to-locked"  setting if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable  is specified, then the previous "snap-to-locked" setting  if successful.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="StartupScriptCount">
        <description>Returns the number of startup script items in RhinoScript's startup script list. See "Options RhinoScript" for more details.</description>
        <OLE-syntax>Rhino.StartupScriptCount ()<output name="missing" optional="Optional" vartype="Number">The number of path items in Rhino's startup script list.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="StartupScriptList">
        <description>Returns all of the startup script items in Rhino's startup script list. See "Options RhinoScript" for more details.</description>
        <OLE-syntax>Rhino.StartupScriptList ()<output name="missing" optional="Optional" vartype="Array">An array of strings containing all of the startup script items in RhinoScript's startup script list.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="StatusBarDistance">
        <description>Sets Rhino's status bar distance pane.</description>
        <OLE-syntax>Rhino.StatusBarDistance ([dblDistance])<input name="dblDistance" optional="Optional" vartype="double">The distance to display.
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="StatusBarMessage">
        <description>Sets Rhino's status bar message pane.</description>
        <OLE-syntax>Rhino.StatusBarMessage ([strMessage])<input name="strMessage" optional="Optional" vartype="String">A prompt, message, or value.
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="StatusBarNumber">
        <description>Sets Rhino's status bar number pane.</description>
        <OLE-syntax>Rhino.StatusBarNumber ([dblNumber])<input name="dblNumber" optional="Optional" vartype="double">The number to display.
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="StatusBarPoint">
        <description>Sets Rhino's status bar point coordinate panes.</description>
        <OLE-syntax>Rhino.StatusBarPoint ([arrPoint])<input name="arrPoint" optional="Optional" vartype="single-xyz-array">A 3-D point.
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="StatusBarProgressMeter">
        <description>Manipulates Rhino's status bar progress meter.</description>
        <OLE-syntax>Start, or show, the progress meter.<input name="strLabel" optional="Required" vartype="String">A short description of the progress. (e.g.  "Calculating", "Meshing", etc.)
          <input name="intLower" optional="Required" vartype="integer">The lower limit of the progress meter's range.
          <input name="intUpper " optional="Required" vartype="integer">The upper limit of the progress meter's range.
          <input name="blnEmbedLabel " optional="Optional" vartype="Boolean">If True (Default), then the label will be  embedded in the progress meter. If False, then the label will  appear to the left of the progress meter.
          <input name="blnShowPercent" optional="Optional" vartype="Boolean">If True (Default), then the percent complete  will appear in the progress meter.
          <input name="intPosition " optional="Required" vartype="integer">The new position of the progress meter.
          <input name="blnAbsolute" optional="Optional" vartype="boolean">If True (Default), then the progress meter is moved to intPosition (absolute). If False, then the progress meter is moved intPosition from the current position (relative).
          <output name="missing" optional="Optional" vartype="Boolean">If  starting, or showing, the progress bar, the True or False indicating  success or failure.</output>
          <output name="missing" optional="Optional" vartype="Number">If  setting the position of the progress bar, then the previous position  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  ending, or closing, the progress meter, or on error. </output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="TemplateFile">
        <description>Returns or sets Rhino's default template file. The default template file is the template file used when Rhino starts.</description>
        <OLE-syntax>Rhino.TemplateFile ([strFilename])<input name="strFilename" optional="Optional" vartype="String">The name of the new default template file. Note, the template file must exist.
          <output name="missing" optional="Optional" vartype="String">If strFilename is not specified, then the current default template file if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strFilename is specified, then the previous default template file if successful.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="TemplateFolder">
        <description>Returns or sets the location of Rhino's template files.</description>
        <OLE-syntax>Rhino.TemplateFolder ([strFolder])<input name="strFolder" optional="Optional" vartype="String">The location of Rhino's template files. Note, the location, or folder, must exist.
          <output name="missing" optional="Optional" vartype="String">If strFolder is not specified, then the current template file folder if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strFolder is specified, then the previous template file folder if successful.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="UPlaneMode">
        <description>Returns or sets Rhino's universal construction plane mode.</description>
        <OLE-syntax>Rhino.UPlaneMode ([blnEnable])<input name="blnEnable" optional="Optional" vartype="Boolean">If True,  then Rhino will use universal construction planes. If False, then  Rhino will use standard, viewport independent, construction planes.
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable  is not specified, then the current universal construction plane  mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable  is specified, then the previous universal construction plane mode  if successful.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="WindowHandle">
        <description>Returns the Windows handle of Rhino's main window.</description>
        <OLE-syntax>Rhino.WindowHandle<output name="missing" optional="Optional" vartype="Number">Rhino's main window handle.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Application_Methods" name="Rhino">
      <method name="WorkingFolder">
        <description>Returns or sets Rhino's working directory, or folder. The working folder is the default folder for all file operations.</description>
        <OLE-syntax>Rhino.WorkingFolder ([strFolder])<input name="blnEnable" optional="Optional" vartype="String">The new working folder.
          <output name="missing" optional="Optional" vartype="String">If strFolder is not specified, then the current working folder if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strFolder is specified, then the previous working folder if successful.</output>
          <output name="missing" optional="Optional" vartype="Nil">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="AddBlock">
        <description>Adds a new block definition to the document.</description>
        <OLE-syntax>Rhino.AddBlock (arrObjects, arrPoint [, strName [, blnDelete]])<input name="arrObjects" optional="Required" vartype="unknown-type-array">The identifiers of one  or more objects that will be included in the block definition.  Note, the specified objects will be copied.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D base point of  the block definition.
          <input name="strName " optional="Optional" vartype="String">The name of the block  definition to add. If omitted, a name will be automatically generated.  Note, if the name of the block definition already exists, then  the existing block definition will be modified.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete the input objects.  By default, input objects will not be deleted (False).
          <output name="missing" optional="Optional" vartype="String">The name of the newly created block definition,  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockContainerCount">
        <description>Returns the number of block definitions that contain a specified block definition.</description>
        <OLE-syntax>Rhino.BlockContainerCount (strBlock)<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <output name="missing" optional="Optional" vartype="Number">The number of block definitions that contain the specified block definition if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockContainers">
        <description>Returns the names of the block definitions that contain a specified block definition.</description>
        <OLE-syntax>Rhino.BlockContainers (strBlock)<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <output name="missing" optional="Optional" vartype="Array">An array of block definition names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockCount">
        <description>Returns the number of block definitions in the document.</description>
        <OLE-syntax>Rhino.BlockCount ()<output name="missing" optional="Optional" vartype="Number">The number of block definitions in the document.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockDescription">
        <description>Returns or sets the description of a block definition.</description>
        <OLE-syntax>Rhino.BlockDescription (strBlock [, strText])<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <input name="strText" optional="Optional" vartype="String">The new description. If omitted, the current description is returned.
          <output name="missing" optional="Optional" vartype="String">If a description is not specified, the current description if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a description is specified, the previous description if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockInstanceCount">
        <description>Counts the number of instances of the block in the document. Nested instances are not included in the count.</description>
        <OLE-syntax>Rhino.BlockInstanceCount (strBlock)<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <output name="missing" optional="Optional" vartype="Number">The number of instances of the block in the document if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockInstanceInsertPoint">
        <description>Returns the insertion point of a block instance.</description>
        <OLE-syntax>Rhino.BlockInstanceInsertPoint (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of an existing block insertion object.
          <output name="missing" optional="Optional" vartype="Array">A 3-D point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockInstanceName">
        <description>Returns the block definition name of a block instance object.</description>
        <OLE-syntax>Rhino.BlockInstanceName (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of an existing block insertion object.
          <output name="missing" optional="Optional" vartype="String">The block name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockInstances">
        <description>Returns the identifiers of the inserted instances of a block.</description>
        <OLE-syntax>Rhino.BlockInstances (strBlock)<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the instances of a block if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockInstanceXform">
        <description>Returns or sets the location of a block instance relative to the world coordinate system origin (0,0,0). The position is returned as a 4x4 transformation matrix</description>
        <OLE-syntax>Rhino.BlockInstanceXform (strObject [, arrXform])<input name="strObject" optional="Required" vartype="String">The identifier  of an existing block insertion object.
          <input name="arrXform" optional="Optional" vartype="unknown-type-array">A new transformation  matrix to set on the block instance.
          <output name="missing" optional="Optional" vartype="Array">If a transform is not specified, the current  transformation matrix (4x4 array of numbers) if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If a transform is specified, the previous  transformation matrix (4x4 array of numbers) if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockNames">
        <description>Returns the names of all block definitions in the document.</description>
        <OLE-syntax>Rhino.BlockNames ([blnSort])<input name="blnSort" optional="Optional" vartype="Boolean">Return a sorted array of block definition names.
          <output name="missing" optional="Optional" vartype="Array">An array of block definition names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockObjectCount">
        <description>Returns the number of objects that make up a block definition.</description>
        <OLE-syntax>Rhino.BlockObjectCount (strBlock)<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <output name="missing" optional="Optional" vartype="Number">The number of objects that make up the block definition if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockObjects">
        <description>Returns the identifiers of the objects that make up a block definition.</description>
        <OLE-syntax>Rhino.BlockObjects (strBlock)<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects that make up a block definition if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockPath">
        <description>Returns the path to the source of a linked or embedded block definition. A linked or embedded block definition is a block definition that was inserted from an external file.</description>
        <OLE-syntax>Rhino.BlockPath (strBlock)<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <output name="missing" optional="Optional" vartype="String">The path to the linked block file is successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockStatus">
        <description>Returns the status of a linked block.</description>
        <OLE-syntax>Rhino.BlockStatus (strBlock)<input name="strBlock" optional="Required" vartype="String">The name  of an existing block definition.
          <output name="missing" optional="Optional" vartype="Number">The current status.</output>
          <output name="missing" optional="Optional" vartype="Value">Description</output>
          <output name="missing" optional="Optional" vartype="-3">Not a linked block definition.</output>
          <output name="missing" optional="Optional" vartype="-2">The linked block definition's file  could not be opened or could not be read.</output>
          <output name="missing" optional="Optional" vartype="-1">The linked block definition's file  could not be found.</output>
          <output name="missing" optional="Optional" vartype="0">The linked block definition is  up-to-date.</output>
          <output name="missing" optional="Optional" vartype="1">The linked block definition's file  is newer than definition.</output>
          <output name="missing" optional="Optional" vartype="2">The linked block definition's file  is olderthan definition.</output>
          <output name="missing" optional="Optional" vartype="3">The linked block definition's file  is differentthan definition.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockURL">
        <description>Returns or sets the URL of a block definition.</description>
        <OLE-syntax>Rhino.BlockURL (strBlock [, strURL])<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <input name="strURL" optional="Optional" vartype="String">The new URL. If omitted, the current URL is returned.
          <output name="missing" optional="Optional" vartype="String">If a URL is not specified, the current URL if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a URL is specified, the previous URL if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="BlockURLTag">
        <description>Returns or sets the URL tag, or description, of a block definition.</description>
        <OLE-syntax>Rhino.BlockURLTag (strBlock [, strURLTag])<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <input name="strURL" optional="Optional" vartype="String">The new URL tag. If omitted, the current URL tag is returned.
          <output name="missing" optional="Optional" vartype="String">If a URL tag is not specified, the current URL tag if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a URL tag is specified, the previous URL tag if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="DeleteBlock">
        <description>Deletes a block definition and all of it's inserted instances.</description>
        <OLE-syntax>Rhino.DeleteBlock (strBlock)<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="ExplodeBlockInstance">
        <description>Explodes a block instance into it's geometric components. The exploded objects are added to the document.</description>
        <OLE-syntax>Rhino.ExplodeBlockInstance (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of an existing block definition.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly exploded objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="InsertBlock">
        <description>Inserts an instance of a block whose definition already exists in the document.</description>
        <OLE-syntax>Rhino.InsertBlock (strName, arrPoint [, arrScale [, dblAngle [, arrNormal]]])<input name="strName" optional="Required" vartype="String">The name of the block  definition to insert.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D insertion point  of the block.
          <input name="arrScale" optional="Optional" vartype="number-array">An array of three numbers  that identify the x,y,z scale factors. If omitted, the block is  not scaled.
          <input name="dblAngle" optional="Optional" vartype="double">The rotation angle in  degrees. If omitted, the block is not rotated.
          <input name="arrNormal" optional="Optional" vartype="geometrical-string-array">A 3-D vector identifying the axis of rotation. If omitted and dblAngle  is specified, the world Z axis is used.
          <input name="arrXform" optional="Required" vartype="unknown-type-array">4x4 transformation matrix  to apply.
          <output name="missing" optional="Optional" vartype="String">The identifier of the newly inserted block  instance, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="IsBlock">
        <description>Verifies the existence of a block definition in the document.</description>
        <OLE-syntax>Rhino.IsBlock (strBlock)<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="IsBlockEmbedded">
        <description>Verifies that a block definition is embedded, or linked, from an external file.</description>
        <OLE-syntax>Rhino.IsBlockEmbedded (strBlock)<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="IsBlockInstance">
        <description>Verifies an object is a block instance.</description>
        <OLE-syntax>Rhino.IsBlockInstance (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of an existing block definition.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="IsBlockInUse">
        <description>Verifies that a block definition is being used by an inserted instance.</description>
        <OLE-syntax>Rhino.IsBlockInUse (strBlock [, intWhere])<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <input name="intWhere" optional="Optional" vartype="integer">Where to look, where:<input-subset name="0 (Default)" optional="Optional" vartype="integer">Check for top level references in active document</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Check for top level and nested references in active document</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Check for references in other instance definitions</input-subset>
          
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="IsBlockObject">
        <description>Verifies that an object is a block definition object.</description>
        <OLE-syntax>Rhino.IsBlockObject (IsBlockObject)<input name="strObject" optional="Required" vartype="String">The identifier  of an existing object.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="IsBlockReference">
        <description>Verifies that a block definition is from a reference file.</description>
        <OLE-syntax>Rhino.IsBlockReference (strBlock)<input name="strBlock" optional="Required" vartype="String">The name of an existing block definition.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Block_Methods" name="Rhino">
      <method name="RenameBlock">
        <description>Renames an existing block definition.</description>
        <OLE-syntax>Rhino.RenameBlock (strOldBlock, strNewBlock)<input name="strOldBlock" optional="Required" vartype="String">The name of an existing block definition.
          <input name="strNewBlock" optional="Required" vartype="String">The new block definition name.
          <output name="missing" optional="Optional" vartype="String">The new block definition name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddArc">
        <description>Adds an arc curve to the document.</description>
        <OLE-syntax>Rhino.AddArc (arrPlane, dblRadius, dblAngle)<input name="arrPlane" optional="Required" vartype="single-xyz-array">The plane  on which the arc will lie. The origin of the plane will be the  center point of the arc. The X-axis of the plane will define the  0 angle direction.
          <input name="dblRadius" optional="Required" vartype="double">The radius  of the arc.
          <input name="dblAngle" optional="Required" vartype="double">The angle  of the arc in degrees.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddArcPtTanPt">
        <description>Adds an arc curve, created from a start point, a start direction, and an end point, to the document.</description>
        <OLE-syntax>Rhino.AddArcPtTanPt (arrStart, arrDirection, arrEnd)<input name="arrStart" optional="Required" vartype="single-xyz-array">The starting  point of the arc.
          <input name="arrDirection" optional="Required" vartype="unknown-type-array">The arc direction at arrStart.
          <input name="arrEnd" optional="Required" vartype="single-xyz-array">The ending  point of the arc.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddBlendCurve">
        <description>Makes a curve blend between two curves at the parameters specified with the directions and continuities specified.</description>
        <OLE-syntax>Rhino.AddBlendCurve (arrCurves, arrParameters, arrReverses, arrContinuities])<input name="arrCurves" optional="Required" vartype="geometrical-string-array">An array of  two strings which are the identifiers of the two curves objects  to blend.
          <input name="arrParameters" optional="Required" vartype="multiple-xyz-array">An array of  two numbers which are the curve parameters, one for each curve,  to be used for the blend end points.
          <input name="arrReverses" optional="Required" vartype="Boolean">An array of two Boolean  values, one for each curve, that specifies whether or not the  blend will go in the natural direction of the curve (False), or  if the blend will go in the opposite direction to the curve (True).
          <input name="arrContinuities" optional="Required" vartype="single-xyz-array">An array of  two numbers, one for each curve, that specifies the continuity  for the blend at the end point. The possible values are as follows:<input-subset name="0" optional="Required" vartype="single-xyz-array">Position - location only.</input-subset>
            <input-subset name="1" optional="Required" vartype="single-xyz-array">Tangency - position and curve direction.</input-subset>
            <input-subset name="2" optional="Required" vartype="single-xyz-array">Curvature - position, direction,  and radius of curvature.</input-subset>
          
          <output name="missing" optional="Optional" vartype="String">The identifier of the newly created curve  object, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddCircle">
        <description>Adds a circle curve to the document.</description>
        <OLE-syntax>Rhino.AddCircle (arrPlane, dblRadius)<input name="arrPlane" optional="Required" vartype="single-xyz-array">The plane  on which the circle will lie. The origin of the plane will be  the center point of the circle.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The center point of the circle. The circle will lie on a plane that is parallel with the world x-y axis, and that runs through arrPoint.
          <input name="dblRadius" optional="Required" vartype="double">The radius  of the circle.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddCircle3Pt">
        <description>Adds a 3-point circle curve to the document.</description>
        <OLE-syntax>Rhino.AddCircle3Pt (arrFirst, arrSecond, arrThird)<input name="arrStart" optional="Required" vartype="single-xyz-array">The first point of the circle.
          <input name="arrEnd" optional="Required" vartype="single-xyz-array">The second point of the circle.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The third point of the circle.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddCirclePtTanPt">
        <description>Adds a circle curve, created from two points and a start direction, to the document.</description>
        <OLE-syntax>Rhino.AddCirclePtTanPt (arrStart, arrDirection, arrPoint)<input name="arrStart" optional="Required" vartype="single-xyz-array">The starting/ending  point of the circle.
          <input name="arrDirection" optional="Required" vartype="unknown-type-array">The circle direction at arrStart.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The second  point of the circle.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddCurve">
        <description>Adds a control points curve object to the document.</description>
        <OLE-syntax>Rhino.AddCurve (arrPoints [, intDegree])<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D points.
          <input name="intDegree" optional="Optional" vartype="integer">The degree of the curve. If omitted, a degree 3 curve is created.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddEllipse">
        <description>Adds an elliptical curve to the document.</description>
        <OLE-syntax>Rhino.AddEllipse (arrPlane, dblXRadius, dblYRadius)<input name="arrPlane" optional="Required" vartype="single-xyz-array">The plane on which the ellipse will lie. The origin of the plane will be the center point of the ellipse.
          <input name="dblXRadius" optional="Required" vartype="double">The radius in the X-axis direction.
          <input name="dblYRadius" optional="Required" vartype="double">The radius in the Y-axis direction.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddEllipse3Pt">
        <description>Adds a 3 point elliptical curve to the document.</description>
        <OLE-syntax>Rhino.AddEllipse3Pt (arrCenter, arrSecond, arrThird)<input name="arrCenter" optional="Required" vartype="single-xyz-array">The center point of the ellipse.
          <input name="arrSecond" optional="Required" vartype="single-xyz-array">The end point of the X-axis.
          <input name="arrThird" optional="Required" vartype="single-xyz-array">The end point of the Y-axis.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddFilletCurve">
        <description>Adds a fillet curve between two curve objects.</description>
        <OLE-syntax>Rhino.AddFilletCurve (strCurve0, strCurve1 [, dblRadius [, arrBasePoint0 [, arrBasePoint1]]])<input name="strCurve0" optional="Required" vartype="String">The identifier  of the first curve object.
          <input name="strCurve1" optional="Required" vartype="String">The identifier  of the second curve object.
          <input name="dblRadius" optional="Optional" vartype="double">The fillet radius. If  omitted, a radius of 1.0 is specified.
          <input name="arrPoint0" optional="Optional" vartype="single-xyz-array">The base point on the  first curve. If omitted, the starting point of the curve is used.
          <input name="arrPoint1" optional="Optional" vartype="single-xyz-array">The base point on the  second curve. If omitted, the starting point of the curve is used.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddInterpCrvOnSrf">
        <description>Adds an interpolated curve object that lies on a specified surface. Note, this function will not create periodic curves, but it will create closed curves.</description>
        <OLE-syntax>Rhino.AddInterpCrvOnSrf (strObject, arrPoints)<input name="strObject" optional="Required" vartype="String">The surface object's identifier.
          <input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D points that lie on the specified surface. The array must contain at least two points.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddInterpCrvOnSrfUV">
        <description>Adds an interpolated curve object. based on surface parameters, that lies on a specified surface. Note, this function will not create periodic curves, but it will create closed curves.</description>
        <OLE-syntax>Rhino.AddInterpCrvOnSrfUV (strObject, arrPoints)<input name="strObject" optional="Required" vartype="String">The surface object's identifier.
          <input name="arrPoints" optional="Required" vartype="geometrical-string-array">An array of 2-D surface parameters. The array must contain at least two sets of surface parameters.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddInterpCurve">
        <description>Adds an interpolated curve object to the document. Options exist to make a periodic curve or to specify the tangent at the endpoints. The resulting curve is a non-rational NURBS curve of the specified degree.</description>
        <OLE-syntax>Rhino.AddInterpCurve ( arrPoints [, intDegree [, intKnotStyle [, arrStartTan [, arrEndTan]]]])<input name="arrPoints" optional="Required" vartype="single-xyz-array">An array containing 3-D points to interpolate. For periodic curves, if the final point is a duplicate of the initial point, it is ignored. Note, the number of control points must be &gt;= (intDegree+1).
          <input name="intDegree" optional="Optional" vartype="integer">The degree of the curve. If omitted, degree = 3 is used. The degree of the curve must be &gt;=1. Periodic curves must have a degree &gt;= 2. For intKnotStyle = 1 or 2, the degree must be 3. For intKnotStyle  = 4 or 5, the degree must be odd.
          <input name="intKnotStyle" optional="Optional" vartype="integer">The knot style,  or spacing to use, and whether the curve should be periodic. If  omitted, uniform knots (0) are created.
          <input name="0" optional="1" vartype="0">Use this when input points are evenly spaced.<input-subset name="1" optional="1" vartype="0">Chord length spacing (k[i+1] - k[i] = |P[i-1] - P[i-2]|). Requires intDegree = 3. When in doubt, use this spacing.</input-subset>
            <input-subset name="2" optional="1" vartype="0">Sqrt chord length spacing (k[i+1] - k[i] = sqrt(|P[i-1] - P[i-2]|). Requires intDegree = 3. Use  with care, as it is easy to produce self-intersecting  curves.</input-subset>
            <input-subset name="3" optional="1" vartype="0">Periodic with uniform spacing.</input-subset>
            <input-subset name="4" optional="1" vartype="0">Periodic with chord length spacing.  Requires an odd degree value.</input-subset>
            <input-subset name="5" optional="1" vartype="0">Periodic with sqrt chord length  spacing. Requires an odd degree value.</input-subset>
          
          <input name="arrStartTan" optional="Optional" vartype="geometrical-string-array">A 3-D vector  that specifies a tangency condition at the beginning of the curve.  If the curve is periodic, this argument must be omitted.
          <input name="arrEndTan" optional="Optional" vartype="geometrical-string-array">A 3-D vector  that specifies a tangency condition at the end of the curve. If  the curve is periodic, this argument must be omitted.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddInterpCurveEx">
        <description>Adds an interpolated curve object to the document similar to Rhino's InterpCrv command.</description>
        <OLE-syntax>Rhino.AddInterpCurveEx ( arrPoints [, intDegree [, intKnotStyle [, blnSharp [, arrStartTangent [, arrEndTangent]]]]])<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array containing 3-D points to interpolate. Note, the number of control points must be &gt;= (intDegree+1).
          <input name="intDegree" optional="Optional" vartype="integer">The degree of the curve. If omitted, degree = 3 is used. The degree of the curve must be &gt;=1. Periodic curves must have a degree &gt;= 2. For intKnotStyle  = 1 or 2, the degree must be 3.
          <input name="intKnotStyle" optional="Optional" vartype="integer">The knot style,  or spacing to use. If omitted, uniform knots (0) are created.
          <input name="0" optional="1" vartype="0">Use this when input points are evenly spaced.<input-subset name="1" optional="1" vartype="0">Chord length spacing (k[i+1] - k[i] = |P[i-1] - P[i-2]|). Requires intDegree = 3. When in doubt, use this spacing.</input-subset>
            <input-subset name="2" optional="1" vartype="0">Sqrt chord length spacing (k[i+1] - k[i] = sqrt(|P[i-1] - P[i-2]|). Requires intDegree = 3. Use  with care, as it is easy to produce self-intersecting  curves.</input-subset>
          
          <input name="blnSharp" optional="Optional" vartype="Boolean">If True,  when you create a closed curve, it will have a kink at the start/end  point. If False (default), a smooth closure will be created.
          <input name="arrStartTangent" optional="Optional" vartype="geometrical-string-array">A 3-D vector  that specifies a tangency condition at the beginning of the curve.
          <input name="arrEndTangent" optional="Optional" vartype="geometrical-string-array">A 3-D vector  that specifies a tangency condition at the end of the curve.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddLine">
        <description>Adds a line curve to the current model.</description>
        <OLE-syntax>Rhino.AddLine (arrStart, arrEnd)<input name="arrStart" optional="Required" vartype="single-xyz-array">The starting point of the line.
          <input name="arrEnd" optional="Required" vartype="single-xyz-array">The ending point of the line.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddNurbsCurve">
        <description>Adds a NURBS curve object to the document.</description>
        <OLE-syntax>Rhino.AddNurbsCurve (arrPoints, arrKnots, intDegree [, arrWeights])<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D control points.
          <input name="arrKnots" optional="Required" vartype="number-array">The knot values for the curve. The number of elements in arrKnots must equal the number of elements in arrPoints plus intDegree minus one (1).
          <input name="intDegree" optional="Required" vartype="integer">The degree of the curve. The degree must be greater than or equal to one (1).
          <input name="arrWeights" optional="Optional" vartype="number-array">The weight values for the curve. The number of elements in arrWeights equal the number of elements in arrPoints. Weight values must be greater than zero (0).
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddPolygon">
        <description>Adds a regular polygon, either inscribed in or circumscribe about, a circle to the document. With inscribed polygons, the vertices of the polygon will be on the circle. With circumscribed polygons, the midpoints of the polygon's edges will be tangent to the circle.</description>
        <OLE-syntax>Rhino.AddPolygon (arrPlane, dblRadius, intSides [, blnInscribed])<input name="arrPlane" optional="Required" vartype="single-xyz-array">The plane on which the polygon will lie. The  origin of the plane will be the center point of the polygon.
          <input name="dblRadius" optional="Required" vartype="double">The radius of the polygon.
          <input name="intSides" optional="Required" vartype="integer">The number of sides. The minimum number of  sides is 3.
          <input name="blnInscribed " optional="Optional" vartype="Boolean">Create an inscribed polygon (True, Default),  or a circumscribed polygon (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddPolyline">
        <description>Adds a polyline curve object to the current model.</description>
        <OLE-syntax>Rhino.AddPolyline (arrPoints)<input name="arrPoints" optional="Required" vartype="single-xyz-array">An array of 3-D points. Duplicate, consecutive points found in the array will be removed. The array must contain at least two 3-D points. If the array contains less than four points, then the first point and the last point must be different.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddSpiral">
        <description>Adds a spiral or helical curve object to the document.</description>
        <OLE-syntax>Rhino.AddSpiral (arrPoint0, arrPoint1, dblPitch, dblTurns, dblRadius0 [, dblRadius1])<input name="arrPoint0" optional="Required" vartype="single-xyz-array">Helix's axis  starting point or center of spiral.
          <input name="arrPoint1" optional="Required" vartype="single-xyz-array">Helix's axis  end point or point normal to spiral's plane.
          <input name="dblPitch" optional="Required" vartype="double">The pitch,  or distance between turns. If 0, then a spiral. If &gt; 0, then  the distance between helix's "threads".
          <input name="dblTurns" optional="Required" vartype="double">A non-zero value indicating the number of turns in spiral or helix. Values &gt; 0 will produce a right-handed, or counter-clockwise, orientation. A value &lt; 0 will produce a left-handed, or clockwise, orientation. Note, for a helix, dblPitch * dblTurns = length of  the helix's axis.
          <input name="dblRadius0  " optional="Required" vartype="double">The starting radius. Note, for a helix, you may have dblRadius0 = dblRadius1. For a spiral, dblRadius0 = dblRadius1 produces a  circle. Zero and negative radii are permissible. At least  one radii must be non-zero.
          <input name="dblRadius1" optional="Optional" vartype="double">The ending radius. If omitted, dblRadius1 = dblRadius0.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddSpiral2">
        <description>Adds a spiral or helical curve object to the document.</description>
        <OLE-syntax>Rhino.AddSpiral2 (strCurve, arrInterval, dblPitch, dblTurns, dblRadius0 [, dblRadius1 [, intTurnCount]])<input name="strCurve" optional="Required" vartype="String">The curve object's identifier.
          <input name="arrInterval" optional="Required" vartype="number-array">An array of two numbers identifying the starting  and ending portions of the curve's domain to sweep along.
          <input name="dblPitch" optional="Required" vartype="double">The pitch, or distance between turns. If dblPitch = 0, then dblTurns must be &lt;&gt; 0 and the approximate distance between turns will be set to dblPitch. Use positive  values for right-handed helices and negative values for left-handed  helices.
          <input name="dblTurns" optional="Required" vartype="double">If dblTurns  &lt;&gt; 0, then the resulting helix will have this many turns.  Use positive values for right-handed helices and negative values  for left-handed helices.
          <input name="dblRadius0 " optional="Required" vartype="double">The starting radius. Note, for a helix, you may have dblRadius0 = dblRadius1. For a spiral, dblRadius0 = dblRadius1  produces a circle. Zero and negative radii are permissible.
          <input name="dblRadius1" optional="Optional" vartype="double">The ending radius. If omitted, dblRadius1 = dblRadius0.
          <input name="intTurnCount" optional="Optional" vartype="integer">The Number of points to interpolate per turn.  Value must be greater than or equal to 4. The default value is  12.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddStarPolygon">
        <description>Adds a regular star polygon to the document. Vertices alternate between being on circle, specified by the first radius, and begin on a concentric circle of the second radius.</description>
        <OLE-syntax>Rhino.AddStarPolygon (arrPlane, dblRadius0, dblRadius1, intSides)<input name="arrPlane" optional="Required" vartype="single-xyz-array">The plane on which the star polygon will lie.  The origin of the plane will be the center point of the star polygon.
          <input name="dblRadius0" optional="Required" vartype="double">The first radius of the star polygon.
          <input name="dblRadius1" optional="Required" vartype="double">The second radius of the star polygon.
          <input name="intSides" optional="Required" vartype="integer">The number of sides. The minimum number of  sides is 3.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="AddSubCrv">
        <description>Adds a new curve object based on a portion, or interval, of an existing curve object. This function is similar in operation to Rhino's SubCrv command.</description>
        <OLE-syntax>Rhino.AddSubCrv (strObject, dblParam0, dblParam1)<input name="strObject" optional="Required" vartype="String">The identifier  of the source curve object.
          <input name="dblParam0" optional="Required" vartype="double">The first  parameter on the source curve.
          <input name="dblParam1" optional="Required" vartype="double">The second  parameter on the source curve.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ArcAngle">
        <description>Returns the angle of an arc curve object.</description>
        <OLE-syntax>Rhino.ArcAngle (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Number">The angle in degrees if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ArcCenterPoint">
        <description>Returns the center point of an arc curve object.</description>
        <OLE-syntax>Rhino.ArcCenterPoint (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Array.">The 3-D center point of the arc if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ArcMidPoint">
        <description>Returns the mid point of an arc curve object.</description>
        <OLE-syntax>Rhino.ArcMidPoint (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Array.">The 3-D mid point of the arc if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ArcRadius">
        <description>Returns the radius of an arc curve object.</description>
        <OLE-syntax>Rhino.ArcRadius (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Number">The radius of the arc if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CircleCenterPoint">
        <description>Returns the center point of a circle curve object.</description>
        <OLE-syntax>Rhino.CircleCenterPoint (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Array">The 3-D center point of the circle if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CircleCircumference">
        <description>Returns the circumference of a circle curve object.</description>
        <OLE-syntax>Rhino.CircleCircumference (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Number">The circumference of the circle if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CircleRadius">
        <description>Returns the radius of a circle curve object.</description>
        <OLE-syntax>Rhino.CircleRadius (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex  identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Number">The radius of the circle if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CloseCurve">
        <description>Closes an open curve object by making adjustments to the end points so that they meet at a point.</description>
        <OLE-syntax>Rhino.CloseCurve (strObject [, dblTolerance])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblTolerance" optional="Optional" vartype="double">The maximum allowable distance between start point and end point of the curve. If omitted, the document's current absolute tolerance is used.
          <output name="missing" optional="Optional" vartype="String">The identifier of the closed curve object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ClosedCurveOrientation">
        <description>Determine the orientation (counter-clockwise or clockwise) of a closed, planar curve.</description>
        <OLE-syntax>Rhino.ClosedCurveOrientation (strObject [, arrDirection])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="arrDirection" optional="Optional" vartype="geometrical-string-array">A 3-D vector  that identifies the up, or Z axis, direction of the plane to test  against. If omitted, the world Z axis (0,0,1) is used.
          <output name="missing" optional="Optional" vartype="1">The curve's orientation is counter-clockwise.</output>
          <output name="missing" optional="Optional" vartype="-1">The curve's orientation is clockwise.</output>
          <output name="missing" optional="Optional" vartype="0">Unable to compute the curve's orientation.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ConvertCurveToBezier">
        <description>Changes the structure of a NURBS curve to a B&#233;zier curve.</description>
        <OLE-syntax>Rhino.ConvertCurveToBezier (strObject [, blnDelete])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete the  original object. The default is to not delete the original  object (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly  created curve objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ConvertCurveToPolyline">
        <description>Converts a curve to a polyline curve.</description>
        <OLE-syntax>Rhino.ConvertCurveToPolyline (strObject [, dblAngleTolerance [, dblTolerance [, blnDeleteInput [, dlbMinEdgeLength [, dblMaxEdgeLength]]]]])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="dblAngleTolerance" optional="Optional" vartype="double">The maximum  angle between curve tangents at line endpoints. If omitted,  the angle tolerance is set to 5.0.
          <input name="dblTolerance" optional="Optional" vartype="double">The distance  tolerance at segment midpoints. If omitted, the tolerance  is set to 0.01.
          <input name="blnDeleteInput" optional="Optional" vartype="Boolean">Delete the curve object specified by strObject. If omitted, strObject  will not be deleted.
          <input name="dlbMinEdgeLength  " optional="Optional" vartype="Number">The minimum  segment length. Specify 0.0 (Default) for no minimum limit.
          <input name="dblMaxEdgeLength" optional="Optional" vartype="double">The maximum  segment length. Specify 0.0 (Default) for no maximum limit.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveArcLengthPoint">
        <description>Returns the point on the curve that is a specified arc length from the start of the curve.</description>
        <OLE-syntax>Rhino.CurveArcLengthPoint (strObject, dblLength [, blnFromStart])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblLength" optional="Required" vartype="double">The arc length from the start of the curve to evaluate.
          <input name="blnFromStart" optional="Optional" vartype="Boolean">If not specified or True, then the arc length point is calculated from the start of the curve. If False, the arc length point is calculated from the end of the curve.
          <output name="missing" optional="Optional" vartype="Array">The 3-D point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveArea">
        <description>Returns that area of closed planar curves. The results are based on the current drawing units.</description>
        <OLE-syntax>Rhino.CurveArea (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of a closed, planar curve object.
          <input name="arrObjects" optional="Required" vartype="geometrical-string-array">An array of  strings containing the identifiers of one or more closed, planar  curve objects.
          <output name="missing" optional="Optional" vartype="Array">An array of area information if successful.  The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Number">The area. If more than one curve  was specified, the value will be the cumulative area.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the area.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveAreaCentroid">
        <description>Returns that area centroid of closed, planar curves. The results are based on the current drawing units.</description>
        <OLE-syntax>Rhino.CurveAreaCentroid (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a closed, planar curve object.
          <input name="arrObjects" optional="Required" vartype="geometrical-string-array">An array of strings containing the identifiers of one or more closed, planar curve objects.
          <output name="missing" optional="Optional" vartype="Array">An array of area centroid information if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array (3-D Point)">The centroid point.</output>
          <output name="missing" optional="Optional" vartype="1">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound for the area centroid.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveArrows">
        <description>Enables or disabled a curve object's annotation arrows.</description>
        <OLE-syntax>Rhino.CurveArrows (strObject [, intStyle])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intStyle" optional="Optional" vartype="integer">The style of annotation arrows to be displayed. The styles are as follows:<input-subset name="0" optional="Optional" vartype="integer">No annotation arrows</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Display an annotation arrow at the starting point of the curve</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Display an annotation arrow at the ending point of the curve</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Display an annotation arrow at both the starting point and the ending point of the curve</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If intStyle is not specified, the current annotation arrow style if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intStyle is specified, the previous annotation arrow style if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveBooleanDifference">
        <description>Calculates the difference between two closed, planar curves and adds the results to the document. Note, curves must be coplanar.</description>
        <OLE-syntax>Rhino.CurveBooleanDifference (strCurveA, strCurveB [, blnDelete])<input name="strCurveA" optional="Required" vartype="String">The identifier  of the first curve object.
          <input name="strCurveB" optional="Required" vartype="String">The identifier  of the second curve object.
          <input name="blnDelete" optional="Optional" vartype="Boolean">If True,  then the inputs will be deleted. If not specified or False (default),  then the inputs will not be deleted.
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the new objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveBooleanIntersection">
        <description>Calculates the intersection of two closed, planar curves and adds the results to the document. Note, curves must be coplanar.</description>
        <OLE-syntax>Rhino.CurveBooleanIntersection (strCurveA, strCurveB[, blnDelete])<input name="strCurveA" optional="Required" vartype="String">The identifier  of the first curve object.
          <input name="strCurveB" optional="Required" vartype="String">The identifier  of the second curve object.
          <input name="blnDelete" optional="Optional" vartype="Boolean">If True,  then the inputs will be deleted. If not specified or False (default),  then the inputs will not be deleted.
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the new objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveBooleanUnion">
        <description>Calculates the union of two or more closed, planar curves and adds the results to the document. Note, curves must be coplanar.</description>
        <OLE-syntax>Rhino.CurveBooleanUnion (arrCurves[, blnDelete])<input name="arrCurves" optional="Required" vartype="geometrical-string-array">The identifiers  of two or more curve objects.
          <input name="blnDelete" optional="Optional" vartype="Boolean">If True,  then the inputs will be deleted. If not specified or False (default),  then the inputs will not be deleted.
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the new objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveBrepIntersect">
        <description>Intersects a curve object with a brep object. Note, unlike the CurveSurfaceIntersection function, this function works on trimmed surfaces.</description>
        <OLE-syntax>Rhino.CurveBrepIntersect (strCurve, strBrep [, dblTolerance])<input name="strCurve" optional="Required" vartype="String">The curve object's identifier.
          <input name="strBrep" optional="Required" vartype="String">The brep object's identifier.
          <input name="dblTolerance" optional="Optional" vartype="double">The distance tolerance at segment midpoints. If omitted, the current absolute tolerance is used..
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly created intersection curve and point objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveClosestObject">
        <description>Returns the 3-D point locations on two objects where they are closest to each other. Note, this function provides similar functionality to that of Rhino's ClosestPt command when used with the Object option.</description>
        <OLE-syntax>Rhino.CurveClosestObject (strCurve, strObject)<input name="strCurve" optional="Required" vartype="String">The identifier  of the curve object to test.
          <input name="strObject" optional="Required" vartype="String">The identifier  of a point cloud, curve, surface, or polysurface to test against.
          <input name="arrObjects" optional="Required" vartype="single-xyz-array">The identifiers  of one or more point cloud, curve, surface, or polysurface to  test against.
          <output name="missing" optional="Optional" vartype="Array">An array containing the results of the  closest point calculation if successful. The elements of  the array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="String">The identifier of the closest object.</output>
          <output name="missing" optional="Optional" vartype="1">Array</output>
          <output name="missing" optional="Optional" vartype="The 3-D point, on the closest object,  that is closest to the test curve.">2</output>
          <output name="missing" optional="Optional" vartype="Array">The 3-D point, on the test curve,  that is closest to the closest object.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveClosestPoint">
        <description>Returns the parameter of the point on a curve that is closest to a test point.</description>
        <OLE-syntax>Rhino.CurveClosestPoint (strObject, arrPoint [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The test, or sampling, point.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Number">The parameter of the closest point on the curve if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveContourPoints">
        <description>Returns the 3-D point locations calculated by contouring a curve object.</description>
        <OLE-syntax>Rhino.CurveContourPoints (strObject, arrStartPoint, arrEndPoint [, dblInterval])<input name="strObject" optional="Required" vartype="String">The identifier of a curve object.
          <input name="arrStartPoint" optional="Required" vartype="single-xyz-array">The 3-D starting point of a center line.
          <input name="arrEndPoint" optional="Required" vartype="single-xyz-array">The 3-D ending point of a center line.
          <input name="dblInterval" optional="Optional" vartype="double">The distance between contour curves. If omitted, the interval will be equal to the diagonal distance of the object's bounding box divided by 50.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points, one for each contour, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveCurvature">
        <description>Returns the curvature of a curve at a parameter. See the Rhino help file for details on curve curvature.</description>
        <OLE-syntax>Rhino.CurveCurvature (strObject, dblParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblParameter" optional="Required" vartype="double">The parameter to evaluate.
          <output name="missing" optional="Optional" vartype="Array">An array of curvature information if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array (3-D Point)">3-D point at the specified U,V parameter</output>
          <output name="missing" optional="Optional" vartype="1">Array (3-D Vector)</output>
          <output name="missing" optional="Optional" vartype="Tangent vector">2</output>
          <output name="missing" optional="Optional" vartype="Array (3-D Point)">Center of radius of curvature</output>
          <output name="missing" optional="Optional" vartype="3">Number</output>
          <output name="missing" optional="Optional" vartype="Radius of curvature">4</output>
          <output name="missing" optional="Optional" vartype="Array (3-D Vector)">Curvature vector</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveCurveIntersection">
        <description>Calculates the intersection of two curve objects.</description>
        <OLE-syntax>Rhino.CurveCurveIntersection (strObject1 [, strObject2 [, dblTolerance]])<input name="strObject1" optional="Required" vartype="String">The identifier  of the first curve object.
          <input name="strObject2" optional="Optional" vartype="String">The identifier of the second curve object. If omitted, the a self-intersection test will be performed on strObject1.
          <input name="dblTolerance" optional="Optional" vartype="double">The intersection  tolerance.If omitted, the document's absolute tolerance  is used.
          <output name="missing" optional="Optional" vartype="Array">A two-dimensional array of intersection  information if successful. The array will contain one or  more of the following elements:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">(n, 0)</output>
          <output name="missing" optional="Optional" vartype="Number">The intersection event type, either  Point (1) or Overlap (2).</output>
          <output name="missing" optional="Optional" vartype="(n, 1)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the intersection point on the first curve.">If the event type is Overlap (2),  then intersection start point on the first curve.</output>
          <output name="missing" optional="Optional" vartype="(n, 2)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the intersection point on the first curve.">If the event type is Overlap (2),  then intersection end point on the first curve.</output>
          <output name="missing" optional="Optional" vartype="(n, 3)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the intersection point on the second curve.">If the event type is Overlap (2),  then intersection start point on the second curve.</output>
          <output name="missing" optional="Optional" vartype="(n, 4)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the intersection point on the second curve.">If the event type is Overlap (2),  then intersection end point on the second curve.</output>
          <output name="missing" optional="Optional" vartype="(n, 5)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the first curve parameter.">If the event type is Overlap (2),  then the start value of the first curve parameter range.</output>
          <output name="missing" optional="Optional" vartype="(n, 6)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the first curve parameter.">If the event type is Overlap (2),  then the end value of the first curve parameter  range.</output>
          <output name="missing" optional="Optional" vartype="(n, 7)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the second curve parameter.">If the event type is Overlap (2),  then the start value of the second curve parameter range.</output>
          <output name="missing" optional="Optional" vartype="(n, 8)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the second curve parameter.">If the event type is Overlap (2),  then the end value of the second curve parameter range.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveDegree">
        <description>Returns the degree of a curve object.</description>
        <OLE-syntax>Rhino.CurveDegree (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Number">The degree of the curve if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveDeviation">
        <description>Returns the minimum and maximum deviation between two curve objects. For more information on curve deviation, see the Rhino help file for the CrvDeviation command.</description>
        <OLE-syntax>Rhino.CurveDeviation (strCurveA, strCurveB)<input name="strCurveA" optional="Required" vartype="String">The identifier  of the first curve object.
          <input name="strCurveB" optional="Required" vartype="String">The identifier  of the second curve object.
          <output name="missing" optional="Optional" vartype="Array">An array of numbers identifying the minimum  and maximum deviation between the two curves if successful.</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Number">Curve A parameter at maximum overlap  distance point</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="Curve B parameter at maximum overlap  distance point">2</output>
          <output name="missing" optional="Optional" vartype="Number">Maximum overlap distance</output>
          <output name="missing" optional="Optional" vartype="3">Number</output>
          <output name="missing" optional="Optional" vartype="Curve A parameter at minimum distance  point">4</output>
          <output name="missing" optional="Optional" vartype="Number">Curve B parameter at minimum distance  point</output>
          <output name="missing" optional="Optional" vartype="5">Number</output>
          <output name="missing" optional="Optional" vartype="Minimum distance between curves">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveDim">
        <description>Returns the dimension of a curve object.</description>
        <OLE-syntax>Rhino.CurveDim (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Number">The dimension of the curve if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveDirectionsMatch">
        <description>Tests if two curve objects are generally in the same direction or if they would be more in the same direction if one of them were flipped. When testing curve directions, both curves must be either open or closed - you cannot test one open curve and one closed curve. Also, test curves need to fairly close together, or stacked, like when lofting or sweeping curves into a surface.</description>
        <OLE-syntax>Rhino.CurveDirectionsMatch (strCurve1, strCurve2)<input name="strCurve1" optional="Required" vartype="String">The identifier of the first curve to compare.
          <input name="strCurve2" optional="Required" vartype="String">The identifier of the second curve to compare.
          <output name="missing" optional="Optional" vartype="Boolean">True if the curve directions match, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveDiscontinuity">
        <description>Search for a derivatitive, tangent, or curvature discontinuity in a curve object.</description>
        <OLE-syntax>Rhino.CurveDiscontinuity (strObject [, intType])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intStyle" optional="Required" vartype="integer">The type of continuity to test for. The types of continuity are as follows:<input-subset name="1" optional="Required" vartype="integer">C0 - Continuous function</input-subset>
            <input-subset name="2" optional="Required" vartype="integer">C1 - Continuous first derivative</input-subset>
            <input-subset name="3" optional="Required" vartype="integer">C2 - Continuous first and second derivative</input-subset>
            <input-subset name="4" optional="Required" vartype="integer">G1 - Continuous unit tangent</input-subset>
            <input-subset name="5" optional="Required" vartype="integer">G2 - Continuous unit tangent and curvature</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points where the curve is discontinuous if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveDomain">
        <description>Returns the domain of a curve object.</description>
        <OLE-syntax>Rhino.CurveDomain (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Array">The domain of the curve if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveEditPoints">
        <description>Returns the edit points of a curve object. For each curve control point, there is a corresponding edit point.</description>
        <OLE-syntax>Rhino.CurveEditPoints (strObject [, blnReturnParameters [, intIndex]])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="blnReturnParameters" optional="Optional" vartype="Boolean">Return the  edit points as an array of parameter values. If omitted,  the edit points are returned as an array of 3-D points.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex  identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Array">If blnReturnParametersis omitted or False, then an array of 3-D edit points if  successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If blnReturnParameters  is True, then an array of parameter values if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveEndPoint">
        <description>Returns the end point of a curve object.</description>
        <OLE-syntax>Rhino.CurveEndPoint (strObject [, intIndex [, arrPoint]])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex  identifies the curve segment of the polycurve to query.
          <input name="arrPoint" optional="Optional" vartype="Point">The new end  point.
          <output name="missing" optional="Optional" vartype="Array">The 3-D end point of the curve if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveEvaluate">
        <description>A general purpose curve evaluator.</description>
        <OLE-syntax>Rhino.CurveEvaluate (strObject, dblParameter, intDerivative)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblParameter" optional="Required" vartype="double">The evaluation parameter.
          <input name="intDerivative" optional="Required" vartype="integer">The number of derivatives to evaluate.
          <output name="missing" optional="Optional" vartype="Array">An array of length (intDerivative+1) if successful. The array elements are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array">The 3-D point</output>
          <output name="missing" optional="Optional" vartype="1">Array</output>
          <output name="missing" optional="Optional" vartype="The first derivative">2</output>
          <output name="missing" optional="Optional" vartype="Array">The second derivative</output>
          <output name="missing" optional="Optional" vartype="3">Array</output>
          <output name="missing" optional="Optional" vartype="etc...">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveFilletPoints">
        <description>Find points at which to cut a pair of curves so that a fillet of a specified radius fits. A fillet point is a pair of points (arrPoint0, arrPoint1) such that there is a circle of radius dblRadius tangent to curve strCurve0 at arrPoint0 and tangent to curve strCurve1 at arrPoint1.</description>
        <OLE-syntax>Rhino.CurveFilletPoints (strCurve0, strCurve1 [, dblRadius [, arrBasePoint0 [, arrBasePoint1]]])<input name="strCurve0" optional="Required" vartype="String">The identifier  of the first curve object.
          <input name="strCurve1" optional="Required" vartype="String">The identifier  of the second curve object.
          <input name="dblRadius" optional="Optional" vartype="double">The fillet radius. If  omitted, a radius of 1.0 is specified.
          <input name="arrBasePoint0" optional="Optional" vartype="single-xyz-array">The base point on the  first curve. If omitted, the starting point of the curve is used.
          <input name="arrBasePoint1" optional="Optional" vartype="single-xyz-array">The base point on the  second curve. If omitted, the starting point of the curve is used.
          <output name="missing" optional="Optional" vartype="Array">An array of point and vector values if  successful. The array elements are as follows:</output>
          <output name="missing" optional="Optional" vartype="0">A point on the first curve at which to cut (arrPoint0).</output>
          <output name="missing" optional="Optional" vartype="1">A point on the second curve at which to cut (arrPoint1).</output>
          <output name="missing" optional="Optional" vartype="2">The fillet plane's origin (3-D  point). This point is also the center point of the fillet</output>
          <output name="missing" optional="Optional" vartype="3">The fillet plane's X axis (3-D  vector).</output>
          <output name="missing" optional="Optional" vartype="4">The fillet plane's Y axis (3-D  vector).</output>
          <output name="missing" optional="Optional" vartype="5">The fillet plane's Z axis (3-D  vector).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveFrame">
        <description>Returns the plane at a parameter of a curve. The plane is based on the tangent and curvature vectors at a parameter.</description>
        <OLE-syntax>Rhino.CurveFrame (strObject, dblParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblParameter" optional="Required" vartype="double">The parameter to evaluate.
          <output name="missing" optional="Optional" vartype="Array">The plane at the specified parameter if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveKnotCount">
        <description>Returns the knot count of a curve object.</description>
        <OLE-syntax>Rhino.CurveKnotCount (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Number">The number of knots if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveKnots">
        <description>Returns the knots, or knot vector, of a curve object.</description>
        <OLE-syntax>Rhino.CurveKnots (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Array">The knot values of the curve if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveLength">
        <description>Returns the length of a curve object.</description>
        <OLE-syntax>Rhino.CurveLength (strObject [, intIndex [, arrSubDomain]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <input name="arrSubDomain" optional="Optional" vartype="number-array">An array of two numbers identifying the sub-domain of the curve on which the calculation will be performed. The two parameters (sub-domain) must be non-decreasing. If omitted, the length of the entire curve is returned.
          <output name="missing" optional="Optional" vartype="Number">The length of the curve if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveMidPoint">
        <description>Returns the mid point of a curve object.</description>
        <OLE-syntax>Rhino.CurveMidPoint (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Array">The 3-D mid point of the curve if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveNormal">
        <description>Returns the normal direction of the plane in which a planar curve object lies.</description>
        <OLE-syntax>Rhino.CurveNormal (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Array">The 3-D normal vector if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveNormalizedParameter">
        <description>Converts a curve parameter to a normalized curve parameter; one that ranges between 0.0 and 1.0.</description>
        <OLE-syntax>Rhino.CurveNormalizedParameter (strObject , dblParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblParameter" optional="Required" vartype="double">The curve parameter to convert.
          <output name="missing" optional="Optional" vartype="Number">The normalized curve parameter if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveParameter">
        <description>Converts a normalized curve parameter to a curve parameter; one within the curve's domain.</description>
        <OLE-syntax>Rhino.CurveParameter (strObject , dblParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblParameter" optional="Required" vartype="double">The normalized curve parameter to convert.
          <output name="missing" optional="Optional" vartype="Number">The curve parameter if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurvePerpFrame">
        <description>Returns the perpendicular plane at a parameter of a curve. The result is relatively parallel (zero-twisting) plane.</description>
        <OLE-syntax>Rhino.CurvePerpFrame (strObject, dblParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblParameter" optional="Required" vartype="double">The parameter to evaluate.
          <output name="missing" optional="Optional" vartype="Array">The plane at the specified parameter if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurvePlane">
        <description>Returns the plane in which a planar curve lies. Note, this function works only on planar curves.</description>
        <OLE-syntax>Rhino.CurvePlane (strCurve)<input name="strCurve" optional="Required" vartype="String">The identifier of a planar curve object
          <output name="missing" optional="Optional" vartype="Array">The plane in which the curve lies if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurvePointCount">
        <description>Returns the control points count of a curve object.</description>
        <OLE-syntax>Rhino.CurvePointCount (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Number">The number of control points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurvePoints">
        <description>Returns the control points, or control vertices, of a curve object. If the curve is a rational NURBS curve, the euclidean control vertices are returned.</description>
        <OLE-syntax>Rhino.CurvePoints (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Array">The control points of the curve if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveRadius">
        <description>Returns the radius of curvature at a point on a curve.</description>
        <OLE-syntax>Rhino.CurveRadius (strObject, arrPoint [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The test, or sampling, point.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Number">The radius of curvature at the point on the curve if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveRailFrames">
        <description>Returns planar rail sweep planes, or frames, at specified points on a curve. These planes are similar to what is used by Rhino's ArrayCrv and Sweep1 commands.</description>
        <OLE-syntax>Rhino.CurveRailFrames (strObject, arrPoints [, blnFreeform [, arrNormal]])<input name="strObject" optional="Required" vartype="String">The curve  object's identifier.
          <input name="intDirection" optional="Required" vartype="multiple-xyz-array">An array of  3-D points that lie in the path curve.
          <input name="blnFreeform  " optional="Optional" vartype="Boolean">If true, then frames are rotated in three dimensions along the path curve. If False, then frames follow the curve but maintain a consistent up-direction relative to arrNormal.
          <input name="arrNormal" optional="Optional" vartype="geometrical-string-array">A 3-D vector that identifies the up-direction used with blnFreeform=False.
          <output name="missing" optional="Optional" vartype="Array">An array of planes if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveSeam">
        <description>Adjusts the seam, or start/end, point of a closed curve.</description>
        <OLE-syntax>Rhino.CurveSeam (strObject, dblParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblParameter" optional="Required" vartype="double">The parameter of the new start/end point. Note, if successful, the resulting curve's domain will start at dblParameter.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveStartPoint">
        <description>Returns the start point of a curve object.</description>
        <OLE-syntax>Rhino.CurveStartPoint (strObject [, intIndex [, arrPoint])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex  identifies the curve segment of the polycurve to query.
          <input name="arrPoint" optional="Optional" vartype="Point">The new start  point.
          <output name="missing" optional="Optional" vartype="Array">The 3-D start point of the curve if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveSurfaceIntersection">
        <description>Calculates the intersection of a curve object with a surface object. Note, this function works on the untrimmed portion of the surface.</description>
        <OLE-syntax>Rhino.CurveSurfaceIntersection (strCurve, strSurface [, dblTolerance [, dblAngleTolerance]])<input name="strCurve" optional="Required" vartype="String">The identifier of a curve object.
          <input name="strSurface" optional="Required" vartype="String">The identifier of a surface object.
          <input name="dblTolerance" optional="Optional" vartype="double">The absolute tolerance in drawing units. If omitted, the document's current absolute tolerance is used.
          <input name="dblAngleTolerance" optional="Optional" vartype="double">The angle tolerance in degrees. The angle tolerance is used to determine when the curve is tangent to the surface. If omitted, the document's current angle tolerance is used.
          <output name="missing" optional="Optional" vartype="Array">A two-dimensional array of intersection information if successful. The array will contain one or more of the following elements:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">(n, 0)</output>
          <output name="missing" optional="Optional" vartype="Number">The intersection event type, either Point (1) or Overlap (2).</output>
          <output name="missing" optional="Optional" vartype="(n, 1)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1), then the intersection point on the curve.">If the event type is Overlap (2), then intersection start point on the curve.</output>
          <output name="missing" optional="Optional" vartype="(n, 2)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1), then the intersection point on the curve.">If the event type is Overlap (2), then intersection end point on the curve.</output>
          <output name="missing" optional="Optional" vartype="(n, 3)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1), then the intersection point on the surface.">If the event type is Overlap (2), then intersection start point on the surface.</output>
          <output name="missing" optional="Optional" vartype="(n, 4)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1), then the intersection point on the surface.">If the event type is Overlap (2), then intersection end point on the surface.</output>
          <output name="missing" optional="Optional" vartype="(n, 5)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1), then the curve parameter.">If the event type is Overlap (2), then the start value of the curve parameter range.</output>
          <output name="missing" optional="Optional" vartype="(n, 6)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1), then the curve parameter.">If the event type is Overlap (2), then the end value of the curve parameter range.</output>
          <output name="missing" optional="Optional" vartype="(n, 7)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1), then the U surface parameter.">If the event type is Overlap (2), then the U surface parameter for curve at (n, 5).</output>
          <output name="missing" optional="Optional" vartype="(n, 8)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1), then the V surface parameter.">If the event type is Overlap (2), then the V surface parameter for curve at (n, 5).</output>
          <output name="missing" optional="Optional" vartype="(n, 9)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1), then the U surface parameter.">If the event type is Overlap (2), then the U surface parameter for curve at (n, 6).</output>
          <output name="missing" optional="Optional" vartype="(n, 10)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1), then the V surface parameter.">If the event type is Overlap (2), then the V surface parameter for curve at (n, 6).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveTangent">
        <description>Returns a 3-D vector that is the tangent to a curve at a parameter.</description>
        <OLE-syntax>Rhino.CurveTangent (strObject, dblParameter [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblParameter" optional="Required" vartype="double">The parameter to evaluate.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Array">A 3-D vector if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="CurveWeights">
        <description>Returns an array of weight values that are assigned to the control points of a curve.</description>
        <OLE-syntax>Rhino.CurveWeights (strObject [, intIndex [, arrWeights]])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex  identifies the curve segment of the polycurve to query.
          <input name="arrWeights" optional="Optional" vartype="geometrical-string-array">The new curve  weights.
          <output name="missing" optional="Optional" vartype="Array">The weight values of the curve if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="DivideCurve">
        <description>Divides a curve object into a specified number of segments.</description>
        <OLE-syntax>Rhino.DivideCurve (strObject, lngSegments [, blnCreate [, blnPoints [, arrInterval]]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="lngSegments" optional="Required" vartype="long">The number of segments.
          <input name="blnCreate" optional="Optional" vartype="Boolean">Create the division  points. If omitted or False, points are not created.
          <input name="blnPoints" optional="Optional" vartype="Boolean">Return an array of 3-D  points. If omitted or True, points are returned. If False, then  an array of curve parameters are returned.
          <input name="arrInterval" optional="Optional" vartype="number-array">An array of  two number identifying the interval to divide. Portions of the  curve before domain(0) and after domain(1) will be ignored. If  the input curve is open, the interval must be increasing. If the  input curve is closed and the interval is decreasing, then the  portion of the curve across the start and end of the curve is  divided.
          <output name="missing" optional="Optional" vartype="Array">If blnPoints  is not specified or True, then an array containing 3-D division  points if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If blnPoints  is False, then an array containing division curve parameters if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="DivideCurveEquidistant">
        <description>Divides a curve such that the linear distance between the points is equal.</description>
        <OLE-syntax>Rhino.DivideCurveEquidistant (strObject, dblDistance [, blnCreate [, blnPoints [, arrInterval]]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblDistance" optional="Required" vartype="double">The linear distance between  division points.
          <input name="blnCreate" optional="Optional" vartype="Boolean">Create the division  points. If omitted or False, points are not created.
          <input name="blnPoints" optional="Optional" vartype="Boolean">Return an array of 3-D  points. If omitted or True, points are returned. If False, then  an array of curve parameters are returned.
          <input name="arrInterval" optional="Optional" vartype="number-array">An array of  two number identifying the interval to divide. Portions of the  curve before domain(0) and after domain(1) will be ignored. If  the input curve is open, the interval must be increasing. If the  input curve is closed and the interval is decreasing, then the  portion of the curve across the start and end of the curve is  divided.
          <output name="missing" optional="Optional" vartype="Array">If blnPoints  is not specified or True, then an array containing 3-D division  points if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If blnPoints  is False, then an array containing division curve parameters if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="DivideCurveLength">
        <description>Divides a curve object into segments of a specified length.</description>
        <OLE-syntax>Rhino.DivideCurveLength (strObject, dblLength [, blnCreate [, blnPoints [, arrInterval]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblLength" optional="Required" vartype="double">The length of each segment.
          <input name="blnCreate" optional="Optional" vartype="Boolean">Create the division  points. If omitted or False, points are not created.
          <input name="blnPoints" optional="Optional" vartype="Boolean">Return an array of 3-D  points. If omitted or True, points are returned. If False, then  an array of curve parameters are returned.
          <input name="arrInterval" optional="Optional" vartype="number-array">An array of  two number identifying the interval to divide. Portions of the  curve before domain(0) and after domain(1) will be ignored. If  the input curve is open, the interval must be increasing. If the  input curve is closed and the interval is decreasing, then the  portion of the curve across the start and end of the curve is  divided.
          <output name="missing" optional="Optional" vartype="Array">If blnPoints  is not specified or True, then an array containing 3-D division  points if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If blnPoints  is False, then an array containing division curve parameters if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="EllipseCenterPoint">
        <description>Returns the center point of an elliptical-shaped curve object.</description>
        <OLE-syntax>Rhino.EllipseCenterPoint (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Array">The 3-D center point of the ellipse if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="EllipseFocalDistance">
        <description>Returns the distance from the center of an elliptical-shaped curve object to a focus.</description>
        <OLE-syntax>Rhino.EllipseFocalDistance (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Double">The distance if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="EllipseFoci">
        <description>Returns the foci points of an elliptical-shaped curve object.</description>
        <OLE-syntax>Rhino.EllipseFoci (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points identifying the  foci of the ellipse if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="EllipseQuadPoints">
        <description>Returns the quadrant points of an elliptical-shaped curve object.</description>
        <OLE-syntax>Rhino.EllipseQuadPoints (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points identifying the  quadrants of the ellipse if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="EvaluateCurve">
        <description>Evaluates a curve at a parameter.</description>
        <OLE-syntax>Rhino.EvaluateCurve (strObject, dblParameter [, intIndex)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblParameter" optional="Required" vartype="double">The parameter to evaluate.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Array">A 3-D point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ExplodeCurves">
        <description>Explodes, or un-joins, one more curve objects. Polycurves will be exploded into curve segments. Polylines will be exploded into line segments. ExplodeCurves will return the curves in topological order.</description>
        <OLE-syntax>Rhino.ExplodeCurves (strObject [, blnDelete [, blnReturnSingles]])<input name="strObject" optional="Required" vartype="String">The identifier of the curve object to explode.
          <input name="arrObjects" optional="Required" vartype="geometrical-string-array">An array of strings identifying the curve  objects to explode.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input objects after exploding. The  default is not to delete objects (False).
          <input name="blnReturnSingles" optional="Optional" vartype="Boolean">If False (Default) and the curve is not explodable,  then the curve object's identifier is not added to the returned  array. If True and the curve is not explodable, then the curve  object's identifier is returned. That is, the identifiers of non-explodable  curves will round trip.
          <output name="missing" optional="Optional" vartype="Array">An  array of strings identifying the newly created curve objects if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ExtendCurve">
        <description>Extends a non-closed curve object by a line, arc, or smooth extension until it intersects a collection of objects.</description>
        <OLE-syntax>Rhino.ExtendCurve (strObject, intType, intSide, arrObjects)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="intType" optional="Required" vartype="integer">Type of extension.<input-subset name="0" optional="Required" vartype="integer">Line - Creates an line extension  tangent to the original curve.</input-subset>
            <input-subset name="1" optional="Required" vartype="integer">Arc - Creates an arc extension  tangent to the original curve.</input-subset>
            <input-subset name="2" optional="Required" vartype="integer">Smooth - Creates a smooth curve  extension curvature continuous with the original curve.</input-subset>
          
          <input name="intSide" optional="Required" vartype="integer">The size  to extent.<input-subset name="0" optional="Required" vartype="integer">Extend from the start of the curve.</input-subset>
            <input-subset name="1" optional="Required" vartype="integer">Extend from the end of the curve.</input-subset>
            <input-subset name="2" optional="Required" vartype="integer">Extend from both the start and  the end of the curve.</input-subset>
          
          <input name="arrObjects" optional="Required" vartype="geometrical-string-array">The identifiers  of curve, surface, and polysurface objects that will be used as  boundary objects.
          <output name="missing" optional="Optional" vartype="String">The identifier of the extended object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ExtendCurveLength">
        <description>Extends a non-closed curve object by a line, arc, or smooth extension for a specified distance. Negative length values will shorten the curve.</description>
        <OLE-syntax>Rhino.ExtendCurveLength (strObject, intType, intSide, dblLength)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="intType" optional="Required" vartype="integer">Type of extension.<input-subset name="0" optional="Required" vartype="integer">Line - Creates an line extension  tangent to the original curve.</input-subset>
            <input-subset name="1" optional="Required" vartype="integer">Arc - Creates an arc extension  tangent to the original curve.</input-subset>
            <input-subset name="2" optional="Required" vartype="integer">Smooth - Creates a smooth curve  extension curvature continuous with the original curve.</input-subset>
          
          <input name="intSide" optional="Required" vartype="integer">The size  to extent.<input-subset name="0" optional="Required" vartype="integer">Extend from the start of the curve.</input-subset>
            <input-subset name="1" optional="Required" vartype="integer">Extend from the end of the curve.</input-subset>
            <input-subset name="2" optional="Required" vartype="integer">Extend from both the start and  the end of the curve.</input-subset>
          
          <input name="dblLength" optional="Required" vartype="double">The distance  to extend the curve.
          <output name="missing" optional="Optional" vartype="String">The identifier of the extended object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ExtendCurvePoint">
        <description>Extends a non-closed curve object by smooth extension to a point.</description>
        <OLE-syntax>Rhino.ExtendCurvePoint (strObject, intSide, arrPoint [, intType])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="intSide" optional="Required" vartype="integer">The size  to extent.<input-subset name="0" optional="Required" vartype="integer">Extend from the start of the curve.</input-subset>
            <input-subset name="1" optional="Required" vartype="integer">Extend from the end of the curve.</input-subset>
          
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D point.
          <input name="intType" optional="Optional" vartype="integer">Type of extension.<input-subset name="0" optional="Optional" vartype="integer">Line - Creates an line extension  tangent to the original curve.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Arc - Creates an arc extension  tangent to the original curve.</input-subset>
            <input-subset name="2 (Default)" optional="Optional" vartype="integer">Smooth - Creates a smooth curve  extension curvature continuous with the original curve.</input-subset>
          
          <output name="missing" optional="Optional" vartype="String">The identifier of the extended object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ExtractPolyCurveSegment">
        <description>Extracts a segment curve from a polycurve object. A polycurve is a curve consisting of two or more curves joined together</description>
        <OLE-syntax>Rhino.ExtractPolyCurveSegment (strObject, intSegment)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intSegment" optional="Required" vartype="integer">The zero-based index of the segment curve  to extract.
          <input name="arrSegments" optional="Required" vartype="geometrical-string-array">The zero-based indices of the segment curves  to extract.
          <output name="missing" optional="Optional" vartype="String">If intSegment is specified,  then the identifier of the extracted segment curve if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrSegments is specified,  then the identifiers of the extracted segment curves if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="FairCurve">
        <description>Fairs a curve object. Fair works best on degree 3 (cubic) curves. Fair attempts to remove large curvature variations while limiting the geometry changes to be no more than the specified tolerance. Sometimes several applications of this method are necessary to remove nasty curvature problems.</description>
        <OLE-syntax>Rhino.FairCurve (strObject [, dblTolerance])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblTolerance" optional="Optional" vartype="double">The fairing tolerance. Of omitted, a default value of 1.0 is used.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="FilletCurves">
        <description>Adds a tangent arc between two curves and trims or extends the curves to the arc. Note, unlike Rhino's Fillet command, this method does not modify the input curve objects.</description>
        <OLE-syntax>Rhino.FilletCurves (strCurve0, arrPoint0, strCurve1, arrPoint1, dblRadius [, blnJoin [, blnTrim [, blnArcExtension]]])<input name="strCurve0" optional="Required" vartype="String">The identifier  of the first curve object to fillet.
          <input name="arrPoint0" optional="Required" vartype="single-xyz-array">A 3-D point  on the first curve that is near the end where the fillet will  be added.
          <input name="strCurve1" optional="Required" vartype="String">The identifier  of the second curve object to fillet.
          <input name="arrPoint1" optional="Required" vartype="single-xyz-array">A 3-D point  on the second curve that is near the end where the fillet will  be added.
          <input name="dblRadius" optional="Required" vartype="double">The fillet  radius.
          <input name="blnJoin" optional="Optional" vartype="Boolean">Joins the  resulting curves. The default is False.
          <input name="blnTrim" optional="Optional" vartype="Boolean">Trims the  input curves to the resulting fillet curve. The default is True.
          <input name="blnArcExtension" optional="Optional" vartype="Boolean">This is  applies when arcs are filleted or chamfered but need to be extended  to meet the fillet curve or chamfer line. If True (Default) then  the arc is extended maintaining its validity. If False, then the  arc is extended with a line segment, which is joined to the arc  converting it to a polycurve.
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the newly added curve objects if successful. The number of identifiers and the types of curve objects depends on the input curves and the values of the parameters that were used during the fillet operation. In most cases, the output array will contain either one or three identifiers, although two identifiers can be returned if dblRadius = 0 and blnJoin = false. For example, if both blnJoin and blnTrim = True, then the identifier will reference a polycurve, containing the fillet curve joined with trimmed copies of the input curves. If blnJoin = False and blnTrim = True, then the identifiers of three curves, the fillet curve and trimmed copies of the input curves, will be returned. If both blnJoin and blnTrim = False, then just  the identifier of the fillet curve is returned.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="FitCurve">
        <description>Reduces the number of curve control points while maintaining the curve's same general shape. Use this function for replacing curves with too many control points. For more information, see the Rhino help file for the FitCrv command.</description>
        <OLE-syntax>Rhino.FitCurve (strObject [, intDegree [, dblTolerance [, dblAngleTolerance]]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intDegree" optional="Optional" vartype="integer">The curve degree, which must be greater than 1. The default is 3.
          <input name="dblTolerance" optional="Optional" vartype="double">The fitting tolerance. If dblTolerance is not specified or &lt;= 0.0, the document absolute tolerance is used.
          <input name="dblAngleTolerance" optional="Optional" vartype="double">The kink smoothing tolerance in degrees. If dblAngleTolerance is 0.0, all kinks are smoothed. If dblAngleTolerance is &gt; 0.0, kinks smaller than dblAngleTolerance are smoothed. If dblAngleTolerance is not specified or &lt; 0.0, the document angle tolerance is used for the kink smoothing.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="InsertCurveKnot">
        <description>Inserts a knot into a curve object.</description>
        <OLE-syntax>Rhino.InsertCurveKnot (strObject, dblParameter [, blnSymmetrical)<input name="strObject" optional="Required" vartype="String">The identifier of the curve object.
          <input name="dblParameter" optional="Required" vartype="double">The parameter on the curve.
          <input name="blnSymmetrical" optional="Optional" vartype="Boolean">If blnSymmetrical = True, then knots are added on both sides of the center of the curve. The default value is False.
          <output name="missing" optional="Optional" vartype="Boolean">True of False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsArc">
        <description>Verifies an object is an arc curve object or is a NURBS curve object that looks like an arc, within the document's absolute tolerance.</description>
        <OLE-syntax>Rhino.IsArc (strObject [, intIndex)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex  identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsCircle">
        <description>Verifies an object is a circle curve object or is a NURBS curve object that looks like a circle, within the document's absolute tolerance.</description>
        <OLE-syntax>Rhino.IsCircle (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsCurve">
        <description>Verifies an object is a curve object.</description>
        <OLE-syntax>Rhino.IsCurve (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsCurveClosable">
        <description>Decide if it makes sense to close off the curve by moving the endpoint to the start based on start-end gap size and length of curve as approximated by chord defined by 6 points.</description>
        <OLE-syntax>Rhino.IsCurveClosable (strObject [, dblTolerance])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblTolerance" optional="Optional" vartype="double">The maximum allowable distance between start point and end point of the curve. If omitted, the document's current absolute tolerance is used.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsCurveClosed">
        <description>Verifies an object is a closed curve object.</description>
        <OLE-syntax>Rhino.IsCurveClosed (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsCurveInPlane">
        <description>Test a curve to see if it lies in a specific plane.</description>
        <OLE-syntax>Rhino.IsCurveInPlane (strObject [, arrPlane])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="arrPlane" optional="Optional" vartype="geometrical-string-array">The plane to test.  If omitted, the currently active construction plane is used.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsCurveLinear">
        <description>Verifies an object is a linear curve object.</description>
        <OLE-syntax>Rhino.IsCurveLinear (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsCurvePeriodic">
        <description>Verifies an object is a periodic curve object.</description>
        <OLE-syntax>Rhino.IsCurvePeriodic (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsCurvePlanar">
        <description>Verifies an object is a planar curve object.</description>
        <OLE-syntax>Rhino.IsCurvePlanar (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsCurveRational">
        <description>Verifies an object is a rational NURBS curve object.</description>
        <OLE-syntax>Rhino.IsCurveRational (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsEllipse">
        <description>Verifies an object is an elliptical-shaped curve object.</description>
        <OLE-syntax>Rhino.IsEllipse (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsEllipticalArc">
        <description>Verifies an object is an elliptical-shaped arc curve object.</description>
        <OLE-syntax>Rhino.IsEllipticalArc (strObject [, intIndex)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex  identifies the curve segment of the polycurve to query
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsLine">
        <description>Verifies an object is a line curve object.</description>
        <OLE-syntax>Rhino.IsLine (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsPointOnCurve">
        <description>Verifies that a point is on a curve.</description>
        <OLE-syntax>Rhino.IsPointOnCurve (strObject, arrPoint [, intIndex [, dblTolerance]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The test, or sampling, point.
          <input name="arrPoint" optional="Optional" vartype="Number">If strObject identifies a polycurve object, then intIndex  identifies the curve segment of the polycurve to query.
          <input name="dblTolerance" optional="Optional" vartype="double">A tolerance to test against. Of omitted, Rhino's  internal tolerance is used.
          <output name="missing" optional="Optional" vartype="Boolean">True  if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On  error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsPolyCurve">
        <description>Verifies an object is a polycurve object. A polycurve is a curve that is represented by a sequence of contiguous curve segments.</description>
        <OLE-syntax>Rhino.IsPolyCurve (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="IsPolyline">
        <description>Verifies an object is a polyline curve object.</description>
        <OLE-syntax>Rhino.IsPolyline (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="JoinCurves">
        <description>Joins two or more curve object together to form one or more curves or polycurves.</description>
        <OLE-syntax>Rhino.JoinCurves (arrObjects [, blnDelete [, dblTolerance]])<input name="arrObjects  " optional="Required" vartype="geometrical-string-array">An array of  strings identifying the curve objects to join.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input  objects after joining. The default is not to delete objects  (False).
          <input name="dblTolerance" optional="Optional" vartype="double">The join  tolerance. Of omitted, 2.1 * the document's absolute tolerance  is used.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly  created curve objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="LineFitFromPoints">
        <description>Returns the starting and ending points of a line that was fit through an array of 3-D points.</description>
        <OLE-syntax>Rhino.LineFitFromPoints (arrPoints)<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of  3-D points. The array must contain at least two 3-D points.
          <output name="missing" optional="Optional" vartype="Array">An array containing the starting and ending  points of the fit line if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="MakeCurveNonPeriodic">
        <description>Makes a periodic curve non-periodic. Non-periodic curves can develop kinks when deformed.</description>
        <OLE-syntax>Rhino.MakeCurveNonPeriodic (strObject [, blnDelete])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input curve. If omitted, the input curve will not be deleted (False).
          <output name="missing" optional="Optional" vartype="String">If blnDelete is False, the identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If blnDelete is True, the identifier of the modified object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="MakeCurvePeriodic">
        <description>Makes an existing curve a periodic NURBS curve. A periodic NURBS curve is a closed curve with a simple knot at the seam. If a joined curve is made periodic, it becomes a single-span curve and can no longer be exploded.</description>
        <OLE-syntax>Rhino.MakeCurvePeriodic (strObject [, blnDelete [, blnSmooth]])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input  curve. If omitted, the input curve will not be deleted (False).
          <input name="blnSmooth" optional="Optional" vartype="Boolean">Controls  kink removal. If true, smooths any kinks in the curve and  moves control points to make a smooth curve. If false, control  point locations are not changed or changed minimally (only one  point may move) and only the knot vector is altered. The  default is False.
          <output name="missing" optional="Optional" vartype="String">If blnDelete  is False, the identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If blnDelete  is True, the identifier of the modified object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="MeanCurve">
        <description>Creates a mean, or average, curve from two curves.</description>
        <OLE-syntax>Rhino.MeanCurve (strCurve0, strCurve1 [, dblTolerance])<input name="strCurve0" optional="Required" vartype="String">The first  curve object's identifier.
          <input name="strCurve1" optional="Required" vartype="String">The second  curve object's identifier.
          <input name="dblTolerance" optional="Optional" vartype="double">The angle  tolerance, used to match kinks between curves.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new curve object  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="MeshPolyline">
        <description>Creates a polygon mesh object based on a closed polyline curve object. The newly created polygon mesh object is added to the document.</description>
        <OLE-syntax>Rhino.MeshPolyline (strPolyline)<input name="strPolyline" optional="Required" vartype="String">The identifier  of the polyline curve object.
          <output name="missing" optional="Optional" vartype="String">The  identifier of the new polygon mesh object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="OffsetCurve">
        <description>Offsets a curve by a distance. The offset curve will be added to Rhino.</description>
        <OLE-syntax>Rhino.OffsetCurve (strObject, arrDirection, dblDistance [, arrNormal [, intStyle]])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="arrDirection" optional="Required" vartype="single-xyz-array">The 3-D point  that indicates the direction of the offset.
          <input name="dblDistance" optional="Requried" vartype="double">The distance  of the offset.
          <input name="arrNormal" optional="Optional" vartype="geometrical-string-array">A 3-D vector  identifying the normal of the plane in which the offset will occur.  If omitted, the normal of the active construction plane will be  used.
          <input name="intStyle" optional="Optional" vartype="integer">The corner  style. If omitted, a sharp corner style is used.<input-subset name="0" optional="Optional" vartype="integer">None</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Sharp (Default)</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Round</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Smooth</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Chamfer</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An array containing the identifiers of  the new objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="OffsetCurveNormal">
        <description>Offsets a curve, that lies on a surface, normal to the surface. This is functionally similar to the OffsetNormal command.</description>
        <OLE-syntax>Rhino.OffsetCurveNormal (strSurface, strCurve, dblDistance)<input name="strSurface" optional="Required" vartype="String">The identifier  of the base surface object.
          <input name="strCurve" optional="Required" vartype="String">The identifier  of the curve, that lies on the surface, to offset.
          <input name="dblDistance" optional="Required" vartype="double">The distance  to offset.
          <output name="missing" optional="Optional" vartype="String">The  identifier of the new curve object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="OffsetCurveOnSurface">
        <description>Offset a curve on a surface. The source curve must lie on the surface. The offset curve or curves will be added to Rhino.</description>
        <OLE-syntax>Rhino.OffsetCurveOnSurface (strCurve, strSurface, dblDistance)<input name="strCurve" optional="Required" vartype="String">The curve object's identifier. Note, the curve must lie on the surface.
          <input name="strSurface" optional="Required" vartype="String">The surface object's identifier.
          <input name="dblDistance" optional="Requried" vartype="double">The distance of the offset. Based on the curve's direction, a possitive value will offset to the left and a negative value will offset to the right.
          <input name="arrParameter" optional="Requried" vartype="geometrical-string-array">An array containing the surface U,V parameter that the curve will be offset through.
          <output name="missing" optional="Optional" vartype="Array">An array containing the identifiers of the new curve objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="PlanarClosedCurveContainment">
        <description>Determines the relationship between the regions bounded by two coplanar closed curves.</description>
        <OLE-syntax>Rhino.PlanarClosedCurveContainment (strCurve1, strCurve2 [, arrPlane [, dblTolerance]])<input name="strCurve1" optional="Required" vartype="String">The object  identifier of the first planar, closed curve.
          <input name="strCurve2" optional="Required" vartype="String">The object  identifier of the second planar, closed curve.
          <input name="arrPlane" optional="Optional" vartype="geometrical-string-array">The plane containing  the closed curves. If omitted, the currently active construction  plane is used.
          <input name="dblTolerance" optional="Optional" vartype="double">The tolerance.  If omitted, the current document absolute tolerance is used.
          <output name="missing" optional="Optional" vartype="Number">A number identifying the relationship if  successful. The possible values are as follows:</output>
          <output name="missing" optional="Optional" vartype="Value">Description</output>
          <output name="missing" optional="Optional" vartype="0">The regions bounded by the curves  are disjoint.</output>
          <output name="missing" optional="Optional" vartype="1">The two curves intersect.</output>
          <output name="missing" optional="Optional" vartype="2">The region bounded by strCurve1 is inside of strCurve2.</output>
          <output name="missing" optional="Optional" vartype="3">The region bounded by strCurve2 is inside of strCurve1.  </output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="PlanarCurveCollision">
        <description>Determines if two coplanar curves intersect.</description>
        <OLE-syntax>Rhino.PlanarCurveCollision (strCurve1, strCurve2 [, arrPlane [, dblTolerance]])<input name="strCurve1" optional="Required" vartype="String">The object  identifier of the first planar curve.
          <input name="strCurve2" optional="Required" vartype="String">The object  identifier of the second planar curve.
          <input name="arrPlane" optional="Optional" vartype="geometrical-string-array">The plane containing  the closed curves. If omitted, the currently active construction  plane is used.
          <input name="dblTolerance" optional="Optional" vartype="double">The tolerance.  If omitted, the current document absolute tolerance is used.
          <output name="missing" optional="Optional" vartype="True">The coplanar curves intersect.</output>
          <output name="missing" optional="Optional" vartype="False">The coplanar curves do not intersect.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="PointInPlanarClosedCurve">
        <description>Determines if a point is inside of a closed curve, on a closed curve, or outside of a closed curve.</description>
        <OLE-syntax>Rhino.PointInPlanarClosedCurve (arrPoint, strCurve [, arrPlane [, dblTolerance]])<input name="arrPoint" optional="Required" vartype="single-xyz-array">A 3-D point to test.
          <input name="strCurve" optional="Required" vartype="String">The object identifier of the planar, closed curve.
          <input name="arrPlane" optional="Optional" vartype="single-xyz-array">The plane containing the closed curve and point. If omitted, the currently active construction plane is used.
          <input name="dblTolerance" optional="Optional" vartype="double">The tolerance. If omitted, the current document absolute tolerance is used.
          <output name="missing" optional="Optional" vartype="Number">A number identifying the result if successful. The possible values are as follows:</output>
          <output name="missing" optional="Optional" vartype="Value">Description</output>
          <output name="missing" optional="Optional" vartype="0">The point is outside of the closed curve.</output>
          <output name="missing" optional="Optional" vartype="1">The point is inside of the closed curve.</output>
          <output name="missing" optional="Optional" vartype="2">The point is on the closed curve.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="PolyCurveCount">
        <description>Returns the number of curve segments that make up a polycurve.</description>
        <OLE-syntax>Rhino.PolyCurveCount (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Number">The number of curve segments in a polycurve if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="PolylineVertices">
        <description>Returns the vertices of a polyline curve object.</description>
        <OLE-syntax>Rhino.PolylineVertices (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intIndex" optional="Optional" vartype="integer">If strObject identifies a polycurve object, then intIndex identifies the curve segment of the polycurve to query.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D vertex points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ProjectCurveToMesh">
        <description>Projects one or more curves onto one or more meshes.</description>
        <OLE-syntax>Rhino.ProjectCurveToMesh (strCurve, strMesh, arrDirection)<input name="strCurve" optional="Required" vartype="geometrical-string-array">The identifier  of a curve object to project.
          <input name="arrCurves" optional="Required" vartype="geometrical-string-array">The identifiers  of one or more curve objects to project.
          <input name="strMesh" optional="Required" vartype="String">The identifier  of the mesh object to project onto.
          <input name="arrMeshes" optional="Required" vartype="geometrical-string-array">The identifiers  of the mesh objects to project onto.
          <input name="arrDirection" optional="Required" vartype="geometrical-string-array">The direction  (3-D vector) to project the curves.
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the newly created, projected  curve objects, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ProjectCurveToSurface">
        <description>Projects one or more curves onto one or more surfaces or polysurfaces.</description>
        <OLE-syntax>Rhino.ProjectCurveToSurface (strCurve, strSurface, arrDirection)<input name="strCurve" optional="Required" vartype="geometrical-string-array">The identifier  of a curve object to project.
          <input name="arrCurves" optional="Required" vartype="geometrical-string-array">The identifiers  of one or more curve objects to project.
          <input name="strSurface" optional="Required" vartype="String">The identifier  of the surface or polysurface object to project onto.
          <input name="arrSurfaces" optional="Required" vartype="geometrical-string-array">The identifiers  of the surface or polysurface objects to project onto.
          <input name="arrDirection" optional="Required" vartype="geometrical-string-array">The direction  (3-D vector) to project the curves.
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the newly created, projected  curve objects, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="RebuildCurve">
        <description>Rebuilds a curve to given degree and control point count. For more information, see the Rhino help file for the Rebuild command.</description>
        <OLE-syntax>Rhino.RebuildCurve (strObject [, intDegree [, intPointCount]])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="intDegree" optional="Optional" vartype="integer">The new degree,  which must be greater than 1. The default is 3.
          <input name="intPointCount" optional="Optional" vartype="integer">The new point count, which must be bigger than intDegree.  With closed curves, the minimum point count is 3. The  highest accepted point count is 1000.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="RemoveCurveKnot">
        <description>Deletes a knot from a curve object.</description>
        <OLE-syntax>Rhino.RemoveCurveKnot (strObject, dblParameter)<input name="strObject" optional="Required" vartype="String">The identifier of the curve object.
          <input name="dblParameter" optional="Required" vartype="double">The parameter on the curve. Note, if the parameter is not equal to one of the existing knots, then the knot closest to the specified parameter will be removed.
          <output name="missing" optional="Optional" vartype="Boolean">True of False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="RemoveShortCurveSegments">
        <description>Remove short segments from a curve object. Note, this does not change the curve's domain, but it will change the relative parameterization.</description>
        <OLE-syntax>Rhino.RemoveShortCurveSegments (strObject, dblTolerance)<input name="strObject" optional="Required" vartype="String">The identifier  of the curve object.
          <input name="dblTolerance" optional="Required" vartype="double">The tolerance.  If &lt; 0 (Default), then an appropriate tolerance is automatically  calculated. If == 0, then Rhino's internal zero tolerance is used.  If &gt; 0, then the input value is used.
          <output name="missing" optional="Optional" vartype="Boolean">True if short segments were both detected  and removed, False otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="ReverseCurve">
        <description>Reverses the direction of a curve object. This feature can also be found in Rhino's Dir command.</description>
        <OLE-syntax>Rhino.ReverseCurve (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="SimplifyCurve">
        <description>Simplify curve replaces the curve with a geometrically equivalent polycurve. The polycurve will have the following properties:</description>
        <OLE-syntax>Rhino.SimplifyCurve (strObject [, intFlags])<input name="strObject" optional="Required" vartype="String">The curve object's identifier.
          <input name="intFlags" optional="Optional" vartype="integer">The simplification methods to use. By default, all methods are used (intFlags = 0). The possible options are as follows:<input-subset name="0" optional="Optional" vartype="integer">Use all methods.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Do not split NURBS curves at fully multiple knots.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Do not replace segments with IsCurveLinear = True with line curves.</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Do not replace segments with IsArc = True with arc curves.</input-subset>
            <input-subset name="8" optional="Optional" vartype="integer">Do not replace rational NURBS curves with constant denominator with an equivalent non-rational NURBS curve.</input-subset>
            <input-subset name="16" optional="Optional" vartype="integer">Do not adjust curves at G1-joins.</input-subset>
            <input-subset name="32" optional="Optional" vartype="integer">Do not merge adjacent co-linear lines or co-circular arcs or combine consecutive line segments into a polyline.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="SplitCurve">
        <description>Splits, or divides, a curve at a specified parameter or set of parameters. All parameters must be in the interior of the curve's domain.</description>
        <OLE-syntax>Rhino.SplitCurve (strObject, dblParameter [, blnDelete])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="dblParameter" optional="Required" vartype="double">The parameter, to split the curve at, that is in the interval returned by CurveDomain.
          <input name="arrParameters" optional="Required" vartype="geometrical-string-array">An array of one or more parameters, to split the curve at, that are in the interval returned by CurveDomain.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete the  input curve. The default is to delete the input curve (True).
          <output name="missing" optional="Optional" vartype="Array">An array containing the identifiers of  the newly created curve objects, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="TrimCurve">
        <description>Trims a curve by removing portions of the curve outside the specified interval.</description>
        <OLE-syntax>Rhino.TrimCurve (strObject, arrInterval [, blnDelete])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="arrInterval" optional="Required" vartype="number-array">An array of  two numbers identifying the interval to keep. Portions of the  curve before domain(0) and after domain(1) will be removed. If  the input curve is open, the interval must be increasing. If the  input curve is closed and the interval is decreasing, then the  portion of the curve across the start and end of the curve is  returned.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete the input curve.  The default is to delete the input curve (True).
          <output name="missing" optional="Optional" vartype="String">The identifier of the newly created curve  object, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Curve_Methods" name="Rhino">
      <method name="TweenCurve">
        <description>Creates curves between two open or closed input curves.</description>
        <OLE-syntax>Rhino.TweenCurve (strCurve0, strCurve1 [, intNumCurves [, intMethod [, intNumSamples]]]])<input name="strCurve0" optional="Required" vartype="String">The first  curve object's identifier.
          <input name="strCurve1" optional="Required" vartype="String">The second  curve object's identifier.
          <input name="intNumCurves" optional="Optional" vartype="integer">The number  of curves to create. The default is 1.
          <input name="intMethod " optional="Optional" vartype="integer">The method  for refining the output curves, where:<input-subset name="0 (Default)" optional="Optional" vartype="integer">Uses the control points of the  curves for matching. So the first control point of first  curve is matched to first control point of the second  curve.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Refits the output curves like using the FitCurve method. Both  the input curve and the output curve will have the same  structure. The resulting curves are usually more complex  than input unless input curves are compatible.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Input curves are divided to the  specified number of points on the curve, corresponding  points define new points that output curves go through.  If you are making one tween curve, the method essentially  does the following: divides the two curves into an equal  number of points, finds the midpoint between the corresponding  points on the curves. and interpolates the tween curve  through those points.</input-subset>
          
          <input name="intNumSamples" optional="Optional" vartype="integer">The number of samples points to is intMethod = 2. The default is 10.
          <output name="missing" optional="Optional" vartype="Array">The identifier of the new curve objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="AddAlignedDimension">
        <description>Adds an aligned dimension object to the document. An aligned dimension is a linear dimension lined up with two points.</description>
        <OLE-syntax>Rhino.AddAlignedDimension (arrPlane, arrOrigin, arrOffset, arrPlane [, strStyle])<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane  on which the dimension will lie.
          <input name="arrOrigin" optional="Required" vartype="single-xyz-array">The origin,  or first, point of the dimension.
          <input name="arrOffset" optional="Required" vartype="single-xyz-array">The offset,  or second, point of the dimension.
          <input name="arrPlane " optional="Required" vartype="single-xyz-array">The location  point of the dimension line.
          <input name="strStyle" optional="Optional" vartype="String">The name  of the dimension style. If omitted, the current dimension  style is used.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="AddDimStyle">
        <description>Adds a new dimension style to the document. The new dimension style will be initialized with the current default dimension style properties.</description>
        <OLE-syntax>Rhino.AddDimStyle ([strDimStyle])<input name="strDimStyle" optional="Optional" vartype="String">The name of the new dimension style. If omitted, Rhino automatically generates the dimension style name.
          <output name="missing" optional="Optional" vartype="String">The name of the new dimension style if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="AddLeader">
        <description>Adds an annotation leader to the document. Leader objects are planar. The array of 3-D points passed to this member should be co-planar.</description>
        <OLE-syntax>Rhino.AddLeader (arrPoints [, strView [, [strText]])<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of  3-D points. The array must contain at least two points.
          <input name="strView" optional="Optional" vartype="String">The title of the view. If a view title is specified, arrPoints will be constrained to the view's construction plane. If a view title is not specified, arrPoints  will be constrained to a plane fit through the array of points.
          <input name="strText" optional="Optional" vartype="String">The leader's  text string.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="AddLinearDimension">
        <description>Adds a linear dimension object to the document.</description>
        <OLE-syntax>Rhino.AddLinearDimension (arrPlane, arrOrigin, arrOffset, arrLocation [, strStyle])<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane  on which the dimension will lie.
          <input name="arrOrigin" optional="Required" vartype="single-xyz-array">The origin,  or first, point of the dimension.
          <input name="arrOffset" optional="Required" vartype="single-xyz-array">The offset,  or second, point of the dimension.
          <input name="arrLocation  " optional="Required" vartype="single-xyz-array">The location  point of the dimension line.
          <input name="strStyle" optional="Optional" vartype="String">The name  of the dimension style. If omitted, the current dimension  style is used.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="AddRadialDimension">
        <description>Adds a radial dimension object to the document.</description>
        <OLE-syntax>Rhino.AddRadialDimension (arrPlane, arrCenter, arrArrow, arrKnee [, strStyle [, blnRadius]])<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane  on which the dimension will lie.
          <input name="arrCenter" optional="Required" vartype="single-xyz-array">The center  point of the dimension.
          <input name="arrArrow" optional="Required" vartype="single-xyz-array">The arrowhead  point of the dimension. The distance between the center point  and the arrowhead point defines the radius of the dimension.
          <input name="arrKnee" optional="Required" vartype="single-xyz-array">The knee point  of the dimension line. The knee point is the intermediate point  between the arrowhead point and the position of the text.
          <input name="strStyle" optional="Optional" vartype="String">The name  of the dimension style. If omitted, the current dimension  style is used.
          <input name="blnRadius" optional="Optional" vartype="Boolean">If True  (Default), a radius dimension will be created. If False, then  a diameter dimension will be created.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="CurrentDimStyle">
        <description>Returns or changes the current default dimension style.</description>
        <OLE-syntax>Rhino.CurrentDimStyle ([strDimStyle])<input name="strDimStyle" optional="Optional" vartype="String">The name of an existing dimension style to make current.
          <output name="missing" optional="Optional" vartype="String">If a dimension style is not specified, the name of the current dimension style if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a dimension style is specified, the name of the previous current dimension style if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DeleteDimStyle">
        <description>Removes an existing dimension style from the document. The dimension style to be removed cannot be the reference by any dimension objects.</description>
        <OLE-syntax>Rhino.DeleteDimStyle (strDimStyle)<input name="strDimStyle" optional="Required" vartype="String">The name of an un-referenced dimension style.
          <output name="missing" optional="Optional" vartype="String">The name of the deleted dimension style if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimensionStyle">
        <description>Returns or modifies the dimension style of a dimension object.</description>
        <OLE-syntax>Rhino.DimensionStyle (strObject [, strStyle]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strStyle" optional="Optional" vartype="String">The name of an existing dimension style.
          <output name="missing" optional="Optional" vartype="String">If strStyle is not specified, then the object's current dimension style if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strStyle is specified, then the object's previous dimension style if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimensionText">
        <description>Returns the text displayed by a dimension object.</description>
        <OLE-syntax>Rhino.DimensionText (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="String">The dimension text if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimensionUserText">
        <description>Returns or modifies the user text string of a dimension object. The user text is the string that gets printed when the dimension is drawn. If it contains the token "&lt;&gt;", then the token is replaced with the measured value of the dimension, formatted according to the dimension style settings. Note, "&lt;&gt;" is the default user text string for linear dimensions.</description>
        <OLE-syntax>Rhino.DimensionUserText (strObject [, strUserText])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strUserText" optional="Optional" vartype="String">The new user text string value. To reset the use text string, use the string "&lt;&gt;".
          <output name="missing" optional="Optional" vartype="String">If strUserText is not specified, then the current user text string if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strUserText is specified, then the previous user text string if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimensionValue">
        <description>Returns the value of a dimension object.</description>
        <OLE-syntax>Rhino.DimensionValue (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Number">The value of the dimension successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimScale">
        <description>Obsolete, use DimStyleScale.</description>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleAnglePrecision">
        <description>Returns or changes the angle display precision of a dimension style.</description>
        <OLE-syntax>Rhino.DimStyleAnglePrecision (strDimStyle [, intPrecision])<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="intPrecision" optional="Optional" vartype="integer">The new angle precision value. If omitted, the current angle precision is returned.
          <output name="missing" optional="Optional" vartype="Number">If a precision is not specified, the current angle precision if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a precision is specified, the previous angle precision if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleArrowSize">
        <description>Returns or changes the arrow size of a dimension style.</description>
        <OLE-syntax>Rhino.DimStyleArrowSize (strDimStyle [, dblSize])<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="dblSize" optional="Optional" vartype="double">The new arrow size. If omitted, the current arrow size is returned.
          <output name="missing" optional="Optional" vartype="Number">If a size value is not specified, the current arrow size if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a size value is specified, the previous arrow size if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleCentermarkSize">
        <description>Returns or modifies the center mark size of a dimension style.</description>
        <OLE-syntax>Rhino.DimStyleCentermarkSize (strDimStyle [, dblSize])<input name="strDimStyle" optional="Required" vartype="String">The name  of an existing dimension style.
          <input name="dblSize" optional="Optional" vartype="double">The new center  mark size. If omitted, the current center mark size is returned.
          <output name="missing" optional="Optional" vartype="Number">If a size is not specified, the current  center mark size if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a size is specified, the previous center  mark size if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleCount">
        <description>Returns the number of dimension styles in the document.</description>
        <OLE-syntax>Rhino.DimStyleCount ()<output name="missing" optional="Optional" vartype="Number">The number of dimension styles in the document.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleDimLineExtension">
        <description>Returns or modifies the dimension line extension of a dimension style.</description>
        <OLE-syntax>Rhino.DimStyleDimLineExtension (strDimStyle [, dblExtension])<input name="strDimStyle" optional="Required" vartype="String">The name  of an existing dimension style.
          <input name="dblExtension" optional="Optional" vartype="double">The new dimension  line extension. If omitted, the current dimension line extension  is returned.
          <output name="missing" optional="Optional" vartype="Number">If an extension is not specified, the current  dimension line extension if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If an extension is specified, the previous  dimension line extension if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleExtension">
        <description>Returns or changes the extension line extension of a dimension style.</description>
        <OLE-syntax>Rhino.DimStyleExtension (strDimStyle [, dblExtension])<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="dblExtension" optional="Optional" vartype="double">The new extension line extension. If omitted, the current extension line extension is returned.
          <output name="missing" optional="Optional" vartype="Number">If an extension is not specified, the current extension line extension if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If an extension is specified, the previous extension line extension if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleFieldOverride">
        <description>Returns or changes the overridden state of a field of a child dimension style. A child dimension styles is created when a dimension style, assigned to a dimension object, is overridden.</description>
        <OLE-syntax>Rhino.DimStyleFieldOverride (strDimStyle [, dblOffset])<input name="strDimStyle" optional="Required" vartype="String">The name  of an existing dimension style.
          <input name="dblOffset" optional="Optional" vartype="double">The field  of the dimension style.<input-subset name="0" optional="Optional" vartype="double">unused</input-subset>
            <input-subset name="1" optional="Optional" vartype="double">unused</input-subset>
            <input-subset name="2" optional="Optional" vartype="double">Extension line extension</input-subset>
            <input-subset name="3" optional="Optional" vartype="double">Extension line offset</input-subset>
            <input-subset name="4" optional="Optional" vartype="double">Arrow size</input-subset>
            <input-subset name="5" optional="Optional" vartype="double">Center mark</input-subset>
            <input-subset name="6" optional="Optional" vartype="double">Text gap</input-subset>
            <input-subset name="7" optional="Optional" vartype="double">Text height</input-subset>
            <input-subset name="8" optional="Optional" vartype="double">Text alignment</input-subset>
            <input-subset name="9" optional="Optional" vartype="double">Arrow type</input-subset>
            <input-subset name="10" optional="Optional" vartype="double">Angular units</input-subset>
            <input-subset name="11" optional="Optional" vartype="double">Length format</input-subset>
            <input-subset name="12" optional="Optional" vartype="double">Angle format</input-subset>
            <input-subset name="13" optional="Optional" vartype="double">Angle resolution</input-subset>
            <input-subset name="14" optional="Optional" vartype="double">Length resolution</input-subset>
            <input-subset name="15" optional="Optional" vartype="double">Font</input-subset>
            <input-subset name="16" optional="Optional" vartype="double">Length factor</input-subset>
            <input-subset name="17" optional="Optional" vartype="double">Alternate dimension string </input-subset>
            <input-subset name="18" optional="Optional" vartype="double">Alternate length factor</input-subset>
            <input-subset name="19" optional="Optional" vartype="double">Alternate length format</input-subset>
            <input-subset name="20" optional="Optional" vartype="double">Alternate length resolution</input-subset>
            <input-subset name="21" optional="Optional" vartype="double">Alternate angle format</input-subset>
            <input-subset name="22" optional="Optional" vartype="double">Alternate angle resolution</input-subset>
            <input-subset name="23" optional="Optional" vartype="double">Prefix</input-subset>
            <input-subset name="24" optional="Optional" vartype="double">Suffix</input-subset>
            <input-subset name="25" optional="Optional" vartype="double">Alternate prefix</input-subset>
            <input-subset name="26" optional="Optional" vartype="double">Alternate suffix</input-subset>
            <input-subset name="27" optional="Optional" vartype="double">Dimension line extension</input-subset>
            <input-subset name="28" optional="Optional" vartype="double">Leader arrow size</input-subset>
            <input-subset name="29" optional="Optional" vartype="double">Leader arrow type</input-subset>
            <input-subset name="30" optional="Optional" vartype="double">Suppress extension line 1</input-subset>
            <input-subset name="31" optional="Optional" vartype="double">Suppress extension line 2</input-subset>
          
          <input name="blnOverride" optional="Optional" vartype="Boolean">Override  the field.
          <output name="missing" optional="Optional" vartype="Number">If an offset is not specified, the current  extension line offset if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If an offset is specified, the previous  extension line offset if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleFont">
        <description>Returns or changes the font used by a dimension style.</description>
        <OLE-syntax>Rhino.DimStyleFont (strDimStyle [, strFont])<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="strFont" optional="Optional" vartype="String">The new font face name. If omitted, the current font is returned.
          <output name="missing" optional="Optional" vartype="String">If a font is not specified, the current font if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a font is specified, the previous font if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleLeaderArrowSize">
        <description>Returns or changes the leader arrow size of a dimension style.</description>
        <OLE-syntax>Rhino.DimStyleLeaderArrowSize (strDimStyle [, dblSize])<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="dblSize" optional="Optional" vartype="double">The new leader arrow size. If omitted, the current leader arrow size is returned.
          <output name="missing" optional="Optional" vartype="Number">If a size value is not specified, the current leader arrow size if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a size value is specified, the previous leader arrow size if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleLengthFactor">
        <description>Returns or changes the length factor of a dimension style. Length factor is the conversion factor between Rhino units and dimension units.</description>
        <OLE-syntax>Rhino.DimStyleLengthFactor (strDimStyle [, dblFactor])<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="dblFactor" optional="Optional" vartype="double">The new length factor. If omitted, the current length factor is returned.
          <output name="missing" optional="Optional" vartype="Number">If dblFactor is not specified, the current length factor if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblFactor is specified, the previous length factor if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleLinearPrecision">
        <description>Returns or changes the linear display precision of a dimension style.</description>
        <OLE-syntax>Rhino.DimStyleLinearPrecision (strDimStyle [, intPrecision])<input name="strDimStyle" optional="Required" vartype="String">The name  of an existing dimension style.
          <input name="intPrecision" optional="Optional" vartype="integer">The new linear  precision value. If omitted, the current linear precision  is returned.
          <output name="missing" optional="Optional" vartype="Number">If a precision is not specified, the current  linear precision if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a precision is specified, the previous  linear precision if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleNames">
        <description>Returns the names of all dimension styles in the document.</description>
        <OLE-syntax>Rhino.DimStyleNames ([blnSort [, blnIncludeChildStyles]])<input name="blnSort" optional="Optional" vartype="Boolean">Return a sorted list of dimension style names.  The default is not to return a sorted list (False).
          <input name="blnIncludeChildStyles" optional="Optional" vartype="Boolean">Include child dimension styles. A child dimension  styles is created when a dimension style, assigned to a dimension  object, is overridden.
          <output name="missing" optional="Optional" vartype="Array">An  array of dimension style names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleNumberFormat">
        <description>Returns or changes the number display format of a dimension style.</description>
        <OLE-syntax>Rhino.DimStyleNumberFormat (strDimStyle [, intFormat])<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="intFormat" optional="Optional" vartype="integer">The new number display format. If omitted, the current number display format is returned. The format values are as follows:<input-subset name="0" optional="Optional" vartype="integer">Decimal</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Fractional</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Feet &amp; Inches</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If a format is not specified, the current number display format if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a format is specified, the previous number display format if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleOffset">
        <description>Returns or changes the extension line offset of a dimension style.</description>
        <OLE-syntax>Rhino.DimStyleOffset (strDimStyle [, dblOffset])<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="dblOffset" optional="Optional" vartype="double">The new extension line offset. If omitted, the current extension line offset is returned.
          <output name="missing" optional="Optional" vartype="Number">If an offset is not specified, the current extension line offset if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If an offset is specified, the previous extension line offset if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStylePrefix">
        <description>Returns or changes the prefix of a dimension style - the text to prefix to the dimension text.</description>
        <OLE-syntax>Rhino.DimStylePrefix (strDimStyle [, strPrefix])<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="strPrefix" optional="Optional" vartype="String">The new prefix. If omitted, the current prefix is returned. To remove the prefix, pass in an empty string, or "".
          <output name="missing" optional="Optional" vartype="String">If strPrefix is not specified, the current prefix if successful. Note, if no current prefix exists, Null is returned.</output>
          <output name="missing" optional="Optional" vartype="String">If strPrefix is specified, the previous prefix if successful. Note, if no previous prefix exists, Null is returned.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleScale">
        <description>Returns or modifies the scale of a dimension style. Note, this method replaces the obsolete DimScale method.</description>
        <OLE-syntax>Rhino.DimStyleScale (strDimStyle [, dblScale])<input name="strDimStyle" optional="Required" vartype="String">The name  of an existing dimension style.
          <input name="dblScale" optional="Optional" vartype="double">The new scale  value. If omitted, the scale is returned.
          <output name="missing" optional="Optional" vartype="Number">If a scale is not specified, the current  scale if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a scale is specified, the previous scale  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleSuffix">
        <description>Returns or changes the suffix of a dimension style - the text to append to the dimension text.</description>
        <OLE-syntax>Rhino.DimStyleSuffix (strDimStyle [, strSuffix])<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="strSuffix" optional="Optional" vartype="String">The new suffix. If omitted, the current suffix is returned. To remove the suffix, pass in an empty string, or "".
          <output name="missing" optional="Optional" vartype="String">If strSuffix is not specified, the current suffix if successful. Note, if no current suffix exists, Null is returned.</output>
          <output name="missing" optional="Optional" vartype="String">If strSuffix is specified, the previous suffix if successful. Note, if no previous suffix exists, Null is returned.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleTextAlignment">
        <description>Returns or changes the text alignment mode of a dimension style.</description>
        <OLE-syntax>Rhino.DimStyleTextAlignment (strDimStyle [, intAlignment])<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="intAlignment" optional="Optional" vartype="integer">The new text alignment. If omitted, the current text alignment is returned. The text alignment values are as follows:<input-subset name="0" optional="Optional" vartype="integer">Normal (same as 2)</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Horizontal to view</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Above the dimension line</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">In the dimension line</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If a mode is not specified, the current text alignment mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a mode is specified, the previous text alignment mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleTextGap">
        <description>Returns or changes the text gap used by a dimension style.</description>
        <OLE-syntax>Rhino.DimStyleTextGap (strDimStyle [, dblGap])<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="dblGap" optional="Optional" vartype="double">The new text gap. If omitted, the current text gap is returned.
          <output name="missing" optional="Optional" vartype="Number">If a gap is not specified, the current text gap if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a gap is specified, the previous text gap if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="DimStyleTextHeight">
        <description>Returns or changes the text height used by a dimension style.</description>
        <OLE-syntax>Rhino.DimStyleTextHeight (strDimStyle [, dblHeight])<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="dblHeight" optional="Optional" vartype="double">The new text height. If omitted, the current text height is returned.
          <output name="missing" optional="Optional" vartype="Number">If a height is not specified, the current text height if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a height is specified, the previous text height if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="IsAlignedDimension">
        <description>Verifies an object is an aligned dimension object.</description>
        <OLE-syntax>Rhino.IsAlignedDimension(strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="IsAngularDimension">
        <description>Verifies an object is an angular dimension object.</description>
        <OLE-syntax>Rhino.IsAngularDimension (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="IsDiameterDimension">
        <description>Verifies an object is a diameter dimension object.</description>
        <OLE-syntax>Rhino.IsDiameterDimension (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="IsDimension">
        <description>Verifies an object is a dimension object. RhinoScript considers the following objects to be dimensions:</description>
        <OLE-syntax>Rhino.IsDimension (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="IsDimStyle">
        <description>Verifies the existence of a dimension style in the document.</description>
        <OLE-syntax>Rhino.IsDimStyle (strDimStyle)<input name="strDimStyle" optional="Required" vartype="String">The name of a dimension style to test.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="IsDimStyleChild">
        <description>Verifies that a dimension style is a child dimension style. A child dimension styles is created when a dimension style, assigned to a dimension object, is overridden.</description>
        <OLE-syntax>Rhino.IsDimStyleChild (strDimStyle)<input name="strDimStyle" optional="Required" vartype="String">The name  of an existing dimension style.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="IsDimStyleReference">
        <description>Verifies that an existing dimension style is from a reference file.</description>
        <OLE-syntax>Rhino.IsDimStyleReference (strDimStyle)<input name="strDimStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="IsLeader">
        <description>Verifies an object is a dimension leader object.</description>
        <OLE-syntax>Rhino.IsLeader (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="IsLinearDimension">
        <description>Verifies an object is a linear dimension object.</description>
        <OLE-syntax>Rhino.IsLinearDimension (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="IsOrdinateDimension">
        <description>Verifies an object is an ordinate dimension object.</description>
        <OLE-syntax>Rhino.IsOrdinateDimension (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="IsRadialDimension">
        <description>Verifies an object is a radial dimension object.</description>
        <OLE-syntax>Rhino.IsRadialDimension (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="LeaderText">
        <description>Returns or modifies the text string of a dimension leader object.</description>
        <OLE-syntax>Rhino.LeaderText (strObject [, strText])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strText" optional="Optional" vartype="String">The new text string value.
          <output name="missing" optional="Optional" vartype="String">If strText is not specified, then the current text string if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strText is specified, then the previous text string if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="ParentDimStyle">
        <description>Returns the name of a child dimension style's parent dimension style. A child dimension styles is created when a dimension style, assigned to a dimension object, is overridden.</description>
        <OLE-syntax>Rhino.ParentDimStyle (strDimStyle)<input name="strDimStyle" optional="Required" vartype="String">The name  of an existing child dimension style.
          <output name="missing" optional="Optional" vartype="String">The name of a child dimension style's parent  dimension style if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If the dimension style does not have a  parent, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Dimension_Methods" name="Rhino">
      <method name="RenameDimStyle">
        <description>Renames an existing dimension style.</description>
        <OLE-syntax>Rhino.RenameDimStyle (strOldStyle, strNewStyle)<input name="strOldStyle" optional="Required" vartype="String">The name of an existing dimension style.
          <input name="strNewStyle" optional="Required" vartype="String">The new dimension style name.
          <output name="missing" optional="Optional" vartype="String">The new dimension style name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="CreatePreviewImage">
        <description>Creates a bitmap preview image of the current model.</description>
        <OLE-syntax>Rhino.CreatePreviewImage (strFile [, strView [, arrSize [, intFlags [, blnWireframe]]]])<input name="strFile" optional="Required" vartype="String">The name of the bitmap file to create. The extension of the filename controls the format of the bitmap file created.
          <input name="strView" optional="Optional" vartype="String">The title of the view. If omitted, the current active view is used.
          <input name="arrSize" optional="Optional" vartype="unknown-type-array">An array of two integers that specify the width and height of the bitmap in pixels.
          <input name="intFlags" optional="Optional" vartype="Integer">The bitmap creation flags. This parameter can be a combination of the following:<input-subset name="1" optional="Optional" vartype="Integer">Honor object highlighting. The default is to ignore highlighting (False).</input-subset>
            <input-subset name="2" optional="Optional" vartype="Integer">Draw construction plane. The default is not to draw the construction plane (False).</input-subset>
            <input-subset name="4" optional="Optional" vartype="Integer">Use ghosted shading. The default is to use the view's default display mode (False).</input-subset>
          
          <input name="blnWireframe" optional="Optional" vartype="Boolean">If specified and True, then a wireframe preview image, instead of a rendered image, will be created. Note, if this option is specified and True, then the ghosted shading flag is ignored. The default value is False.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="DocumentInfo">
        <description>Returns summary information about a saved document (3dm).</description>
        <OLE-syntax>Rhino.DocumentInfo ([strFileName])<input name="strFileName" optional="Optional" vartype="String">The file  name of the document to query. Of omitted, the currently loaded  document will be queried as long as it has been saved to disk.
          <output name="missing" optional="Optional" vartype="Array">An array of document if successful. The  array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">String. The file name</output>
          <output name="missing" optional="Optional" vartype="1">Number. The file version</output>
          <output name="missing" optional="Optional" vartype="2">String. General comments and notes  useful to McNeel Technical Support.</output>
          <output name="missing" optional="Optional" vartype="3">String. The name of the user who  created the document</output>
          <output name="missing" optional="Optional" vartype="4">Date. The date the document was  created</output>
          <output name="missing" optional="Optional" vartype="5">String. The name of the user who  last edited the document.</output>
          <output name="missing" optional="Optional" vartype="6">Date. The date the document was  last saved</output>
          <output name="missing" optional="Optional" vartype="7">Number. The revision count.</output>
          <output name="missing" optional="Optional" vartype="8">String. The application that last  saved the document.</output>
          <output name="missing" optional="Optional" vartype="9">String. The web site, or URL, of  the application that last saved the document.</output>
          <output name="missing" optional="Optional" vartype="10">String. Other details about the  application that last saved the document.</output>
          <output name="missing" optional="Optional" vartype="11">Number. The model unit system.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="DocumentModified">
        <description>Returns or sets the document's modified flag. The modified flag indicates whether or not any changes to the current document have been made.</description>
        <OLE-syntax>Rhino.DocumentModified ([blnModified])<input name="blnModified" optional="Optional" vartype="Boolean">The modified state, either True or False.
          <output name="missing" optional="Optional" vartype="Boolean">If no modified state is specified, the current modified state if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If a modified state is specified, the previous modified state if successful.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="DocumentName">
        <description>Returns the name of the currently loaded Rhino document (3DM file).</description>
        <OLE-syntax>Rhino.DocumentName ()<output name="missing" optional="Optional" vartype="String">The current document name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="DocumentPath">
        <description>Returns the path of the currently loaded Rhino document (3DM file).</description>
        <OLE-syntax>Rhino.DocumentPath ()<output name="missing" optional="Optional" vartype="String">The current document path if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="DocumentURL">
        <description>Returns or sets the uniform resource locator (URL) of the currently loaded Rhino document (3DM file).</description>
        <OLE-syntax>Rhino.DocumentURL ([strURL])<input name="strURL" optional="Optional" vartype="String">The URL.
          <output name="missing" optional="Optional" vartype="String">If no URL is specified, the current URL if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a URL is specified, the previous URL if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="EnableRedraw">
        <description>Enables or disables screen redrawing, including the layer manager window if visible.</description>
        <OLE-syntax>Rhino.EnableRedraw ([blnRedraw])<input name="blnSelect" optional="Optional" vartype="Boolean">The screen redrawing  state. If omitted, screen redrawing is enabled (True).
          <output name="missing" optional="Optional" vartype="Boolean">The previous screen redrawing state.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="ExtractPreviewImage">
        <description>Extracts the bitmap preview image from the specified model (.3dm).</description>
        <OLE-syntax>Rhino.ExtractPreviewImage (strFileName [, strModelName])<input name="strFileName" optional="Required" vartype="String">The name of the bitmap file to create. The extension of the filename controls the format of the bitmap file created.
          <input name="strModelName" optional="Optional" vartype="String">The model (.3dm) from which to extract the preview image. If omitted, the currently loaded model is used.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="IsDocumentModified">
        <description>Verifies that the current document has been modified in some way.</description>
        <OLE-syntax>Rhino.IsDocumentModified ()<output name="missing" optional="Optional" vartype="Boolean">True or False indicating either modified or not modified.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="Notes">
        <description>Returns or sets the document's notes. Notes are generally created by using Rhino's Notes command.</description>
        <OLE-syntax>Rhino.Notes ([strNotes])<input name="strNotes" optional="Optional" vartype="String">The notes.
          <output name="missing" optional="Optional" vartype="String">If strNotes is not specified, the current notes if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strNotes is specified, the previous notes if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="ReadFileVersion">
        <description>Returns the file version of the current document. Use this function to determine which version of Rhino last saved the document. Note, this function will not return values from referenced or merged files.</description>
        <OLE-syntax>Rhino.ReadFileVersion ()<output name="missing" optional="Optional" vartype="Number">The file version of the document if successful. Note, values less than zero indicate that the current document has not been read (from disk).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="Redraw">
        <description>Redraws all views.</description>
        <OLE-syntax>Rhino.Redraw ()</OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="RenderAntialias">
        <description>Returns or sets render antialiasing style. Antialiasing is a process where more than one ray is shot per pixel in an attempt to better resolve the value of the</description>
        <OLE-syntax>Rhino.RenderAntialias ([intStyle])<input name="intStyle" optional="Optional" vartype="integer">The render antialiasing style.<input-subset name="0" optional="Optional" vartype="integer">None</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Normal and slower</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Best and slowest</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If intStyle is not specified, the current render antialiasing style if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intStyle is not specified, the previous render antialiasing style if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">Is not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="RenderColor">
        <description>Returns or sets the render ambient light or background color. Render colors are represented as RGB colors. An RGB color specifies the relative intensity of red, green, and blue to cause a specific color to be displayed. See Rhino's DocumentProperties command (Rhino Render window) for details.</description>
        <OLE-syntax>Rhino.RenderColor (intItem, [lngColor])<input name="intItem" optional="Required" vartype="integer">The item you wish to either query or change.<input-subset name="0" optional="Required" vartype="integer">Ambient light color.</input-subset>
            <input-subset name="1" optional="Required" vartype="integer">Background color.</input-subset>
          
          <input name="lngColor" optional="Optional" vartype="long">The new color value. If omitted, the curreng intItem color is returned.
          <output name="missing" optional="Optional" vartype="Number">If lngColor is not specified, the current intItem color if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If lngColor is specified, the previous intItem color if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="RenderMeshDensity">
        <description>Returns or sets the render mesh density property of the active document. </description>
        <OLE-syntax>Rhino.RenderMeshDensity ([dblDensity])<input name="dblDensity" optional="Optional" vartype="double">The render mesh density, which is a number between 0.0 and 1.0.
          <output name="missing" optional="Optional" vartype="Number">If dblDensity is not specified, the current render mesh density if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblDensity is specified, the previous render mesh density if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="RenderMeshMaxAngle">
        <description>Returns or sets the render mesh maximum angle property of the active document. </description>
        <OLE-syntax>Rhino.RenderMeshMaxAngle ([dblAngle])<input name="dblAngle" optional="Optional" vartype="double">The render mesh maximum angle in degrees.
          <output name="missing" optional="Optional" vartype="Number">If dblAngle is not specified, the current render maximum angle if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblAngle is specified, the previous render mesh maximum angle if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="RenderMeshMaxAspectRatio">
        <description>Returns or sets the render mesh maximum aspect ratio property of the active document.</description>
        <OLE-syntax>Rhino.RenderMeshMaxAspectRatio ([dblRatio])<input name="dblRatio" optional="Optional" vartype="double">The render mesh maximum aspect ratio. The suggested range, when not zero, is from 1 to 100.
          <output name="missing" optional="Optional" vartype="Number">If dblRatio is not specified, the current render mesh maximum aspect ratio if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblRatio is specified, the previous render mesh maximum aspect ratio if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="RenderMeshMaxDistEdgeToSrf">
        <description>Returns or sets the render mesh maximum distance, edge to surface parameter of the active document.</description>
        <OLE-syntax>Rhino.RenderMeshMaxDistEdgeToSrf ([dblDistance])<input name="dblDistance" optional="Optional" vartype="double">The render mesh maximum distance, edge to surface.
          <output name="missing" optional="Optional" vartype="Number">If dblDistance is not specified, the current render mesh maximum distance, edge to surface if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblDistance is specified, the previous render mesh maximum distance, edge to surface if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="RenderMeshMaxEdgeLength">
        <description>Returns or sets the render mesh maximum edge length parameter of the active document.</description>
        <OLE-syntax>Rhino.RenderMeshMaxEdgeLength ([dblLength])<input name="dblLength" optional="Optional" vartype="double">The render mesh maximum edge length.
          <output name="missing" optional="Optional" vartype="Number">If dblLength is not specified, the current render mesh maximum edge length if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblLength is specified, the previous render mesh maximum edge length if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="RenderMeshMinEdgeLength">
        <description>Returns or sets the render mesh minimum edge length parameter of the active document.</description>
        <OLE-syntax>Rhino.RenderMeshMinEdgeLength ([dblLength])<input name="dblLength" optional="Optional" vartype="double">The render mesh minimum edge length.
          <output name="missing" optional="Optional" vartype="Number">If dblLength is not specified, the current render mesh minimum edge length if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblLength is specified, the previous render mesh minimum edge length if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="RenderMeshMinInitialGridQuads">
        <description>Returns or sets the render mesh minimum initial grid quads parameter of the active document.</description>
        <OLE-syntax>Rhino.RenderMeshMinInitialGridQuads ([intQuads])<input name="intQuads" optional="Optional" vartype="integer">The render mesh minimum initial grid quads. The suggested range is from 0 to 10000.
          <output name="missing" optional="Optional" vartype="Number">If intQuads is not specified, the current render mesh minimum initial grid quads if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intQuads is specified, the previous render mesh minimum initial grid quads if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="RenderMeshQuality">
        <description>Returns or sets the render mesh quality of the active document.</description>
        <OLE-syntax>Rhino.RenderMeshQuality ([intQuality])<input name="intQuality" optional="Optional" vartype="integer">The render mesh quality, either:<input-subset name="0" optional="Optional" vartype="integer">Jagged and faster. Objects may look jagged, but they should shade and render relatively quickly.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Smooth and slower. Objects should look smooth, but they may take a very long time to shade and render.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Custom.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If intQuality is not specified, the current render mesh quality if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intQuality is specified, the previous render mesh quality if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="RenderMeshSettings">
        <description>Returns or sets the render mesh settings of the active document.</description>
        <OLE-syntax>Rhino.RenderMeshSettings ([intSettings])<input name="intSettings" optional="Optional" vartype="integer">The render mesh settings, which is a bit-coded number that allows or disallows certain features. The bits can be added together in any combination to form a value between 0 and 7. The bit values are as follows:<input-subset name="0" optional="Optional" vartype="integer">No settings enabled.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Refine mesh enabled.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Jagged seams enabled.</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Simple planes enabled.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If intSettings is not specified, the current render mesh settings if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intSettings is specified, the previous render mesh settings if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="RenderResolution">
        <description>Returns or sets the render resolution. Resolution is measured in pixels. See Rhino's DocumentProperties command (Rhino Render window) for details. Note, if the render resolution is set to "viewport", then the size of the active viewt is returned.</description>
        <OLE-syntax>Rhino.RenderResolution ([arrResolution])<input name="arrResolution" optional="Required" vartype="number-array">An array containing two numbers identifying the resolution width and height in pixels.
          <output name="missing" optional="Optional" vartype="Array">If arrResolution is not specified, an array containing two numbers identifying the current resolution width and height in pixels if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrResolution is specified, an array containing two numbers identifying the previous resolution width and height in pixels if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="RenderSettings">
        <description>Returns or sets render settings. See Rhino's DocumentProperties command (Rhino Render window) for details.</description>
        <OLE-syntax>Rhino.RenderSettings ([intSettings])<input name="intSettings" optional="Optional" vartype="integer">The render setting or settings to modify. Render settings can be any combination of the following flags:<input-subset name="0" optional="Optional" vartype="integer">None.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Create shadows.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Use lights on layers that are off.</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Render curves and isocurves.</input-subset>
            <input-subset name="8" optional="Optional" vartype="integer">Render dimensions and text.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If intSettings is not specified, the current render settings if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intSettings is not specified, the previous render settings if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">Is not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="UnitAbsoluteTolerance">
        <description>Returns or sets the document's absolute tolerance parameter. Absolute tolerance is measured in drawing units. See Rhino's DocumentProperties command (Units and Page Units windows) for details.</description>
        <OLE-syntax>Rhino.UnitAbsoluteTolerance ([dblAbsTol [, blnModelUnits]])<input name="dblAbsTol" optional="Optional" vartype="double">The absolute tolerance in drawing units.
          <input name="blnModelUnits" optional="Optional" vartype="Boolean">Return or modify the document's model units (True) or the document's page units (False). The default is True.
          <output name="missing" optional="Optional" vartype="Number">If dblAbsTol is not specified, the current absolute tolerance if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblAbsTol is specified, the previous absolute tolerance if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="UnitAngleTolerance">
        <description>Returns or sets the document's angle tolerance parameter. Angle tolerance is measured degrees. See Rhino's DocumentProperties command (Units and Page Units windows) for details.</description>
        <OLE-syntax>Rhino.UnitAngleTolerance ([dblAngleTol [, blnModelUnits]])<input name="dblAngleTol" optional="Optional" vartype="double">The angle tolerance in degrees.
          <input name="blnModelUnits" optional="Optional" vartype="Boolean">Return or modify the document's model units (True) or the document's page units (False). The default is True.
          <output name="missing" optional="Optional" vartype="Number">If dblAngleTol is not specified, the current angle tolerance if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblAngleTol is specified, the previous angle tolerance if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="UnitCustomUnitSystem">
        <description>Sets the document's units system to a user-defined system. This overrides the units system set using the UnitSystem method. See Rhino's DocumentProperties command (Units and Page Units windows) for details.</description>
        <OLE-syntax>Rhino.UnitCustomUnitSystem (dblUnits [, blnScale [, strName [, blnModelUnits]]])<input name="dblUnits" optional="Required" vartype="double">The number of units per meter.
          <input name="blnScale" optional="Optional" vartype="Boolean">Scale existing geometry based on the new unit system. If not specified, any existing geometry is not scaled (False).
          <input name="strName" optional="Optional" vartype="String">The name of the new unit system. If not specified, the name "Custom" will be assigned.
          <input name="blnModelUnits" optional="Optional" vartype="Boolean">Modify the document's model units (True) or the document's page units (False). The default is True.
          <output name="missing" optional="Optional" vartype="Number">The previous units system if successful. See UnitSystem for details.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="UnitDistanceDisplayMode">
        <description>Returns or sets the document's distance display mode parameter. See Rhino's DocumentProperties command (Units and Page Units windows) for details.</description>
        <OLE-syntax>Rhino.UnitDistanceDisplayMode ([intMode [, blnModelUnits]])<input name="intMode" optional="Optional" vartype="integer">The distance display mode. The available distance display modes are as follows:<input-subset name="0" optional="Optional" vartype="integer">Decimal</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Fractional</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Feet and inches (requires that the document's units system be set to either inches or feet. See UnitSystem for details.)</input-subset>
          
          <input name="blnModelUnits" optional="Optional" vartype="Boolean">Return or modify the document's model units (True) or the document's page units (False). The default is True.
          <output name="missing" optional="Optional" vartype="Number">If intMode is not specified, the current distance display mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intMode is specified, the previous distance display mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="UnitDistanceDisplayPrecision">
        <description>Returns or sets the document's distance display precision parameter. See Rhino's DocumentProperties command (Units and Page Units windows) for details.</description>
        <OLE-syntax>Rhino.UnitDistanceDisplayPrecision ([intPrecision [, blnModelUnits]])<input name="intPrecision" optional="Optional" vartype="integer">The distance display precision. If the current distance display mode is Decimal, then intPrecision is the number of decimal places. If the current distance display mode is Fractional (including Feet and Inches), then the denominator = (1/2)^intPrecision. Use UnitDistanceDisplayMode to get the current distance display mode.
          <input name="blnModelUnits" optional="Optional" vartype="Boolean">Return or modify the document's model units (True) or the document's page units (False). The default is True.
          <output name="missing" optional="Optional" vartype="Number">If intPrecision is not specified, the current distance display precision if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intPrecision is specified, the previous distance display precision if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="UnitRelativeTolerance">
        <description>Returns or sets the document's relative tolerance parameter. Relative tolerance is measured in percent. See Rhino's DocumentProperties command (Units and Page Units windows) for details.</description>
        <OLE-syntax>Rhino.UnitRelativeTolerance ([dblRelTol [, blnModelUnits]])<input name="dblRelTol" optional="Optional" vartype="double">The relative tolerance in percent.
          <input name="blnModelUnits" optional="Optional" vartype="Boolean">Return or modify the document's model units (True) or the document's page units (False). The default is True.
          <output name="missing" optional="Optional" vartype="Number">If dblRelTol is not specified, the current relative tolerance if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblRelTol is specified, the previous relative tolerance if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="UnitScale">
        <description>Returns the scale factor for changing between unit systems.</description>
        <OLE-syntax>Rhino.UnitScale (intToSystem [, intFromSystem])<input name="intToSystem" optional="Required" vartype="integer">The units  system to convert to. The possible units systems are as  follows:<input-subset name="0" optional="Required" vartype="integer">No unit system</input-subset>
            <input-subset name="1" optional="Required" vartype="integer">Microns (1.0e-6 meters)</input-subset>
            <input-subset name="2" optional="Required" vartype="integer">Millimeters (1.0e-3 meters)</input-subset>
            <input-subset name="3" optional="Required" vartype="integer">Centimeters (1.0e-2 meters)</input-subset>
            <input-subset name="4" optional="Required" vartype="integer">Meters</input-subset>
            <input-subset name="5" optional="Required" vartype="integer">Kilometers (1.0e+3 meters)</input-subset>
            <input-subset name="6" optional="Required" vartype="integer">Microinches (2.54e-8 meters, 1.0e-6  inches)</input-subset>
            <input-subset name="7" optional="Required" vartype="integer">Mils (2.54e-5 meters, 0.001 inches)</input-subset>
            <input-subset name="8" optional="Required" vartype="integer">Inches (0.0254 meters)</input-subset>
            <input-subset name="9" optional="Required" vartype="integer">Feet (0.3408 meters, 12 inches)</input-subset>
            <input-subset name="10" optional="Required" vartype="integer">Miles (1609.344 meters, 5280 feet)</input-subset>
            <input-subset name="11" optional="Required" vartype="integer">* Reserved for Custom Unit System  *</input-subset>
            <input-subset name="12" optional="Required" vartype="integer">Angstroms (1.0e-10 meters)</input-subset>
            <input-subset name="13" optional="Required" vartype="integer">Nanometers (1.0e-9 meters)</input-subset>
            <input-subset name="14" optional="Required" vartype="integer">Decimeters (1.0e-1 meters)</input-subset>
            <input-subset name="15" optional="Required" vartype="integer">Dekameters (1.0e+1 meters)</input-subset>
            <input-subset name="16" optional="Required" vartype="integer">Hectometers (1.0e+2 meters)</input-subset>
            <input-subset name="17" optional="Required" vartype="integer">Megameters (1.0e+6 meters)</input-subset>
            <input-subset name="18" optional="Required" vartype="integer">Gigameters (1.0e+9 meters)</input-subset>
            <input-subset name="19" optional="Required" vartype="integer">Yards (0.9144 meters, 36  inches)</input-subset>
            <input-subset name="20" optional="Required" vartype="integer">Printer point (1/72 inches, computer  points)</input-subset>
            <input-subset name="21" optional="Required" vartype="integer">Printer pica (1/6 inches, (computer  picas)</input-subset>
            <input-subset name="22" optional="Required" vartype="integer">Nautical mile (1852 meters)</input-subset>
            <input-subset name="23" optional="Required" vartype="integer">Astronomical (1.4959787e+11)</input-subset>
            <input-subset name="24" optional="Required" vartype="integer">Lightyears (9.46073e+15 meters)</input-subset>
            <input-subset name="25" optional="Required" vartype="integer">Parsecs (3.08567758e+16)</input-subset>
          
          <input name="intFromSystem" optional="Optional" vartype="integer">The units  system to convert from (see above). If omitted, the document's  current unit system is used
          <output name="missing" optional="Optional" vartype="Number">The scale factor for changing between unit  systems if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="UnitSystem">
        <description>Returns or sets the document's units system. See Rhino's DocumentProperties command (Units and Page Units windows) for details.</description>
        <OLE-syntax>Rhino.UnitSystem ([intSystem [, blnScale [, blnModelUnits]]])<input name="intSystem" optional="Optional" vartype="integer">The units system. The available units systems are as follows:<input-subset name="0" optional="Optional" vartype="integer">No unit system</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Microns (1.0e-6 meters)</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Millimeters (1.0e-3 meters)</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Centimeters (1.0e-2 meters)</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Meters</input-subset>
            <input-subset name="5" optional="Optional" vartype="integer">Kilometers (1.0e+3 meters)</input-subset>
            <input-subset name="6" optional="Optional" vartype="integer">Microinches (2.54e-8 meters, 1.0e-6 inches)</input-subset>
            <input-subset name="7" optional="Optional" vartype="integer">Mils (2.54e-5 meters, 0.001 inches)</input-subset>
            <input-subset name="8" optional="Optional" vartype="integer">Inches (0.0254 meters)</input-subset>
            <input-subset name="9" optional="Optional" vartype="integer">Feet (0.3408 meters, 12 inches)</input-subset>
            <input-subset name="10" optional="Optional" vartype="integer">Miles (1609.344 meters, 5280 feet)</input-subset>
            <input-subset name="11" optional="Optional" vartype="integer">* Reserved for Custom Unit System *</input-subset>
            <input-subset name="12" optional="Optional" vartype="integer">Angstroms (1.0e-10 meters)</input-subset>
            <input-subset name="13" optional="Optional" vartype="integer">Nanometers (1.0e-9 meters)</input-subset>
            <input-subset name="14" optional="Optional" vartype="integer">Decimeters (1.0e-1 meters)</input-subset>
            <input-subset name="15" optional="Optional" vartype="integer">Dekameters (1.0e+1 meters)</input-subset>
            <input-subset name="16" optional="Optional" vartype="integer">Hectometers (1.0e+2 meters)</input-subset>
            <input-subset name="17" optional="Optional" vartype="integer">Megameters (1.0e+6 meters)</input-subset>
            <input-subset name="18" optional="Optional" vartype="integer">Gigameters (1.0e+9 meters)</input-subset>
            <input-subset name="19" optional="Optional" vartype="integer">Yards (0.9144 meters, 36 inches)</input-subset>
            <input-subset name="20" optional="Optional" vartype="integer">Printer point (1/72 inches, computer points)</input-subset>
            <input-subset name="21" optional="Optional" vartype="integer">Printer pica (1/6 inches, (computer picas)</input-subset>
            <input-subset name="22" optional="Optional" vartype="integer">Nautical mile (1852 meters)</input-subset>
            <input-subset name="23" optional="Optional" vartype="integer">Astronomical (1.4959787e+11)</input-subset>
            <input-subset name="24" optional="Optional" vartype="integer">Lightyears (9.46073e+15 meters)</input-subset>
            <input-subset name="25" optional="Optional" vartype="integer">Parsecs (3.08567758e+16)</input-subset>
          
          <input name="blnScale" optional="Optional" vartype="Boolean">Scale existing geometry based on the new unit system. If not specified, any existing geometry is not scaled (False).
          <input name="blnModelUnits" optional="Optional" vartype="Boolean">Return or modify the document's model units (True) or the document's page units (False). The default is True.
          <output name="missing" optional="Optional" vartype="Number">If intSystem is not specified, then the current unit system if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intSystem is not specified, then the previous unit system if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="UnitSystemName">
        <description>Returns the name of the current unit system.</description>
        <OLE-syntax>Rhino.UnitSystemName ([blnCapitalize [, blnSingular [, blnAbbreviate [, blnModelUnits]]]])<input name="blnCapitalize" optional="Optional" vartype="Boolean">Capitalize the first character of the units system name (e.g. return "Millimeter" instead of "millimeter"). The default is not to capitalize the first character (false).
          <input name="blnSingular" optional="Optional" vartype="Boolean">Return the singular form of the units system name (e.g. "millimeter" instead of "millimeters"). The default is to return the singular form of the name (true).
          <input name="blnAbbreviate" optional="Optional" vartype="Boolean">Abbreviate the name of the units system (e.g. return "mm" instead of "millimeter"). The default is not to abbreviate the name (false).
          <input name="blnModelUnits" optional="Optional" vartype="Boolean">Return the document's model units (True) or the document's page units (False). The default is True.
          <output name="missing" optional="Optional" vartype="String">The name of the current units system if successful.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="WorkSessionFileName">
        <description>Returns the path to the open worksession (RWS file). If Null is returned, then either there is no worksession file open, or the active worksession has not yet been saved.</description>
        <OLE-syntax>Rhino.WorkSessionFileName ()<output name="missing" optional="Optional" vartype="String">The path to the open worksession file if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="WorkSessionModelAliases">
        <description>Returns the aliases of the models used by the worksession, including the active model which might not be saved.</description>
        <OLE-syntax>Rhino.WorkSessionModelAliases ()<output name="missing" optional="Optional" vartype="Array">An array of strings identifying the aliases  of the models used by the worksession if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="WorkSessionModelCount">
        <description>Returns the number of models in the worksession, including the active model which might not be saved.</description>
        <OLE-syntax>Rhino.WorkSessionModelCount ()<output name="missing" optional="Optional" vartype="Number">The number of models in the worksession  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Document_Methods" name="Rhino">
      <method name="WorkSessionModelNames">
        <description>Returns the paths to the models used by the worksession.</description>
        <OLE-syntax>Rhino.WorkSessionModelNames ()<output name="missing" optional="Optional" vartype="Array">An array of strings identifying the paths  to the models used by the worksession if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="AddClippingPlane">
        <description>Creates a clipping plane. A clipping plane is a plane for visibly clipping away geometry in a specific view. Note, clipping planes are infinite.</description>
        <OLE-syntax>Rhino.AddClippingPlane (arrPlane, dblDU, dblDV, [strView])<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane.
          <input name="dblDU" optional="Required" vartype="double">The magnitude in the U direction.
          <input name="dblDV" optional="Required" vartype="double">The magnitude in the V direction.
          <input name="strView" optional="Optional" vartype="String">The title of the view to clip. If omitted, the current active view is used.
          <input name="arrViews" optional="Optional" vartype="nongeometrical-string-array">The titles of the views to clip. If omitted, the current active view is used.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="AddPictureFrame">
        <description>Creates a picture frame and adds it to the document.</description>
        <OLE-syntax>Rhino.AddPictureFrame (arrPlane, strFileName [, dblWidth [, dblHeight [, blnSelfIllumination [, blnEmbed [, blnUseAlpha [, blnMakeMesh]]]]]])<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane in which the PictureFrame will be  created. The bottom-left corner of picture will be at plane's  origin. The width will be in the plane's X axis direction, and  the height will be in the plane's Y axis direction.
          <input name="strFileName " optional="Required" vartype="String">The path to a bitmap or image file.
          <input name="dblWidth " optional="Optional" vartype="double">If both dblWidth and dblHeight = 0, then the width and height of the PictureFrame will be the width and height of the image. If dblWidth = 0 and dblHeight is &gt; 0, or if dblWidth &gt; 0 and dblHeight = 0, then the non-zero value is assumed to be an aspect ratio of the image&#8217;s width or height, which ever one is = 0. If both dblWidth and dblHeight  are &gt; 0, then these are assumed to be the width and height  of in the current unit system. The default is 0.
          <input name="dblHeight " optional="Optional" vartype="double">If both dblWidth and dblHeight = 0, then the width and height of the PictureFrame will be the width and height of the image. If dblWidth = 0 and dblHeight is &gt; 0, or if dblWidth &gt; 0 and dblHeight = 0, then the non-zero value is assumed to be an aspect ratio of the image&#8217;s width or height, which ever one is = 0. If both dblWidth and dblHeight  are &gt; 0, then these are assumed to be the width and height  of in the current unit system. The default is 0.
          <input name="blnSelfIllumination " optional="Optional" vartype="Boolean">If True, then the image mapped to the picture  frame plane always displays at full intensity and is not affected  by light or shadow. The default is True.
          <input name="blnEmbed" optional="Optional" vartype="Boolean">If True, then the function adds the image  to Rhino's internal bitmap table, thus making the document self-contained.  The default is False.
          <input name="blnUseAlpha" optional="Optional" vartype="Boolean">If False, the picture frame is created without  any transparency texture. If True, a transparency texture  is created with a "mask texture" set to alpha, and an  instance of the diffuse texture in the source texture slot. The  default is False.
          <input name="blnMakeMesh" optional="Optional" vartype="Boolean">If True, the function will make a PictureFrame  object from a mesh rather than a plane surface. The default is  False.
          <output name="missing" optional="Optional" vartype="String">The  identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="AddPoint">
        <description>Adds a point object to the document.</description>
        <OLE-syntax>Rhino.AddPoint (arrPoint)<input name="arrPoint" optional="Required" vartype="single-xyz-array">A 3-D point.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="AddPointCloud">
        <description>Adds a point cloud object to the document.</description>
        <OLE-syntax>Rhino.AddPointCloud (arrPoints [, arrColors])<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of  3-D points.
          <input name="arrColors" optional="Optional" vartype="single-xyz-array">An array of  RGB color values. Note, for every point, there must be a corresponding  point color. 
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="AddPoints">
        <description>Adds one or more point objects to the document.</description>
        <OLE-syntax>Rhino.AddPoints (arrPoints)<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D points.
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the new objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="AddText">
        <description>Adds a text string to the document.</description>
        <OLE-syntax>Rhino.AddText (strText, arrPoint [, dblHeight [, strFont [, intStyle [, intJustification]]]])<input name="strText" optional="Required" vartype="String">The text to display.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">A 3-D point.
          <input name="arrPlane" optional="Required" vartype="single-xyz-array">The plane  on which the text will lie. The origin of the plane will  be the origin point of the text.
          <input name="dblHeight" optional="Optional" vartype="double">The text  height. If omitted, a height of 1.0 units is used.
          <input name="strFont" optional="Optional" vartype="String">The text  font. If omitted, the Arial font is used.
          <input name="intStyle" optional="Optional" vartype="integer">The font style.  If omitted, a normal font style (0) is used. The font  style can be any number of the following flags:<input-subset name="0" optional="Optional" vartype="integer">Normal</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Bold</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Italic</input-subset>
          
          <input name="intJustification" optional="Optional" vartype="integer">The justification.  If omitted, a Bottom-Left justification (0) is used. The  justification can be any number of the following flags:<input-subset name="0" optional="Optional" vartype="integer">Bottom-Left</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Bottom-Center</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Bottom-Right</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Middle-Left</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Middle-Center</input-subset>
            <input-subset name="5" optional="Optional" vartype="integer">Middle-Right</input-subset>
            <input-subset name="6" optional="Optional" vartype="integer">Top-Left</input-subset>
            <input-subset name="7" optional="Optional" vartype="integer">Top-Middle</input-subset>
            <input-subset name="8" optional="Optional" vartype="integer">Top-Right</input-subset>
          
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="AddTextDot">
        <description>Adds an annotation text dot to the document.</description>
        <OLE-syntax>Rhino.AddTextDot (strText, arrPoint [, intHeight])<input name="strTest" optional="Required" vartype="String">A character  or text string.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">A 3-D point  identifying the origin point.
          <input name="intHeight" optional="Optional" vartype="integer">The text  height.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="BoundingBox">
        <description>Returns either a world axis-aligned or a construction plane axis-aligned bounding box of an object or of several objects.</description>
        <OLE-syntax>Rhino.BoundingBox (strObject [, strView [, blnWorldCoords]])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects.
          <input name="strView" optional="Optional" vartype="String">The title of the view that contains the construction  plane to which the bounding box should be aligned. If omitted,  a world axis-aligned bounding box will be calculated.
          <input name="arrPlane" optional="Optional" vartype="geometrical-string-array">The plane to which the bounding box should  be aligned. If omitted, a world axis-aligned bounding box  will be calculated.
          <input name="blnWorldCoords" optional="Optional" vartype="Boolean">Whether or not to return the bounding box  as world coordinates or construction plane coordinates. The  default is to return world coordinates (True). Note, this  option does not apply to world axis-aligned bounding boxes.
          <output name="missing" optional="Optional" vartype="Array">An array of eight 3-D points that define  the bounding box if successful. Points are returned in counter-clockwise  order starting with the bottom rectangle of the box. See  the image below for details.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="CircleFromPoints">
        <description>Creates a circle fit through points.</description>
        <OLE-syntax>Rhino.CircleFromPoints (arrPoints)<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of  3-D points. The array must contain at least three points.
          <output name="missing" optional="Optional" vartype="Array">An array containing the definition of the  circle if successful. The elements of the array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array">The plane of the circle.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The radius of the circle.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="ClippingPlaneDefinition">
        <description>Returns or modifies the underlying plane of a clipping plane object.</description>
        <OLE-syntax>Rhino.ClippingPlaneDefinition (strObject [, arrPlane])<input name="strObject " optional="Required" vartype="String">The object's identifier.
          <input name="arrPlane" optional="Optional" vartype="geometrical-string-array">The clipping plane object's new plane definition.
          <output name="missing" optional="Optional" vartype="Array">If arrPlaneis  not specified, the current clipping plane object's plane  if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrPlaneis  specified, the previous clipping plane object's plane if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="CompareGeometry">
        <description>Compares two objects to determine if they are geometrically identical.</description>
        <OLE-syntax>Rhino.CompareGeometry (strObject1, strObject2)<input name="strObject1" optional="Required" vartype="String">The identifier of the first object to compare.
          <input name="strObject2" optional="Required" vartype="String">The identifier of the second object to compare.
          <output name="missing" optional="Optional" vartype="Boolean">True if the objects are geometrically identical, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="FlipClippingPlane">
        <description>Reverses the direction of a clipping plane object.</description>
        <OLE-syntax>Rhino.FlipClippingPlane (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of the clipping plane object to flip.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, False otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="IsClippingPlane">
        <description>Verifies that an object is a clipping plane object.</description>
        <OLE-syntax>Rhino.IsClippingPlane (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="IsKnotVectorClamped">
        <description>Verifies that a knot vector is clamped. This method works either curve or surface knots.</description>
        <OLE-syntax>Rhino.IsKnotVectorClamped (intDegree, intCVCount, arKnots)<input name="intDegree" optional="Required" vartype="integer">The degree.
          <input name="intCVCount" optional="Required" vartype="integer">The number  of control points.
          <input name="arrKnots" optional="Required" vartype="geometrical-string-array">The knot vector.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, False otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="IsKnotVectorPeriodic">
        <description>Verifies that a knot vector is periodic. This method works either curve or surface knots.</description>
        <OLE-syntax>Rhino.IsKnotVectorPeriodic (intDegree, intCVCount, arKnots)<input name="intDegree" optional="Required" vartype="integer">The degree.
          <input name="intCVCount" optional="Required" vartype="integer">The number  of control points.
          <input name="arrKnots" optional="Required" vartype="geometrical-string-array">The knot vector.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, False otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="IsKnotVectorUniform">
        <description>Verifies that a knot vector is uniform. This method works either curve or surface knots.</description>
        <OLE-syntax>Rhino.IsKnotVectorUniform (intDegree, intCVCount, arKnots)<input name="intDegree" optional="Required" vartype="integer">The degree.
          <input name="intCVCount" optional="Required" vartype="integer">The number  of control points.
          <input name="arrKnots" optional="Required" vartype="geometrical-string-array">The knot vector.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, False otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="IsPictureFrame">
        <description>Verifies an object is a picture frame object.</description>
        <OLE-syntax>Rhino.IsPictureFrame (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="IsPoint">
        <description>Verifies an object is a point object.</description>
        <OLE-syntax>Rhino.IsPoint (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="IsPointCloud">
        <description>Verifies an object is a point cloud object.</description>
        <OLE-syntax>Rhino.IsPointCloud (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="IsText">
        <description>Verifies an object is a text object.</description>
        <OLE-syntax>Rhino.IsText (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="IsTextDot">
        <description>Verifies an object is a text dot object.</description>
        <OLE-syntax>Rhino.IsTextDot (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="KnotVectorHasBezierSpans">
        <description>Verifies that all knots in a knot vector have multiplicity equal to degree. This method works either curve or surface knots.</description>
        <OLE-syntax>Rhino.KnotVectorHasBezierSpans (intDegree, intCVCount, arKnots)<input name="intDegree" optional="Required" vartype="integer">The degree.
          <input name="intCVCount" optional="Required" vartype="integer">The number  of control points.
          <input name="arrKnots" optional="Required" vartype="geometrical-string-array">The knot vector.
          <output name="missing" optional="Optional" vartype="Boolean">True if all knots have multiplicity = degree,  False otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="KnotVectorStyle">
        <description>Returns the style of a knot vector. This method works either curve or surface knots.</description>
        <OLE-syntax>Rhino.KnotVectorStyle (intDegree, intCVCount, arKnots)<input name="intDegree" optional="Required" vartype="integer">The degree.
          <input name="intCVCount" optional="Required" vartype="integer">The number  of control points.
          <input name="arrKnots" optional="Required" vartype="geometrical-string-array">The knot vector.
          <output name="missing" optional="Optional" vartype="Number">A number identifying the knot style if  successful. The possible knot styles are:</output>
          <output name="missing" optional="Optional" vartype="Value">Description</output>
          <output name="missing" optional="Optional" vartype="0">Unknown knot style.</output>
          <output name="missing" optional="Optional" vartype="1">Uniform knots (ends not clamped).</output>
          <output name="missing" optional="Optional" vartype="2">Uniform knots (clamped ends, degree  &gt;= 2).</output>
          <output name="missing" optional="Optional" vartype="3">All internal knots have full multiplicity.</output>
          <output name="missing" optional="Optional" vartype="4">Clamped end knots (with at least  1 interior non-uniform knot).</output>
          <output name="missing" optional="Optional" vartype="5">Known to be none of the above.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="PointCloudCount">
        <description>Returns the point count of a point cloud object.</description>
        <OLE-syntax>Rhino.PointCloudCount (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a point cloud object.
          <output name="missing" optional="Optional" vartype="Number">The number of points if successful</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="PointCloudHasHiddenPoints">
        <description>Verifies that a point cloud object has hidden points.</description>
        <OLE-syntax>Rhino.PointCloudHasHiddenPoints (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="PointCloudHasPointColors">
        <description>Verifies that a point cloud object has point colors.</description>
        <OLE-syntax>Rhino.PointCloudHasPointColors (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="PointCloudHidePoints">
        <description>Returns or modifies the hidden points of a point cloud object.</description>
        <OLE-syntax>Rhino.PointCloudHidePoints (strObject [, arrHidden])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="arrHidden" optional="Optional" vartype="single-xyz-array">An array of  Boolean values indicating the hidden state (True = hidden, False  = Visible). Note, for every point, there must be a corresponding  Boolean value.
          <input name="Null" optional="Optional" vartype="Null">Specifying  Null will remove, or purge, any existing hidden point information  from the point cloud.
          <output name="missing" optional="Optional" vartype="Array">If arrHidden is not specified,  the current hidden state if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrHidden is specified,  the previous hidden state if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If strObject does not have hidden points, if not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="PointCloudPointColors">
        <description>Returns or modifies the point colors of a point cloud object.</description>
        <OLE-syntax>Rhino.PointCloudPointColors (strObject [, arrPointColors])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="arrPointColors" optional="Optional" vartype="single-xyz-array">An array of  RGB color values. Note, for every point, there must be a corresponding  point color.
          <input name="Null" optional="Optional" vartype="Null">Specifying  Null will remove, or purge, any existing point colors from the  point cloud.
          <output name="missing" optional="Optional" vartype="Array">If arrPointColors is not specified, the current point colors if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrPointColors is specified, the previous point colors if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If strObjectdoes not have point colors, if not successful, or  on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="PointCloudPoints">
        <description>Returns the points of a point cloud object.</description>
        <OLE-syntax>Rhino.PointCloudPoints (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a point cloud object.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="PointCoordinates">
        <description>Returns or modifies the X, Y, and Z coordinates of a point object.</description>
        <OLE-syntax>Rhino.PointCoordinates (strObject [, arrPoint])<input name="strObject" optional="Required" vartype="String">The identifier of a point object.
          <input name="arrPoint" optional="Optional" vartype="single-xyz-array">A new 3-D point location.
          <output name="missing" optional="Optional" vartype="Array">If arrPoint is not specified, the current 3-D point location if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrPoint is specified, the previous 3-D point location if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="TextDotFont">
        <description>Returns or modifies the font used by an annotation text dot object.</description>
        <OLE-syntax>Rhino.TextDotFont (strObject [, strFont])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="strFont" optional="Optional" vartype="String">The new font  face name. If omitted, the current font is returned.
          <output name="missing" optional="Optional" vartype="String">If a font is not specified, the current  font face name if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a font is specified, the previous  font face name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="TextDotHeight">
        <description>Returns or modifies the height of an annotation text dot object.</description>
        <OLE-syntax>Rhino.TextDotHeight (strObject [, intHeight])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="intHeight" optional="Optional" vartype="integer">The new text  height. If omitted, the current text height is returned.
          <output name="missing" optional="Optional" vartype="String">If a height is not specified, the current  text height if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a height is specified, the previous  text height if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="TextDotPoint">
        <description>Returns or modifies the location, or insertion point, of an annotation text dot object.</description>
        <OLE-syntax>Rhino.TextDotPoint (strObject [, arrPoint])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="arrPoint" optional="Optional" vartype="single-xyz-array">A 3-D point  identifying the new location point.
          <output name="missing" optional="Optional" vartype="Array">If a new location is not specified, the  3-D point identifying the current location if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If a new location is specified, the  3-D point identifying the previous location if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="TextDotText">
        <description>Returns or modifies the text string of an annotation text dot object. Annotation dots can be created using Rhino's Dot command.</description>
        <OLE-syntax>Rhino.TextDotText (strObject [, strText])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="strText" optional="Optional" vartype="String">A new character  or text string.
          <output name="missing" optional="Optional" vartype="String">If a new text string is not specified,  the current string value if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a new text string is specified, the  previous string value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="TextObjectFont">
        <description>Returns or modifies the font used by text object.</description>
        <OLE-syntax>Rhino.TextObjectFont (strObject [, strFont])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="strFont" optional="Optional" vartype="String">The new font  face name. If omitted, the current font is returned.
          <output name="missing" optional="Optional" vartype="String">If a font is not specified, the current  font face name if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a font is specified, the previous  font face name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="TextObjectFormula">
        <description>Returns or modifies the text field, or formula, of a text object. Text fields are formulas that are evaluated while Rhino is running and the result is displayed in the text. </description>
        <OLE-syntax>Rhino.TextObjectFormula (strObject [, strFormula])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="strFormula" optional="Optional" vartype="String">A new text  field, or formula.
          <output name="missing" optional="Optional" vartype="String">If a new formula is not specified, the  current formula value if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a new formula is specified, the  previous formula value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="TextObjectHeight">
        <description>Returns or modifies the height of a text object.</description>
        <OLE-syntax>Rhino.TextObjectHeight (strObject [, dblHeight])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="dblHeight" optional="Optional" vartype="double">The new text  height. If omitted, the current text height is returned.
          <output name="missing" optional="Optional" vartype="String">If a height is not specified, the current  text height if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a height is specified, the previous  text height if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="TextObjectJustification">
        <description>Returns or modifies the justification of a text object.</description>
        <OLE-syntax>Rhino.TextObjectJustification (strObject [, intJustification])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="intJustification" optional="Optional" vartype="integer">The justification.  If omitted, a Bottom-Left justification (0) is used. The  justification can be any number of the following flags:<input-subset name="0" optional="Optional" vartype="integer">Bottom-Left</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Bottom-Center</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Bottom-Right</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Middle-Left</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Middle-Center</input-subset>
            <input-subset name="5" optional="Optional" vartype="integer">Middle-Right</input-subset>
            <input-subset name="6" optional="Optional" vartype="integer">Top-Left</input-subset>
            <input-subset name="7" optional="Optional" vartype="integer">Top-Middle</input-subset>
            <input-subset name="8" optional="Optional" vartype="integer">Top-Right</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If a justification is not specified,the  current justification if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a justification is specified,the  previous justification if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="TextObjectPlane">
        <description>Returns or modifies the plane used by a text object.</description>
        <OLE-syntax>Rhino.TextObjectPlane(strObject [, arrPlane])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="arrPlane" optional="Optional" vartype="geometrical-string-array">The new construction  plane. The elements of a plane array are as follows:<input-subset name="0" optional="Optional" vartype="geometrical-string-array">Required. The construction  plane's origin (3-D point).</input-subset>
            <input-subset name="1" optional="Optional" vartype="geometrical-string-array">Required. The construction  plane's X axis direction (3-D vector).</input-subset>
            <input-subset name="2" optional="Optional" vartype="geometrical-string-array">Required. The construction  plane's Y axis direction (3-D vector).</input-subset>
            <input-subset name="3" optional="Optional" vartype="geometrical-string-array">Optional. The construction  plane's Z axis direction (3-D vector).</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">If a plane is not specified, the current  plane if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If a plane is specified, the previous plane  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="TextObjectPoint">
        <description>Returns or modifies the location of a text object.</description>
        <OLE-syntax>Rhino.TextObjectPoint (strObject [, arrPoint])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="arrPoint" optional="Optional" vartype="single-xyz-array">A 3-D point  identifying the new location point.
          <output name="missing" optional="Optional" vartype="Array">If a new location is not specified, the  3-D point identifying the current location if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If a new location is specified, the  3-D point identifying the previous location if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="TextObjectStyle">
        <description>Returns or modifies the font style of a text object.</description>
        <OLE-syntax>Rhino.TextObjectStyle (strObject [, intStyle])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="intStyle" optional="Optional" vartype="integer">The font style.  If omitted, the current font style is returned. The  font style can be any number of the following flags:<input-subset name="0" optional="Optional" vartype="integer">Normal</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Bold</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Italic</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If a style is not specified,the current  font style if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a style is specified,the previous  font style if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Geometry_Methods" name="Rhino">
      <method name="TextObjectText">
        <description>Returns or modifies the text string of a text object. Text objects can be created using Rhino's Text command.</description>
        <OLE-syntax>Rhino.TextObjectText (strObject [, strText])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="strText" optional="Optional" vartype="String">A new character  or text string.
          <output name="missing" optional="Optional" vartype="String">If a new text string is not specified,  the current string value if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a new text string is specified, the  previous string value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="AddGroup">
        <description>Adds a new empty group to the document.</description>
        <OLE-syntax>Rhino.AddGroup ([strGroup])<input name="strGroup" optional="Optional" vartype="String">The name of the new group. If omitted, Rhino automatically generates the group name.
          <output name="missing" optional="Optional" vartype="String">The name of the new group if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="AddObjectsToGroup">
        <description>Adds one or more objects to an existing group. Neither the objects nor the group can be reference objects.</description>
        <OLE-syntax>Rhino.AddObjectsToGroup (arrObjects, strGroup)<input name="arrObjects" optional="Required" vartype="unknown-type-array">An array of object identifiers.
          <input name="strGroup" optional="Required" vartype="String">The name of an existing group.
          <output name="missing" optional="Optional" vartype="Number">The number of objects added to the group if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="AddObjectToGroup">
        <description>Adds a single object to an existing group. Neither the object nor the group can be reference objects.</description>
        <OLE-syntax>Rhino.AddObjectToGroup (strObject, strGroup)<input name="strObject" optional="Required" vartype="String">The identifier of the object to add to the group.
          <input name="strGroup" optional="Required" vartype="String">The name of an existing group.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="DeleteGroup">
        <description>Removes an existing group from the document. Reference groups cannot be removed. Deleting a group does not delete the member objects.</description>
        <OLE-syntax>Rhino.DeleteGroup (strGroup)<input name="strGroup" optional="Required" vartype="String">The name of an existing group.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="GetGroupUserText">
        <description>Returns user text that is stored on a group. For more details on User Text, see the discussion found in the User Data Methods summary.</description>
        <OLE-syntax>Rhino.GetGroupUserText (strGroup [, strKey])<input name="strGroup " optional="Required" vartype="String">The name  or identifier of an existing group.
          <input name="strKey" optional="Optional" vartype="String">The key name.  If omitted or an empty string ("") is specified,  all key names for the layer are returned.
          <output name="missing" optional="Optional" vartype="String">If strKey is specified,  then the associated value if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If strKey is not specified,  then an array of key names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="GroupCount">
        <description>Returns the number of groups in the document.</description>
        <OLE-syntax>Rhino.GroupCount ()<output name="missing" optional="Optional" vartype="Number">The number of groups if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="GroupNames">
        <description>Returns the name of all the groups in the document.</description>
        <OLE-syntax>Rhino.GroupNames ()<output name="missing" optional="Optional" vartype="Array">An array of group names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="HideGroup">
        <description>Hides a group of object. Hidden objects are not visible, cannot be snapped to, and cannot be selected.</description>
        <OLE-syntax>Rhino.HideGroup (strGroup)<input name="strGroup" optional="Required" vartype="String">The name of an existing group.
          <output name="missing" optional="Optional" vartype="Number">The number of object that were hidden if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="IsGroup">
        <description>Verifies the existence of a group.</description>
        <OLE-syntax>Rhino.IsGroup (strGroup)<input name="strGroup" optional="Required" vartype="String">The name of an existing group.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="IsGroupEmpty">
        <description>Verifies that an existing group is empty, or contains no object members.</description>
        <OLE-syntax>Rhino.IsGroupEmpty (strGroup)<input name="strGroup" optional="Required" vartype="String">The name of an existing group.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="LockGroup">
        <description>Locks a group of objects. Locked object are visible, and they can be snapped to. But, they cannot be selected.</description>
        <OLE-syntax>Rhino.LockGroup (strGroup)<input name="strGroup" optional="Required" vartype="String">The name of an existing group.
          <output name="missing" optional="Optional" vartype="Number">The number of object that were locked if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="RemoveObjectFromAllGroups">
        <description>Removes a single object from any and all groups that it is a member. Neither the object nor the group can be a reference object.</description>
        <OLE-syntax>Rhino.RemoveObjectFromAllGroups (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="RemoveObjectFromGroup">
        <description>Removes a single object from an existing group.</description>
        <OLE-syntax>Rhino.RemoveObjectFromGroup (strObject, strGroup)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="strGroup" optional="Required" vartype="String">The name of an existing group.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="RemoveObjectFromTopGroup">
        <description>Removes a single object from it's top-most group.</description>
        <OLE-syntax>Rhino.RemoveObjectFromTopGroup (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="RemoveObjectsFromGroup">
        <description>Removes one or more objects from an existing group.</description>
        <OLE-syntax>Rhino.RemoveObjectsFromGroup (arrObjects, strGroup)<input name="arrObjects" optional="Required" vartype="unknown-type-array">An array of object identifiers.
          <input name="strGroup" optional="Required" vartype="String">The name of an existing group.
          <output name="missing" optional="Optional" vartype="Number">The number of objects removed from the group if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="RenameGroup">
        <description>Renames an existing group.</description>
        <OLE-syntax>Rhino.RenameGroup (strOldGroup, strNewGroup)<input name="strOldGroup" optional="Required" vartype="String">The name of an existing group.
          <input name="strNewGroup" optional="Required" vartype="String">The new group name.
          <output name="missing" optional="Optional" vartype="String">The new group name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="SetGroupUserText">
        <description>Sets or removes user text stored on a group. For more details on User Text, see the discussion found in the User Data Methods summary.</description>
        <OLE-syntax>Rhino.SetGroupUserText (strGroup, strKey [, strValue])<input name="strGroup " optional="Required" vartype="String">The name or identifier of an existing group.
          <input name="strKey" optional="Required" vartype="String">The key name to set.
          <input name="strValue" optional="Optional" vartype="String">The string value to set. If omitted the key/value pair specified by strKey  will be deleted.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="ShowGroup">
        <description>Shows a group of previously hidden objects. Hidden objects are not visible, cannot be snapped to, and cannot be selected.</description>
        <OLE-syntax>Rhino.ShowGroup (strGroup)<input name="strGroup" optional="Required" vartype="String">The name of an existing group.
          <output name="missing" optional="Optional" vartype="Number">The number of object that were shown if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Group_Methods" name="Rhino">
      <method name="UnlockGroup">
        <description>Unlocks a group of locked objects. Locked object are visible, and they can be snapped to. But, they cannot be selected.</description>
        <OLE-syntax>Rhino.UnlockGroup (strGroup)<input name="strGroup" optional="Required" vartype="String">The name of an existing group.
          <output name="missing" optional="Optional" vartype="Number">The number of object that were unlocked if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="AddHatch">
        <description>Creates a new hatch object from a closed planar curve object.</description>
        <OLE-syntax>Rhino.AddHatch (strCurve [, strHatch [, dblScale [, dblRotation]]])<input name="strCurve" optional="Required" vartype="String">The identifier of the closed planar curve that defines the boundary of the hatch object.
          <input name="strHatch" optional="Optional" vartype="String">The name of the hatch pattern to be used by the hatch object. If omitted, the current hatch pattern will be used.
          <input name="dblScale" optional="Optional" vartype="double">The hatch pattern scale factor. If omitted, a scale factor of 1.0 will be used.
          <input name="dblRotation" optional="Optional" vartype="double">The hatch pattern rotation angle in degrees. If omitted, a rotation angle of 0.0 degrees will be used.
          <output name="missing" optional="Optional" vartype="String">The identifier of the newly created hatch object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="AddHatches">
        <description>Creates one or more new hatch objects from an array of closed planar curve objects.</description>
        <OLE-syntax>Rhino.AddHatches (arrCurves [, strHatch [, dblScale [, dblRotation]]])<input name="arrCurves" optional="Required" vartype="unknown-string-array">An array of strings that identify one or more closed planar curves that defines the boundaries of the hatch objects.
          <input name="strHatch" optional="Optional" vartype="String">The name of the hatch pattern to be used by the hatch object. If omitted, the current hatch pattern will be used.
          <input name="dblScale" optional="Optional" vartype="double">The hatch pattern scale factor. If omitted, a scale factor of 1.0 will be used.
          <input name="dblRotation" optional="Optional" vartype="double">The hatch pattern rotation angle in degrees. If omitted, a rotation angle of 0.0 degrees will be used.
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the newly created hatch objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="AddHatchPatterns">
        <description>Adds hatch pattens to the document by importing hatch pattern definitions from a pattern file. For more information on hatch pattern files, see the Rhino help file for the Hatch command.</description>
        <OLE-syntax>Rhino.AddHatchPatterns (strFileName [, blnReplace])<input name="strFileName" optional="Required" vartype="String">The name of the hatch pattern file to import.
          <input name="blnReplace" optional="Optional" vartype="Boolean">If hatch pattern names already in the document match hatch pattern names in the pattern definition file, then the existing hatch patterns will be redefined. If omitted, existing hatch patterns will not be redefined (False).
          <output name="missing" optional="Optional" vartype="Array">The names of the newly added hatch patterns if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="CurrentHatchPattern">
        <description>Returns or sets the current hatch pattern.</description>
        <OLE-syntax>Rhino.CurrentHatchPattern ([strHatch])<input name="strHatch" optional="Optional" vartype="String">The name  of an existing hatch pattern to make current.
          <output name="missing" optional="Optional" vartype="String">If a hatch pattern name is not specified,  the current hatch pattern if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a hatch pattern name is specified, the  previous current hatch pattern if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="DuplicateHatchBorders">
        <description>Duplicates the border curves of a hatch object.</description>
        <OLE-syntax>Rhino.DuplicateHatchBorders (strObject [, blnDelete])<input name="strHatch" optional="Required" vartype="String">The identifier  of a hatch object.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly  created curve objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="ExplodeHatch">
        <description>Explodes a hatch object into its component objects. The exploded objects will be added to the document. If the hatch object uses a solid pattern, then planar face Brep objects will be created. Otherwise, line curve objects will be created.</description>
        <OLE-syntax>Rhino.ExplodeHatch (strObject [, blnDelete])<input name="strHatch" optional="Required" vartype="String">The identifier  of an object.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete the  hatch object. The default is to not delete the hatch object (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly  created objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="HatchArea">
        <description>Returns that area of hatches. The results are based on the current drawing units.</description>
        <OLE-syntax>Rhino.HatchArea (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of a hatch object.
          <input name="arrObjects" optional="Required" vartype="nongeometrical-string-array">An array of  strings containing the identifiers of one or more hatch objects.
          <output name="missing" optional="Optional" vartype="Array">An array of area information if successful.  The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Number">The area. If more than one hatch  was specified, the value will be the cumulative area.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the area.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="HatchPattern">
        <description>Returns or changes a hatch object's hatch pattern.</description>
        <OLE-syntax>Rhino.HatchPattern (strObject [, strHatch])<input name="strObject" optional="Required" vartype="String">The identifier of a hatch object.
          <input name="strHatch" optional="Optional" vartype="String">The name of an existing hatch pattern to replace the current hatch pattern.
          <output name="missing" optional="Optional" vartype="String">If a hatch pattern name is not specified, the current hatch pattern if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a hatch pattern name is specified, the previous current hatch pattern if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="HatchPatternCount">
        <description>Returns the number of hatch patterns in the document.</description>
        <OLE-syntax>Rhino.HatchPatternCount ()<output name="missing" optional="Optional" vartype="Number">The number of hatch patterns in the document.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="HatchPatternDescription">
        <description>Returns the description of a hatch pattern. Note, not all hatch patterns have descriptions for descriptions are optional.</description>
        <OLE-syntax>Rhino.HatchPatternDescription (strHatch)<input name="strHatch" optional="Required" vartype="String">The name  of an existing hatch pattern.
          <output name="missing" optional="Optional" vartype="String">The hatch pattern's description if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="HatchPatternFillType">
        <description>Returns the fill type of a hatch pattern. Hatch patterns have one of the following fill types:</description>
        <OLE-syntax>Rhino.HatchPatternFillType (strHatch)<input name="strHatch" optional="Required" vartype="String">The name  of an existing hatch pattern.
          <output name="missing" optional="Optional" vartype="Number">The hatch pattern's fill type if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="HatchPatternNames">
        <description>Returns the names of all of the hatch pattern in the document.</description>
        <OLE-syntax>Rhino.HatchPatternNames ()<output name="missing" optional="Optional" vartype="Array">An array of hatch pattern names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="HatchRotation">
        <description>Returns or modifies the rotation applied to the hatch pattern when it is mapped to the hatch's plane.</description>
        <OLE-syntax>Rhino.HatchRotation (strObject [, dblRotation])<input name="strObject" optional="Required" vartype="String">The identifier of a hatch object.
          <input name="dblRotation" optional="Optional" vartype="double">The rotation angle in degrees.
          <output name="missing" optional="Optional" vartype="Number">If a rotation angle is not specified, the current rotation angle if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a rotation angle is specified, the previous rotation angle if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="HatchScale">
        <description>Returns or modifies the scale applied to the hatch pattern when it is mapped to the hatch's plane.</description>
        <OLE-syntax>Rhino.HatchScale (strObject [, dblScale])<input name="strObject" optional="Required" vartype="String">The identifier of a hatch object.
          <input name="dblScale" optional="Optional" vartype="double">The scale factor.
          <output name="missing" optional="Optional" vartype="Number">If a scale factor is not specified, the current scale factor if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a scale factor is specified, the previous scale factor if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="IsHatch">
        <description>Verifies the existence of a hatch object in the document.</description>
        <OLE-syntax>Rhino.IsHatch (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of an object.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="IsHatchPattern">
        <description>Verifies the existence of a hatch pattern in the document.</description>
        <OLE-syntax>Rhino.IsHatchPattern (strHatch)<input name="strHatch" optional="Required" vartype="String">The name of a hatch pattern.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="IsHatchPatternCurrent">
        <description>Verifies that a hatch pattern is the current hatch pattern.</description>
        <OLE-syntax>Rhino.IsHatchPatternCurrent (strHatch)<input name="strHatch" optional="Required" vartype="String">The name of an existing hatch pattern.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Hatch_Methods" name="Rhino">
      <method name="IsHatchPatternReference">
        <description>Verifies that a hatch pattern is from a reference file.</description>
        <OLE-syntax>Rhino.IsHatchPatternReference (strHatch)<input name="strHatch" optional="Required" vartype="String">The name of an existing hatch pattern.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="AddLayer">
        <description>Adds a new layer to the document.</description>
        <OLE-syntax>Rhino.AddLayer ([strLayer [, lngColor [, blnVisible [, blnLocked [,strParent]]]]])<input name="strLayer" optional="Optional" vartype="String">The name  of the new layer. If omitted, Rhino automatically generates  the layer name.
          <input name="lngColor" optional="Optional" vartype="long">A Red-Green-Blue  color value. If omitted, the color Black is assigned.
          <input name="blnVisible" optional="Optional" vartype="Boolean">The layer's  visibility. The default is visible (True).
          <input name="blnLocked" optional="Optional" vartype="Boolean">The layer's  locked state. The default is not locked (False).
          <input name="strParent" optional="Optional" vartype="String">The name  or identifier of the new layer's parent layer. If omitted, the  new layer will have not parent layer.
          <output name="missing" optional="Optional" vartype="String">The name of the new layer if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="CurrentLayer">
        <description>Returns or changes the current layer.</description>
        <OLE-syntax>Rhino.CurrentLayer ([strLayer])<input name="strLayer" optional="Optional" vartype="String">The name  or identifier of an existing layer to make current.
          <output name="missing" optional="Optional" vartype="String">If a layer name is not specified, the name  of the current layer if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a layer name is specified, the name  of the previous current layer if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="DeleteLayer">
        <description>Removes an existing layer from the document. The layer to be removed cannot be the current layer. Unlike the PurgeLayer method, the layer must be empty, or contain no objects, before it can be removed. Any layers that are children of the specified layer will also be removed if they are also empty.</description>
        <OLE-syntax>Rhino.DeleteLayer (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an empty layer.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="ExpandLayer">
        <description>Expands a layer. Expanded layers can be viewed in Rhino's Layer dialog.</description>
        <OLE-syntax>Rhino.ExpandLayer (strLayer, blnExpand)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of the layer to expand.
          <input name="blnExpand" optional="Required" vartype="Boolean">True to  expand, False to collapse.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="GetLayerUserText">
        <description>Returns user text that is stored on a layer. For more details on User Text, see the discussion found in the User Data Methods summary.</description>
        <OLE-syntax>Rhino.GetLayerUserText (strLayer [, strKey])<input name="strLayer " optional="Required" vartype="String">The name  or identifier of an existing layer.
          <input name="strKey" optional="Optional" vartype="String">The key name.  If omitted or an empty string ("") is specified,  all key names for the layer are returned.
          <output name="missing" optional="Optional" vartype="String">If strKey is specified,  then the associated value if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If strKey is not specified,  then an array of key names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="IsLayer">
        <description>Verifies the existence of a layer in the document.</description>
        <OLE-syntax>Rhino.IsLayer (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="IsLayerChangeable">
        <description>Verifies that the objects on a layer can be changed (normal).</description>
        <OLE-syntax>Rhino.IsLayerChangeable (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="IsLayerChildOf">
        <description>Verifies that a layer is a child of another layer.</description>
        <OLE-syntax>Rhino.IsLayerChildOf (strLayer, strTest)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of the layer to test against.
          <input name="strTest" optional="Required" vartype="String">The name  or identifier of the layer to test.
          <output name="missing" optional="Optional" vartype="Boolean">True if strTest is a child of strLayer.  False otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="IsLayerCurrent">
        <description>Verifies that a layer is the current layer.</description>
        <OLE-syntax>Rhino.IsLayerCurrent (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="IsLayerEmpty">
        <description>Verifies that an existing layer is empty, or contains no objects.</description>
        <OLE-syntax>Rhino.IsLayerEmpty (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="IsLayerExpanded">
        <description>Verifies that a layer is expanded. Expanded layers can be viewed in Rhino's Layer dialog.</description>
        <OLE-syntax>Rhino.IsLayerExpanded (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of the layer to test.
          <output name="missing" optional="Optional" vartype="Boolean">True if expanded, False if collapsed.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="IsLayerLocked">
        <description>Verifies that an existing layer is locked.</description>
        <OLE-syntax>Rhino.IsLayerLocked (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="IsLayerOn">
        <description>Verifies that an existing layer is on.</description>
        <OLE-syntax>Rhino.IsLayerOn (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="IsLayerParentOf">
        <description>Verifies that a layer is a parent of another layer.</description>
        <OLE-syntax>Rhino.IsLayerParentOf (strLayer, strTest)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of the layer to test against.
          <input name="strTest" optional="Required" vartype="String">The name  or identifier of the layer to test.
          <output name="missing" optional="Optional" vartype="Boolean">True if strTest is a parent of strLayer.  False otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="IsLayerReference">
        <description>Verifies that an existing layer is from a reference file.</description>
        <OLE-syntax>Rhino.IsLayerReference (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="IsLayerSelectable">
        <description>Verifies that an existing layer is selectable (normal and reference).</description>
        <OLE-syntax>Rhino.IsLayerSelectable (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="IsLayerVisible">
        <description>Verifies that an existing layer is visible (normal, locked, and reference).</description>
        <OLE-syntax>Rhino.IsLayerVisible (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerChildCount">
        <description>Returns the number of immediate child layers of a layer.</description>
        <OLE-syntax>Rhino.LayerChildCount (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of the layer.
          <output name="missing" optional="Optional" vartype="Number">The number of immediate child layers if  successful</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerChildren">
        <description>Returns the immediate child layers of a layer.</description>
        <OLE-syntax>Rhino.LayerChildren ( strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of the layer.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the layer's  children if successful</output>
          <output name="missing" optional="Optional" vartype="Null">If the layer has no children, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerColor">
        <description>Returns or changes the color of a layer. Layer colors are represented as RGB colors. An RGB color specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</description>
        <OLE-syntax>Rhino.LayerColor (strLayer [, lngColor])<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <input name="lngColor" optional="Optional" vartype="long">The new color  value. If omitted, the current layer color is returned.
          <output name="missing" optional="Optional" vartype="Number">If a color value is not specified, the  current color value if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a color value is specified, the previous  color value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerCount">
        <description>Returns the number of layers in the document.</description>
        <OLE-syntax>Rhino.LayerCount ()<output name="missing" optional="Optional" vartype="Number">The number of layers in the document.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerId">
        <description>Returns the identifier of a layer given the layer's name.</description>
        <OLE-syntax>Rhino.LayerId (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  of an existing layer.
          <output name="missing" optional="Optional" vartype="String">The  layer's identifier if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerIds">
        <description>Returns the identifiers of all layers in the document. Layer identifiers can be used with all layer-related methods.</description>
        <OLE-syntax>Rhino.LayerIds ()<output name="missing" optional="Optional" vartype="Array">An  array of layer identifiers if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerLinetype">
        <description>Returns or changes the linetype of a layer.</description>
        <OLE-syntax>Rhino.LayerLinetype (strLayer [, strLinetype])<input name="strLayer" optional="Required" vartype="String">The name or identifier  of an existing layer.
          <input name="strLinetype" optional="Optional" vartype="String">The name of the new linetype.
          <output name="missing" optional="Optional" vartype="String">If a linetype is not specified, the  name of the current linetype if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a linetype is specified, the name of  the previous linetype if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerLocked">
        <description>Returns or changes the locked mode of a layer. This method should be use instead of LayerMode.</description>
        <OLE-syntax>Rhino.LayerLocked (strLayer [, blnLocked])<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <input name="blnVisible" optional="Optional" vartype="Boolean">The new  layer locked mode. True = Locked, False = Unlocked.
          <output name="missing" optional="Optional" vartype="Boolean">If a layer mode is not specified, the  current layer locked mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If a layer mode is specified, the previous  layer locked mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerMaterialIndex">
        <description>Returns or changes the material index of a layer. A material index of -1 indicates that no material has been assigned to the layer. Thus, the layer will use Rhino's default layer material.</description>
        <OLE-syntax>Rhino.LayerMaterialIndex (strLayer [, intIndex])<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <input name="intIndex" optional="Optional" vartype="integer">The new material  index.
          <output name="missing" optional="Optional" vartype="Number">A zero-based material index if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerMode">
        <description>OBSOLETE, use either LayerLocked or LayerVisible instead.</description>
        <OLE-syntax>Rhino.LayerMode (strLayer [, intMode])<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <input name="intMode" optional="Optional" vartype="integer">The new layer  mode. The layer modes are as follows:<input-subset name="0" optional="Optional" vartype="integer">Normal. The layer is visible,  and objects on the layer can be selected and changed.  (Visible and Unlocked)</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Hidden. The layer is not  visible, and objects on the layer cannot be selected or  changed. (Hidden and Unlocked)</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Locked. The layer is visible,  but objects on the layer cannot be selected or changed.  (Visible and Locked)</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If a layer mode is not specified, the  current layer mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a layer mode is specified, the previous  layer mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerName">
        <description>Returns the name of a layer given the layer's identifier.</description>
        <OLE-syntax>Rhino.LayerName (strLayer [, blnFullPath])<input name="strLayer" optional="Required" vartype="String">The identifier  of an existing layer.
          <input name="blnFullPath" optional="Optional" vartype="Boolean">If True  (Default), the layer's full path name is returned. If False, the  layer's short name, as it appears in Rhino's Layer dialog, is  returned.
          <output name="missing" optional="Optional" vartype="String">The  layer's name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerNames">
        <description>Returns the names of all layers in the document. Hierarchial layer names are return as "full path" names.</description>
        <OLE-syntax>Rhino.LayerNames ([blnSort])<input name="blnSort" optional="Optional" vartype="Boolean">Return a  sorted list of layer names. The default is not to return a sorted  list (False).
          <output name="missing" optional="Optional" vartype="Array">An  array of full path layer names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerOrder">
        <description>Returns the current display order index of a layer as displayed in Rhino's Layer dialog box. A display order index of -1 indicates that the current Layer dialog filter does not allow the layer to appear in the layer list.</description>
        <OLE-syntax>Rhino.LayerOrder (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <output name="missing" optional="Optional" vartype="Number">A zero-based display order index if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerPrintColor">
        <description>Returns or changes the print color of a layer. Layer print colors are represented as RGB colors. An RGB color specifies the relative intensity of red, green, and blue to cause a specific color to be printed.</description>
        <OLE-syntax>Rhino.LayerPrintColor (strLayer [, lngColor])<input name="strLayer" optional="Required" vartype="String">The name or identifier  of an existing layer.
          <input name="lngColor" optional="Optional" vartype="long">The new print color value.  If omitted, the current layer print color is returned.
          <output name="missing" optional="Optional" vartype="Number">If a layer print color is not specified,  the current layer print color if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a layer print color is specified, the  previous layer print color if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerPrintWidth">
        <description>Returns or changes the print width of a layer. Print width is specified in millimeters. A print width of 0.0 denotes the "default" print width. A print width &lt; 0.0 will set the layer to "No Print".</description>
        <OLE-syntax>Rhino.LayerPrintWidth (strLayer [, dblWidth])<input name="strLayer" optional="Required" vartype="String">The name or identifier  of an existing layer.
          <input name="dblWidth" optional="Optional" vartype="double">The new layer print width  in millimeters.
          <output name="missing" optional="Optional" vartype="Number">If a layer print width is not specified,  the current layer print width if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a layer print width is specified, the  previous layer print width if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="LayerVisible">
        <description>Returns or changes the visibility property of a layer. This method should be use instead of LayerMode.</description>
        <OLE-syntax>Rhino.LayerVisible (strLayer [, blnVisible])<input name="strLayer" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <input name="blnVisible" optional="Optional" vartype="Boolean">The new  layer visibility. True = Visible, False = Hidden.
          <output name="missing" optional="Optional" vartype="Boolean">If a layer mode is not specified, the  current layer visibility if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If a layer mode is specified, the previous  layer visibility if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="MatchLayer">
        <description>Matches the properties, such as color, material, linetype, print color, and print width, of a source layer to a target layer. Note, this method does not rename the target layer. Nor does it change the target layer's parent layer.</description>
        <OLE-syntax>Rhino.MatchLayer (strSourceLayer, strTargetLayer)<input name="strSourceLayer" optional="Required" vartype="String">The name  or identifier of the source layer.
          <input name="strTargetLayer" optional="Required" vartype="String">he  name or identifier of the target layer.
          <output name="missing" optional="Optional" vartype="Boolean">True  or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="MergeLayer">
        <description>Merges the contents of a source layer with that of a target layer by moving the contents of the source layer to the target layer and then deleting the source layer.</description>
        <OLE-syntax>Rhino.MergeLayer (strTargetLayer, strSourceLayer)<input name="strTargetLayer" optional="Required" vartype="String">he  name or identifier of the target layer, or layer to merge with.
          <input name="strSourceLayer" optional="Required" vartype="String">The name  or identifier of the source layer, or layer to merge.
          <output name="missing" optional="Optional" vartype="Boolean">True  if the source layer contents were moved to the target layer, and  the source layer was deleted.</output>
          <output name="missing" optional="Optional" vartype="False if some of the source layer contents  were not moved, or if the source layer was not deleted.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="ParentLayer">
        <description>Returns or modifies the parent layer of a layer.</description>
        <OLE-syntax>Rhino.ParentLayer (strLayer [, strParent])<input name="strLayer" optional="Required" vartype="String">The name  or identifier of the layer.
          <input name="strParent" optional="Optional" vartype="String">The name  or identifier of the new parent layer. To remove the parent layer,  thus making a root-level layer, specify either Null or an empty  string, or "".
          <output name="missing" optional="Optional" vartype="String">If strParent  is not specified, the name of the current parent layer if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strParent  is specified, the name of the previous parent layer if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If the layer does not have a parent, or  on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="PurgeLayer">
        <description>Removes an existing layer from the document. Unlike the DeleteLayer method, PurgeLayer will remove the layer even if contains geometry objects. The layer to be removed cannot be the current layer. </description>
        <OLE-syntax>Rhino.PurgeLayer (strLayer)<input name="strLayer" optional="Required" vartype="String">The name  or identifier of the layer to purge.
          <output name="missing" optional="Optional" vartype="String">The name of the purged layer if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="RenameLayer">
        <description>Renames an existing layer.</description>
        <OLE-syntax>Rhino.RenameLayer (strOldName, strNewName)<input name="strOldName" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <input name="strNewName" optional="Required" vartype="String">The new layer  name. Specify the layer's short name, not is full path name.
          <output name="missing" optional="Optional" vartype="String">The  new layer name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_Methods" name="Rhino">
      <method name="SetLayerUserText">
        <description>Sets or removes user text stored on a layer. For more details on User Text, see the discussion found in the User Data Methods summary.</description>
        <OLE-syntax>Rhino.SetLayerUserText (strLayer, strKey [, strValue])<input name="strLayer" optional="Required" vartype="String">The name or identifier of an existing layer.
          <input name="strKey" optional="Required" vartype="String">The key name to set.
          <input name="strValue" optional="Optional" vartype="String">The string value to set. If omitted the key/value pair specified by strKey  will be deleted.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_State_Methods" name="Rhino">
      <method name="DeleteLayerState">
        <description>Removes an existing layer state from the document.</description>
        <OLE-syntax>Rhino.DeleteLayerState (strState)<input name="strState" optional="Required" vartype="String">The name of an existing layer state.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_State_Methods" name="Rhino">
      <method name="ExportLayerStates">
        <description>Exports all layer states to an external file.</description>
        <OLE-syntax>Rhino.ExportLayerStates (strFilename)<input name="strFilename" optional="Required" vartype="String">The name of an file to create.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_State_Methods" name="Rhino">
      <method name="ImportLayerStates">
        <description>Imports layer states from a previously exported layer state file.</description>
        <OLE-syntax>Rhino.ImportLayerStates (strFilename)<input name="strFilename" optional="Required" vartype="String">The name of an existing layer state file to import
          <output name="missing" optional="Optional" vartype="Number">The number of layer states imported if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_State_Methods" name="Rhino">
      <method name="IsLayerState">
        <description>Verifies the existence of a layer state in the document.</description>
        <OLE-syntax>Rhino.IsLayerState (strState)<input name="strState" optional="Required" vartype="String">The name of an existing layer state.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_State_Methods" name="Rhino">
      <method name="LayerStateCount">
        <description>Returns the number of layer states in the document.</description>
        <OLE-syntax>Rhino.LayerStateCount ()<output name="missing" optional="Optional" vartype="Number">The number of layer states in the document.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_State_Methods" name="Rhino">
      <method name="LayerStateNames">
        <description>Returns the names of all layer states in the document.</description>
        <OLE-syntax>Rhino.LayerStateNames ([blnSort])<input name="blnSort" optional="Optional" vartype="Boolean">If not specified or True, then the layer state names are sorted in ascending order. If False, then the layer state names are sorted in descending order.
          <output name="missing" optional="Optional" vartype="Array">An array of layer state names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_State_Methods" name="Rhino">
      <method name="RenameLayerState">
        <description>Renames an existing layer state.</description>
        <OLE-syntax>Rhino.RenameLayerState (strOldState, strNewState)<input name="strOldState" optional="Required" vartype="String">The name of an existing layer state.
          <input name="strNewState" optional="Required" vartype="String">The new layer name.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success of failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_State_Methods" name="Rhino">
      <method name="RestoreLayerState">
        <description>Restores a previously saved layer state.</description>
        <OLE-syntax>Rhino.RestoreLayerState (strState [, intMode])<input name="strState" optional="Required" vartype="String">The name of an existing layer state.
          <input name="intMode" optional="Required" vartype="integer">The layer properties you want restored. Values can be added together in order to restore any number of properties at a time. If omitted, all layer properties will be restored.<input-subset name="0 (Default)" optional="Required" vartype="integer">All layer properties.</input-subset>
            <input-subset name="1" optional="Required" vartype="integer">Current layer.</input-subset>
            <input-subset name="2" optional="Required" vartype="integer">Visible/hidden status</input-subset>
            <input-subset name="4" optional="Required" vartype="integer">Locked/unlocked status.</input-subset>
            <input-subset name="8" optional="Required" vartype="integer">Layer color.</input-subset>
            <input-subset name="16" optional="Required" vartype="integer">Layer linetype</input-subset>
            <input-subset name="32" optional="Required" vartype="integer">Layer print color</input-subset>
            <input-subset name="64" optional="Required" vartype="integer">Layer print width.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success of failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Layer_State_Methods" name="Rhino">
      <method name="SaveLayerState">
        <description>Saves the current state of the layers in the document.</description>
        <OLE-syntax>Rhino.SaveLayerState ([strState])<input name="strState" optional="Optional" vartype="String">The name of the layer state. Note, if the specified layer state name already exists, then that layer state will be updated with the current state of the layers in the document.
          <output name="missing" optional="Optional" vartype="String">The name of the new or updated layer state if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="AddDirectionalLight">
        <description>Adds a new directional light object to the document.</description>
        <OLE-syntax>Rhino.AddDirectionalLight (arrStartPoint, arrEndPoint)<input name="arrStartPoint" optional="Required" vartype="single-xyz-array">The 3-D starting point of the light.
          <input name="arrEndPoint" optional="Required" vartype="single-xyz-array">The 3-D ending point and direction of the light.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="AddLinearLight">
        <description>Adds a new linear light object to the document.</description>
        <OLE-syntax>Rhino.AddLinearLight (arrStartPoint, arrEndPoint [, dblWidth])<input name="arrStartPoint" optional="Required" vartype="single-xyz-array">The 3-D starting point of the light.
          <input name="arrEndPoint" optional="Required" vartype="single-xyz-array">The 3-D ending point and direction of the light.
          <input name="dblWidth" optional="Optional" vartype="double">The width of the light.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="AddPointLight">
        <description>Adds a new point light object to the document.</description>
        <OLE-syntax>Rhino.AddPointLight (arrPoint)<input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D location point of the light.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="AddRectangularLight">
        <description>Adds a new rectangular light object to the document.</description>
        <OLE-syntax>Rhino.AddRectangularLight (arrOrigin, arrWidth, arrHeight)<input name="arrOrigin" optional="Required" vartype="single-xyz-array">The 3-D origin point of the light.
          <input name="arrWidth" optional="Required" vartype="single-xyz-array">The 3-D width and direction point of the light.
          <input name="arrHeight" optional="Required" vartype="single-xyz-array">The 3-D height and direction point of the light.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="AddSpotLight">
        <description>Adds a new spot light object to the document.</description>
        <OLE-syntax>Rhino.AddSpotLight (arrOrigin, dblRadius, arrApex)<input name="arrOrigin" optional="Required" vartype="single-xyz-array">The 3-D origin point of the light.
          <input name="dblRadius" optional="Required" vartype="double">The radius of the cone.
          <input name="arrApex" optional="Required" vartype="single-xyz-array">The 3-D apex point of the light.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="EnableLight">
        <description>Enables or disables a light object.</description>
        <OLE-syntax>Rhino.EnableLight (strObject [, blnEnable])<input name="strObject" optional="Required" vartype="String">The identifier of the light object
          <input name="blnEnable" optional="Optional" vartype="Boolean">The light's enabled status.
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is not specified, then the current enabled status if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is specified, then the previous enabled status if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="IsDirectionalLight">
        <description>Verifies a light object is a directional light.</description>
        <OLE-syntax>Rhino.IsDirectionalLight (strObject)<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="IsLight">
        <description>Verifies an object is a light object.</description>
        <OLE-syntax>Rhino.IsLight (strObject)<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="IsLightEnabled">
        <description>Verifies a light object is enabled.</description>
        <OLE-syntax>Rhino.IsLightEnabled (strObject)<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="IsLightReference">
        <description>Verifies a light object is referenced from another file.</description>
        <OLE-syntax>Rhino.IsLightReference (strObject)<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="IsLinearLight">
        <description>Verifies a light object is a linear light.</description>
        <OLE-syntax>Rhino.IsLinearLight (strObject)<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="IsPointLight">
        <description>Verifies a light object is a point light.</description>
        <OLE-syntax>Rhino.IsPointLight (strObject)<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="IsRectangularLight">
        <description>Verifies a light object is a rectangular light.</description>
        <OLE-syntax>Rhino.IsRectangularLight (strObject)<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="IsSpotLight">
        <description>Verifies a light object is a spot light.</description>
        <OLE-syntax>Rhino.IsSpotLight (strObject)<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="LightColor">
        <description>Returns or changes the color of a light. Light colors are represented as RGB colors. An RGB color specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</description>
        <OLE-syntax>Rhino.LightColor (strObject [, lngColor])<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <input name="lngColor" optional="Optional" vartype="long">The new color value. If omitted, the current light color is returned.
          <output name="missing" optional="Optional" vartype="Number">If a color value is not specified, the current light value if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a color value is specified, the previous light value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="LightCount">
        <description>Returns the number of light objects in the document.</description>
        <OLE-syntax>Rhino.LightCount ()<output name="missing" optional="Optional" vartype="Number">The number of lights in the document.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="LightDirection">
        <description>Returns or changes the direction of a light object. This function can be used to return or modify the target of spotlights.</description>
        <OLE-syntax>Rhino.LightDirection (strObject [, arrDirection])<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <input name="arrDirection" optional="Optional" vartype="single-xyz-array">The new end point, or direction. If omitted, the direction point is returned.
          <output name="missing" optional="Optional" vartype="Array">If a direction point is not specified, the current direction if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If a direction point is specified, the previous direction point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="LightLocation">
        <description>Returns or changes the location of a light object.</description>
        <OLE-syntax>Rhino.LightLocation (strObject [, arrlocation])<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <input name="arrlocation" optional="Optional" vartype="single-xyz-array">The new start point, or location. If omitted, the location point is returned.
          <output name="missing" optional="Optional" vartype="Array">If a location point is not specified, the current location if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If a location point is specified, the previous location point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="LightName">
        <description>Returns or modifies the user-definable name of a light object.</description>
        <OLE-syntax>Rhino.LightName (strObject [, strName])<input name="strObject" optional="Required" vartype="String">The identifier of the light object.
          <input name="strName" optional="Optional" vartype="String">The new light name. If omitted, the current light name is returned.
          <output name="missing" optional="Optional" vartype="String">If strName is not specified, the current light name if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strName is specified, the previous light name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="LightObjects">
        <description>Returns the identifier of light objects in the document.</description>
        <OLE-syntax>Rhino.LightObjects ()<output name="missing" optional="Optional" vartype="Array">The identifiers of all lights in the document if successful</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="RectangularLightPlane">
        <description>Returns the plane of a rectangular light object.</description>
        <OLE-syntax>Rhino.RectangularLightPlane (strObject)<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <output name="missing" optional="Optional" vartype="Array">The plane if successful. The elements of a plane array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array">The plane's origin (3-D point).</output>
          <output name="missing" optional="Optional" vartype="1">Array</output>
          <output name="missing" optional="Optional" vartype="The plane's X axis direction (3-D vector).">2</output>
          <output name="missing" optional="Optional" vartype="Array">The plane's Y axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="3">Array</output>
          <output name="missing" optional="Optional" vartype="The plane's Z axis direction (3-D vector).">Note, the X axis, Y axis, and Z axis have magnitude that indicate the extents of the rectangular light.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="SpotLightHardness">
        <description>Returns or changes the hardness of a spot light. Spotlight hardness controls the fully illuminated region.</description>
        <OLE-syntax>Rhino.SpotLightHardness (strObject [, dblHardness])<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <input name="dblHardness" optional="Optional" vartype="double">The new hardness value. A spot light's hardness values ranges from 0.0 to 1.0. If omitted, the current hardness value is returned.
          <output name="missing" optional="Optional" vartype="Number">If dblHardness is not specified, then the current hardness value if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblHardness is specified, then the previous hardness value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="SpotLightRadius">
        <description>Returns or changes the radius of a spot light.</description>
        <OLE-syntax>Rhino.SpotLightRadius (strObject [, dblRadius])<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <input name="dblRadius" optional="Optional" vartype="double">The new radius value. If omitted, the current radius value is returned.
          <output name="missing" optional="Optional" vartype="Number">If dblRadius is not specified, then the current radius value if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblRadius is specified, then the previous radius value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Light_Methods" name="Rhino">
      <method name="SpotLightShadowIntensity">
        <description>Returns or modifies the shadow intensity of a spot light.</description>
        <OLE-syntax>Rhino.SpotLightShadowIntensity (strObject [, dblIntensity])<input name="strObject" optional="Required" vartype="String">The light object's identifier.
          <input name="dblIntensity" optional="Optional" vartype="double">The new shadow intensity. A spot light's shadow intensity ranges from 0.0 to 1.0. If set to 0.0, the spot light will cast no shadows. If set to 1.0, the spot light will cast black shadows. If omitted, the current shadow intensity is returned.
          <output name="missing" optional="Optional" vartype="Number">If dblIntensity is not specified, then the current shadow intensity if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblIntensity is specified, then the previous shadow intensity if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Linetype_Methods" name="Rhino">
      <method name="IsLinetype">
        <description>Verifies the existence of a linetype in the document.</description>
        <OLE-syntax>Rhino.IsLinetype (strLinetype)<input name="strLinetype" optional="Required" vartype="String">The name of an existing linetype.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Linetype_Methods" name="Rhino">
      <method name="IsLinetypeReference">
        <description>Verifies that an existing linetype is from a reference file.</description>
        <OLE-syntax>Rhino.IsLinetypeReference (strLinetype)<input name="strLinetype" optional="Required" vartype="String">The name of an existing linetype.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Linetype_Methods" name="Rhino">
      <method name="LinetypeCount">
        <description>Returns the number of linetypes in the document.</description>
        <OLE-syntax>Rhino.LinetypeCount ()<output name="missing" optional="Optional" vartype="Number">The number of linetypes in the document.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Linetype_Methods" name="Rhino">
      <method name="LinetypeNames">
        <description>Returns the names of all linetypes in the document.</description>
        <OLE-syntax>Rhino.LinetypeNames ([blnSort])<input name="blnSort" optional="Optional" vartype="Boolean">Return a sorted list of linetype names. The default is not to return a sorted list (False).
          <output name="missing" optional="Optional" vartype="Array">An array of linetype names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="DistanceToPlane">
        <description>Returns the distance from a 3-D point to a plane.</description>
        <OLE-syntax>Rhino.DistanceToPlane (arrPlane, arrPoint)<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane. The elements of a plane array are as follows:<input-subset name="0" optional="Required" vartype="geometrical-string-array">Required. The plane's origin (3-D point).</input-subset>
            <input-subset name="1" optional="Required" vartype="geometrical-string-array">Required. The plane's X axis direction (3-D vector).</input-subset>
            <input-subset name="2" optional="Required" vartype="geometrical-string-array">Required. The plane's Y axis direction (3-D vector).</input-subset>
            <input-subset name="3" optional="Required" vartype="geometrical-string-array">Optional. The plane's Z axis direction (3-D vector).</input-subset>
          
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D point.
          <output name="missing" optional="Optional" vartype="Number">The distance if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="EvaluatePlane">
        <description>Evaluates a plane at a U,V parameter.</description>
        <OLE-syntax>Rhino.EvaluatePlane (arrPlane, arrParameter)<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane. The elements of a plane array are as follows:<input-subset name="0" optional="Required" vartype="geometrical-string-array">Required. The plane's origin (3-D point).</input-subset>
            <input-subset name="1" optional="Required" vartype="geometrical-string-array">Required. The plane's X axis direction (3-D vector).</input-subset>
            <input-subset name="2" optional="Required" vartype="geometrical-string-array">Required. The plane's Y axis direction (3-D vector).</input-subset>
            <input-subset name="3" optional="Required" vartype="geometrical-string-array">Optional. The plane's Z axis direction (3-D vector).</input-subset>
          
          <input name="arrParameter" optional="Required" vartype="unknown-type-array">An array containing the U,V parameter to evaluate.
          <output name="missing" optional="Optional" vartype="Array">The 3-D point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="IntersectPlanes">
        <description>Calculates the intersection of three planes.</description>
        <OLE-syntax>Rhino.IntersectPlanes (arrPlane1, arrPlane2, arrPlane3)<input name="arrPlane1" optional="Required" vartype="geometrical-string-array">The first  plane to intersect.
          <input name="arrPlane2" optional="Required" vartype="geometrical-string-array">The second  plane to intersect.
          <input name="arrPlane3" optional="Required" vartype="geometrical-string-array">The third  plane to intersect.
          <output name="missing" optional="Optional" vartype="Array">The 3-D point of intersection is successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineArcIntersection">
        <description>Intersect an infinite line and an arc.</description>
        <OLE-syntax>Rhino.LineArcIntersection (arrLine, arrPlane, dblRadius, dblAngle)<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the line.
          <input name="arrPlane" optional="Required" vartype="single-xyz-array">The plane  of the arc. The origin of the plane is the center point of the  arc. The X-axis of the plane is defined at the 0 angle direction.
          <input name="dblRadius" optional="Required" vartype="double">The radius  of the arc.
          <input name="dblAngle" optional="Required" vartype="double">The angle  of the arc in degrees.
          <output name="missing" optional="Optional" vartype="Array">An array containing the 3-D intersection  points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineBetweenCurves">
        <description>Finds a line segment between a pair of curves such that the line segment is either tangent or perpendicular to each of the curves.</description>
        <OLE-syntax>Rhino.LineBetweenCurves (strCurve0, dblParam0, blnPerp0, strCurve1, dblParam1, blnPerp1)<input name="strCurve0" optional="Required" vartype="String">The identifier  of the first curve object.
          <input name="dblParam0" optional="Required" vartype="double">The parameter  on the first curve to be used as a seed, or starting location,  of the calculation.
          <input name="blnPerp0" optional="Required" vartype="Boolean">If True,  the line perpendicular to the first curve will be calculated.  Otherwise, the line tangent to the first curve will be calculated.  The default is True.
          <input name="strCurve1" optional="Required" vartype="String">The identifier  of the second curve object.
          <input name="dblParam1" optional="Required" vartype="double">The parameter  on the second curve to be used as a seed, or starting location,  of the calculation.
          <input name="blnPerp1" optional="Required" vartype="Boolean">If True,  the line perpendicular to the second curve will be calculated.  Otherwise, the line tangent to the second curve will be calculated.  The default is True.
          <output name="missing" optional="Optional" vartype="Array">An array containing two 3-D points of the  line segment if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineBoxIntersection">
        <description>Intersect an infinite line and an axis-aligned bounding box. </description>
        <OLE-syntax>Rhino.LineBoxIntersection (arrLine, arrMin, arrMax [, dblTolerance])<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the line.
          <input name="arrMin" optional="Required" vartype="single-xyz-array">The minimum  bounding box point.
          <input name="arrMax" optional="Required" vartype="single-xyz-array">The maximum  bounding box point.
          <input name="dblTolerance" optional="Optional" vartype="double">If specified and greater than 0.0, then the intersection is performed against a box that has each side moved out by dblTolerance.
          <output name="missing" optional="Optional" vartype="Array">An array containing the 3-D intersection  points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineCircleIntersection">
        <description>Intersect an infinite line and a circle.</description>
        <OLE-syntax>Rhino.LineCircleIntersection (arrLine, arrPlane, dblRadius)<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the line.
          <input name="arrPlane" optional="Required" vartype="single-xyz-array">The plane  of the circle. The origin of the plane is the center point of  the circle.
          <input name="dblRadius" optional="Required" vartype="double">The radius  of the circle.
          <output name="missing" optional="Optional" vartype="Array">An  array containing the 3-D intersection points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineClosestPoint">
        <description>Finds the point on an infinite line that is closest to a test point.</description>
        <OLE-syntax>Rhino.LineClosestPoint (arrLine, arrPoint)<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points identifying the starting and ending points of the line.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The test point.
          <output name="missing" optional="Optional" vartype="Array">The point on the line that is closest to the test point is successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineCurveIntersection">
        <description>Intersect an infinite line and a curve object.</description>
        <OLE-syntax>Rhino.LineCurveIntersection (arrLine, strCurve [, dblTolerance])<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the line.
          <input name="strCurve " optional="Required" vartype="String">The identifier  of the curve object.
          <input name="dblTolerance" optional="Optional" vartype="double">The intersection  tolerance.If omitted, the document's absolute tolerance  is used.
          <output name="missing" optional="Optional" vartype="Array">A  two-dimensional array of intersection information if successful.  The array will contain one or more of the following elements:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">(n, 0)</output>
          <output name="missing" optional="Optional" vartype="Number">The intersection event type, either  Point (1) or Overlap (2).</output>
          <output name="missing" optional="Optional" vartype="(n, 1)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the intersection point on the line.">If the event type is Overlap (2),  then intersection start point on the line.</output>
          <output name="missing" optional="Optional" vartype="(n, 2)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the intersection point on the line.">If the event type is Overlap (2),  then intersection end point on the line.</output>
          <output name="missing" optional="Optional" vartype="(n, 3)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the intersection point on the curve.">If the event type is Overlap (2),  then intersection start point on the curve.</output>
          <output name="missing" optional="Optional" vartype="(n, 4)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the intersection point on the curve.">If the event type is Overlap (2),  then intersection end point on the curve.</output>
          <output name="missing" optional="Optional" vartype="(n, 5)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the line parameter.">If the event type is Overlap (2),  then the start value of the line parameter range.</output>
          <output name="missing" optional="Optional" vartype="(n, 6)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the line parameter.">If the event type is Overlap (2),  then the end value of the line parameter range.</output>
          <output name="missing" optional="Optional" vartype="(n, 7)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the curve parameter.">If the event type is Overlap (2),  then the start value of the curve parameter range.</output>
          <output name="missing" optional="Optional" vartype="(n, 8)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the curve parameter.">If the event type is Overlap (2),  then the end value of the curve parameter range.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineCylinderIntersection">
        <description>Calculates the intersection of a line and a cylinder. </description>
        <OLE-syntax>Rhino.LineCylinderIntersection (arrLine, arrCylinderPlane, dblCylinderHeight, dblCylinderRadius)<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the line.
          <input name="arrCylinderPlane" optional="Required" vartype="geometrical-string-array">The base plane  of the cylinder.
          <input name="dblCylinderHeight" optional="Required" vartype="double">The height  of the cylinder.
          <input name="dblCylinderRadius" optional="Required" vartype="double">The radius  of the cylinder.
          <output name="missing" optional="Optional" vartype="Array">An array of intersection points, either  one or two, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineIsFartherThan">
        <description>Determines if the shortest distance from a line to a point or another line is greater than a specified distance.</description>
        <OLE-syntax>Rhino.LineIsFartherThan (arrLine, dblDistance, arrPoint)<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points identifying the starting and ending points of the line.
          <input name="dblDistance" optional="Required" vartype="double">The distance.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The test point.
          <input name="arrLine2" optional="Required" vartype="multiple-xyz-array">Two 3-D points identifying the starting and ending points of the test line.
          <output name="missing" optional="Optional" vartype="Boolean">True if the shortest distance from the line to the other object is greater than dblDistance, False otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineLineIntersection">
        <description>Calculates the intersection of two non-parallel lines. Note, the two lines do not have to intersect for an intersection to be found. </description>
        <OLE-syntax>Rhino.LineLineIntersection (arrLineA, arrLineB [, blnPlanar])<input name="arrLineA" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the first line.
          <input name="arrLineB" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the second line.
          <input name="blnPlanar" optional="Optional" vartype="Boolean">Assume that  the two lines are co-planar. The default value is True.
          <output name="missing" optional="Optional" vartype="Array">If blnPlanar  is omitted or True, then a single 3-D intersection point if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If blnPlanar  is False, then an array containing a point on the first line and  a point on the second line if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineMaxDistanceTo">
        <description>Finds the longest distance between the line, as a finite chord, and a point or another line.</description>
        <OLE-syntax>Rhino.LineMaxDistanceTo (arrLine, arrPoint)<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the line.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The test point.
          <input name="arrLine2" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the test line (another  finite chord).
          <output name="missing" optional="Optional" vartype="Number">A distance (D) such that if Q is any point on the line and P is any point on the other object, then D &gt;= Rhino.Distance(Q, P).</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineMeshIntersection">
        <description>Intersect an infinite line and a mesh object.</description>
        <OLE-syntax>Rhino.LineMeshIntersection (arrLine, strMesh [, blnReturnFaces])<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the line.
          <input name="strMesh " optional="Required" vartype="String">The identifier  of the mesh object.
          <input name="blnReturnFaces" optional="Optional" vartype="Boolean">Return both  intersection points and face indices. If omitted or False,  then just the intersection points are returned.
          <output name="missing" optional="Optional" vartype="Array">If blnReturnFaces  is either omitted or False, then an array intersection points,  if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If blnReturnFaces  is True, then a one-dimensional array containing information about  each intersection if successful. Each array element is a  one-dimensional array that contains the following two elements:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array">The 3-D intersection point.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The mesh face index on which the  intersection point lies.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineMinDistanceTo">
        <description>Finds the shortest distance between the line, as a finite chord, and a point or another line.</description>
        <OLE-syntax>Rhino.LineMinDistanceTo (arrLine, arrPoint)<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the line.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The test point.
          <input name="arrLine2" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the test line (another  finite chord).
          <output name="missing" optional="Optional" vartype="Number">A distance (D) such that if Q is any point on the line and P is any point on the other object, then D &lt;= Rhino.Distance(Q, P).</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LinePlane">
        <description>Returns a plane that contains the line. The origin of the plane is at the start of the line. If possible, a plane parallel to the world XY, YZ or ZX plane is returned.</description>
        <OLE-syntax>Rhino.LinePlane (arrLine)<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points identifying the starting and ending points of the line.
          <output name="missing" optional="Optional" vartype="Array">The plane if successful. The elements of a plane array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">The plane's origin (3-D point).</output>
          <output name="missing" optional="Optional" vartype="1">The plane's X axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="2">The plane's Y axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="3">The plane's Z axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LinePlaneIntersection">
        <description>Calculates the intersection of an infinite line and an infinite plane.</description>
        <OLE-syntax>Rhino.LinePlaneIntersection (arrLine, arrPlane)<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the line to intersect.
          <input name="arrPoint" optional="Required" vartype="geometrical-string-array">The plane  to intersect.
          <output name="missing" optional="Optional" vartype="Array">The 3-D point of intersection is successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineSphereIntersection">
        <description>Calculates the intersection of a line and a sphere. </description>
        <OLE-syntax>Rhino.LineSphereIntersection (arrLine, arrSpherePlane, dblSphereRadius)<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points  identifying the starting and ending points of the line.
          <input name="arrSpherePlane" optional="Required" vartype="single-xyz-array">An equatorial  plane of the sphere. The origin of the plane will be the  center point of the sphere.
          <input name="dblSphereRadius" optional="Required" vartype="double">The radius  of the sphere.
          <output name="missing" optional="Optional" vartype="Array">An array of intersection points, either  one or two, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="LineTransform">
        <description>Transforms a line.</description>
        <OLE-syntax>Rhino.LineTransform (arrLine, arrXform)<input name="arrLine" optional="Required" vartype="multiple-xyz-array">Two 3-D points identifying the starting and ending points of the line.
          <input name="arrXform" optional="Required" vartype="unknown-type-array">A valid 4x4 transformation matrix.
          <output name="missing" optional="Optional" vartype="Array">The resulting line if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="MovePlane">
        <description>Moves the origin of a plane.</description>
        <OLE-syntax>Rhino.MovePlane (arrPlane, arrOrigin)<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane. The elements of a plane array are as follows:<input-subset name="0" optional="Required" vartype="geometrical-string-array">Required. The plane's origin (3-D point).</input-subset>
            <input-subset name="1" optional="Required" vartype="geometrical-string-array">Required. The plane's X axis direction (3-D vector).</input-subset>
            <input-subset name="2" optional="Required" vartype="geometrical-string-array">Required. The plane's Y axis direction (3-D vector).</input-subset>
            <input-subset name="3" optional="Required" vartype="geometrical-string-array">Optional. The plane's Z axis direction (3-D vector).</input-subset>
          
          <input name="arrOrigin" optional="Required" vartype="single-xyz-array">A 3-D point identifying the new origin location.
          <output name="missing" optional="Optional" vartype="Array">The plane if successful. The elements of a plane array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">The plane's origin (3-D point).</output>
          <output name="missing" optional="Optional" vartype="1">The plane's X axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="2">The plane's Y axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="3">The plane's Z axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="PlaneAngle">
        <description>Calculates the angle between two points that lie on a given plane. </description>
        <OLE-syntax>Rhino.PlaneAngle (arrPlane, arrBasePoint, arrRefPoint1, arrRefPoint2)<input name="arrPlane" optional="Required" vartype="multiple-xyz-array">The plane  on which the points lie.
          <input name="arrBasePoint" optional="Required" vartype="single-xyz-array">The base point.
          <input name="arrRefPoint1" optional="Required" vartype="single-xyz-array">The first  reference point.
          <input name="arrRefPoint2" optional="Required" vartype="single-xyz-array">The second  reference point.
          <output name="missing" optional="Optional" vartype="Number">The angle in degrees if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="PlaneArcIntersection">
        <description>Intersect a plane and an arc.</description>
        <OLE-syntax>Rhino.PlaneArcIntersection (arrPlane, arrArcPlane, dblRadius, dblAngle)<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane  to intersect.
          <input name="arrArcPlane" optional="Required" vartype="single-xyz-array">The plane  of the arc. The origin of the plane is the center point of the  arc. The X-axis of the plane is defined at the 0 angle direction.
          <input name="dblRadius" optional="Required" vartype="double">The radius  of the arc.
          <input name="dblAngle" optional="Required" vartype="double">The angle  of the arc in degrees.
          <output name="missing" optional="Optional" vartype="Array">An array containing the 3-D intersection  points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="PlaneCircleIntersection">
        <description>Intersect a plane and a circle.</description>
        <OLE-syntax>Rhino.PlaneArcIntersection (arrPlane, arrArcPlane, dblRadius)<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane  to intersect.
          <input name="arrArcPlane" optional="Required" vartype="single-xyz-array">The plane  of the circle. The origin of the plane is the center point of  the circle.
          <input name="dblRadius" optional="Required" vartype="double">The radius  of the circle.
          <output name="missing" optional="Optional" vartype="Array">An array containing the 3-D intersection  points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="PlaneClosestPoint">
        <description>Returns the point on a plane that is closest to a test point.</description>
        <OLE-syntax>Rhino.PlaneClosestPoint (arrPlane, arrPoint [, blnReturnPoint])<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane. The elements of a plane array are as follows:<input-subset name="0" optional="Required" vartype="geometrical-string-array">Required. The plane's origin (3-D point).</input-subset>
            <input-subset name="1" optional="Required" vartype="geometrical-string-array">Required. The plane's X axis direction (3-D vector).</input-subset>
            <input-subset name="2" optional="Required" vartype="geometrical-string-array">Required. The plane's Y axis direction (3-D vector).</input-subset>
            <input-subset name="3" optional="Required" vartype="geometrical-string-array">Optional. The plane's Z axis direction (3-D vector).</input-subset>
          
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D point to test.
          <input name="blnReturnPoint" optional="Optional" vartype="Boolean">If omitted or True, then the point on the plane that is closest to the test point is returned. If False, then the parameter of the point on the plane that is closest to the test point is returned.
          <output name="missing" optional="Optional" vartype="Array">If blnReturnPoint is omitted or True, then the 3-D point if successful. If blnReturnPoint is False, then an array containing the U,V parameters of the point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="PlaneCurveIntersection">
        <description>Intersect an infinite plane and a curve object.</description>
        <OLE-syntax>Rhino.PlaneCurveIntersection (arrPlane, strCurve [, dblTolerance])<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane  to intersect.
          <input name="strCurve " optional="Required" vartype="String">The identifier  of the curve object.
          <input name="dblTolerance" optional="Optional" vartype="double">The intersection  tolerance.If omitted, the document's absolute tolerance  is used.
          <output name="missing" optional="Optional" vartype="Array">A two-dimensional array of intersection  information if successful. The array will contain one or  more of the following elements:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">(n, 0)</output>
          <output name="missing" optional="Optional" vartype="Number">The intersection event type, either  Point (1) or Overlap (2).</output>
          <output name="missing" optional="Optional" vartype="(n, 1)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the intersection point on the curve.">If the event type is Overlap (2),  then intersection start point on the curve.</output>
          <output name="missing" optional="Optional" vartype="(n, 2)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the intersection point on the curve.">If the event type is Overlap (2),  then intersection end point on the curve.</output>
          <output name="missing" optional="Optional" vartype="(n, 3)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the intersection point on the plane.">If the event type is Overlap (2),  then intersection start point on the plane.</output>
          <output name="missing" optional="Optional" vartype="(n, 4)">Array (3-D Point)</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the intersection point on the plane.">If the event type is Overlap (2),  then intersection end point on the plane.</output>
          <output name="missing" optional="Optional" vartype="(n, 5)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the curve parameter.">If the event type is Overlap (2),  then the start value of the curve parameter range.</output>
          <output name="missing" optional="Optional" vartype="(n, 6)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the curve parameter.">If the event type is Overlap (2),  then the end value of the curve parameter range.</output>
          <output name="missing" optional="Optional" vartype="(n, 7)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the U plane parameter.">If the event type is Overlap (2),  then the U plane parameter for curve at (n, 5).</output>
          <output name="missing" optional="Optional" vartype="(n, 8)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the V plane parameter.">If the event type is Overlap (2),  then the V plane parameter for curve at (n, 5).</output>
          <output name="missing" optional="Optional" vartype="(n, 9)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the U plane parameter.">If the event type is Overlap (2),  then the U plane parameter for curve at (n, 6).</output>
          <output name="missing" optional="Optional" vartype="(n, 10)">Number</output>
          <output name="missing" optional="Optional" vartype="If the event type is Point (1),  then the V plane parameter.">If the event type is Overlap (2),  then the V plane parameter for curve at (n, 6).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="PlaneEquation">
        <description>Returns the equation of a plane. The standard equation of a plane with a non-zero normal vector is as follows:</description>
        <OLE-syntax>Rhino.PlaneEquation (arrPlane)<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane. The elements of a plane array are as follows:<input-subset name="0" optional="Required" vartype="geometrical-string-array">Required. The plane's origin (3-D point).</input-subset>
            <input-subset name="1" optional="Required" vartype="geometrical-string-array">Required. The plane's X axis direction (3-D vector).</input-subset>
            <input-subset name="2" optional="Required" vartype="geometrical-string-array">Required. The plane's Y axis direction (3-D vector).</input-subset>
            <input-subset name="3" optional="Required" vartype="geometrical-string-array">Optional. The plane's Z axis direction (3-D vector).</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An array containing four numbers that represent the coefficients of the equation, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="PlaneFitFromPoints">
        <description>Returns a plane that was fit through an array of 3-D points.</description>
        <OLE-syntax>Rhino.PlaneFitFromPoints (arrPoints)<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D points.
          <output name="missing" optional="Optional" vartype="Array">The plane if successful. The elements of a plane array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">The plane's origin (3-D point).</output>
          <output name="missing" optional="Optional" vartype="1">The plane's X axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="2">The plane's Y axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="3">The plane's Z axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="PlaneFromFrame">
        <description>Construct a plane from a point, and two vectors in the plane.</description>
        <OLE-syntax>Rhino.PlaneFromFrame (arrOrigin, arrXaxis, arrYaxis)<input name="arrOrigin" optional="Required" vartype="single-xyz-array">A 3-D point identifying the origin of the plane.
          <input name="arrXaxis" optional="Required" vartype="geometrical-string-array">A non-zero 3-D vector in the plane that determines the X axis direction.
          <input name="arrYaxis" optional="Required" vartype="geometrical-string-array">A non-zero 3-D vector not parallel to arrXaxis that is used to determine the Y axis direction. Note, arrYaxis does not have to be perpendicular to arrXaxis.
          <output name="missing" optional="Optional" vartype="Array">The plane if successful. The elements of a plane array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">The plane's origin (3-D point).</output>
          <output name="missing" optional="Optional" vartype="1">The plane's X axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="2">The plane's Y axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="3">The plane's Z axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="PlaneFromNormal">
        <description>Creates a plane from an origin point and a normal direction vector.</description>
        <OLE-syntax>Rhino.PlaneFromNormal (arrOrigin, arrNormal)<input name="arrOrigin" optional="Required" vartype="single-xyz-array">A 3-D point  identifying the origin of the plane.
          <input name="arrNormal" optional="Required" vartype="geometrical-string-array">A non-zero  3-D vector identifying the normal direction of the plane.
          <output name="missing" optional="Optional" vartype="Array">The plane if successful. The elements  of a plane array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">The plane's origin (3-D point).</output>
          <output name="missing" optional="Optional" vartype="1">The plane's X axis direction (3-D  vector).</output>
          <output name="missing" optional="Optional" vartype="2">The plane's Y axis direction (3-D  vector).</output>
          <output name="missing" optional="Optional" vartype="3">The plane's Z axis direction (3-D  vector).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="PlaneFromPoints">
        <description>Creates a plane from three non-colinear points.</description>
        <OLE-syntax>Rhino.PlaneFromPoints (arrOrigin, arrPointX, arrPointY)<input name="arrOrigin" optional="Required" vartype="single-xyz-array">The first point, or origin, of the plane.
          <input name="arrPointX" optional="Required" vartype="single-xyz-array">A point on the plane's X axis.
          <input name="arrPointY" optional="Required" vartype="single-xyz-array">A point on the plane's Y axis.
          <output name="missing" optional="Optional" vartype="Array">The plane if successful. The elements of a plane array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">The plane's origin (3-D point).</output>
          <output name="missing" optional="Optional" vartype="1">The plane's X axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="2">The plane's Y axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="3">The plane's Z axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="PlanePlaneIntersection">
        <description>Calculates the intersection of two planes.</description>
        <OLE-syntax>Rhino.PlanePlaneIntersection (arrPlane1, arrPlane2)<input name="arrPlane1" optional="Required" vartype="geometrical-string-array">The first  plane to intersect.
          <input name="arrPlane2" optional="Required" vartype="geometrical-string-array">The second  plane to intersect.
          <output name="missing" optional="Optional" vartype="Array">Two 3-D points identifying the starting  and ending points of the intersection line.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="PlaneSphereIntersection">
        <description>Calculates the intersection of a plane and a sphere. </description>
        <OLE-syntax>Rhino.PlaneSphereIntersection (arrPlane, arrSpherePlane, dblSphereRadius)<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane  to intersect.
          <input name="arrSpherePlane" optional="Required" vartype="single-xyz-array">An equatorial  plane of the sphere. The origin of the plane will be the  center point of the sphere.
          <input name="dblSphereRadius" optional="Required" vartype="double">The radius  of the sphere.
          <output name="missing" optional="Optional" vartype="Array">An array of intersection results, if successful.  The results are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Number">The type of intersection, where  0 = point and 1 = circle.</output>
          <output name="missing" optional="Optional" vartype="1">Array</output>
          <output name="missing" optional="Optional" vartype="If a point intersection, then an  array identifying the 3-D intersection location.">If a circle intersection, then the  circle's plane. The origin of the plane will be the center  point of the circle.</output>
          <output name="missing" optional="Optional" vartype="2 (circle intersection only)">Number</output>
          <output name="missing" optional="Optional" vartype="If a circle intersection, then  the radius of the circle.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="PlaneTransform">
        <description>Transforms a plane.</description>
        <OLE-syntax>Rhino.PlaneTransform (arrPlane, arrXform)<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane to transform.
          <input name="arrXform" optional="Required" vartype="unknown-type-array">A valid 4x4 transformation matrix.
          <output name="missing" optional="Optional" vartype="Array">The resulting plane if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="RotatePlane">
        <description>Rotates a plane.</description>
        <OLE-syntax>Rhino.RotatePlane (arrPlane, dblAngle, arrAxis)<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane. The elements of a plane array are as follows:<input-subset name="0" optional="Required" vartype="geometrical-string-array">Required. The plane's origin (3-D point).</input-subset>
            <input-subset name="1" optional="Required" vartype="geometrical-string-array">Required. The plane's X axis direction (3-D vector).</input-subset>
            <input-subset name="2" optional="Required" vartype="geometrical-string-array">Required. The plane's Y axis direction (3-D vector).</input-subset>
            <input-subset name="3" optional="Required" vartype="geometrical-string-array">Optional. The plane's Z axis direction (3-D vector).</input-subset>
          
          <input name="dblAngle" optional="Required" vartype="double">The rotation angle in degrees.
          <input name="arrAxis" optional="Required" vartype="geometrical-string-array">A non-zero 3-D vector identifying the axis of rotation.
          <output name="missing" optional="Optional" vartype="Array">The plane if successful. The elements of a plane array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">The plane's origin (3-D point).</output>
          <output name="missing" optional="Optional" vartype="1">The plane's X axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="2">The plane's Y axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="3">The plane's Z axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="WorldXYPlane">
        <description>Returns Rhino's world XY plane. This plane could also be created as follows:</description>
        <OLE-syntax>Rhino.WorldXYPlane ()<output name="missing" optional="Optional" vartype="Array">Rhino's world XY plane.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="WorldYZPlane">
        <description>Returns Rhino's world YZ plane. This plane could also be created as follows:</description>
        <OLE-syntax>Rhino.WorldYZPlane ()<output name="missing" optional="Optional" vartype="Array">Rhino's world YZ plane.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Line_and_Plane_Methods" name="Rhino">
      <method name="WorldZXPlane">
        <description>Returns Rhino's world ZX plane. This plane could also be created as follows:</description>
        <OLE-syntax>Rhino.WorldZXPlane ()<output name="missing" optional="Optional" vartype="Array">Rhino's world ZX plane.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="AddMaterialToLayer">
        <description>Adds a material to a layer and returns the new material's index. If the layer already has a material, then the layer's current material index is returned.</description>
        <OLE-syntax>Rhino.AddMaterialToLayer (strLayer)<input name="strObject" optional="Required" vartype="String">The name  or identifier of an existing layer.
          <output name="missing" optional="Optional" vartype="Number">The zero-based material index of the layer  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="AddMaterialToObject">
        <description>Adds a material to an object and returns the new material's index. Note, adding a material to an object modifies the object's material source from "By Layer" to "By Object." See ObjectMaterialSource for details. If the object already has a material, then the object's current material index is returned.</description>
        <OLE-syntax>Rhino.AddMaterialToObject (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <output name="missing" optional="Optional" vartype="Number">The zero-based material index of the object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="CopyMaterial">
        <description>Copies the definition of a source material to a destination material.</description>
        <OLE-syntax>Rhino.CopyMaterial (intSrcIndex, intDstIndex)<input name="intSrcIndex" optional="Required" vartype="integer">The index of the source material.
          <input name="intDstIndex" optional="Required" vartype="integer">The index of the destination material.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="IsMaterial">
        <description>Verifies the existence of a material in the document.</description>
        <OLE-syntax>Rhino.IsMaterial (intMaterialIndex)<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based  material index.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="IsMaterialDefault">
        <description>Verifies that a material is a copy of Rhino's built-in "default" material. The default material is used by objects and layers that have not been assigned a material.</description>
        <OLE-syntax>Rhino.IsMaterialDefault (intMaterialIndex)<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based material index.
          <output name="missing" optional="Optional" vartype="True">If successful.</output>
          <output name="missing" optional="Optional" vartype="False">If not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="IsMaterialReference">
        <description>Verifies a material is referenced from another file.</description>
        <OLE-syntax>Rhino.IsMaterialReference (intMaterialIndex)<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based material index.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MatchMaterial">
        <description>Copies the material definition from one material to one or more objects.</description>
        <OLE-syntax>Rhino.MatchMaterial (intSrcMaterialIndex, strDestObject)<input name="intSrcMaterialIndex" optional="Required" vartype="integer">The zero-based source material index.
          <input name="strSrcObject" optional="Required" vartype="String">The identifier of the source object. The object must have a material assigned.
          <input name="strDestObject" optional="Required" vartype="String">The identifier of the destination object. If the object's material source is set to "By Layer", it will be changed to "By Object."
          <input name="arrDestObjects" optional="Required" vartype="nongeometrical-string-array">An array of destination object identifiers. If the objects' material sources are set to "By Layer", they will be changed to "By Object."
          <output name="missing" optional="Optional" vartype="Number">The number of object that were modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">It not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialBump">
        <description>Returns or modifies a material's bump bitmap filename.</description>
        <OLE-syntax>Rhino.MaterialBump (intMaterialIndex [, strFileName])<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based source material index.
          <input name="strFileName" optional="Optional" vartype="String">The bump bitmap filename.
          <output name="missing" optional="Optional" vartype="String">If strFileName is not specified, the current bump bitmap filename if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strFileName is specified, the previous bump bitmap filename if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">It not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialColor">
        <description>Returns or modifies a material's diffuse color. Material colors are represented as RGB colors. An RGB color specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</description>
        <OLE-syntax>Rhino.MaterialColor (intMaterialIndex [, lngColor])<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based source material index.
          <input name="lngColor" optional="Optional" vartype="long">The new color value. If omitted, the current material color is returned.
          <output name="missing" optional="Optional" vartype="Number">If lngColor is not specified, the current material color if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If lngColor is specified, the previous material color if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">It not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialCount">
        <description>Returns the number of materials in the document.</description>
        <OLE-syntax>Rhino.MaterialCount ()<output name="missing" optional="Optional" vartype="Number">The number of materials in the document.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialEnvironmentMap">
        <description>Returns or modifies a material's environment bitmap filename.</description>
        <OLE-syntax>Rhino.MaterialEnvironmentMap (intMaterialIndex [, strFileName])<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based source material index.
          <input name="strFileName" optional="Optional" vartype="String">The environment bitmap filename.
          <output name="missing" optional="Optional" vartype="String">If strFileName is not specified, the current environment bitmap filename if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strFileName is specified, the previous environment bitmap filename if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">It not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialId">
        <description>Returns the identifier of a material given the material's index.</description>
        <OLE-syntax>Rhino.MaterialId (intMaterialIndex)<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based material index.
          <output name="missing" optional="Optional" vartype="Number">The material's identifier if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialIds">
        <description>Returns the identifiers of all material in the document.</description>
        <OLE-syntax>Rhino.MaterialIds ()<output name="missing" optional="Optional" vartype="Array">An array of material identifiers if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialIndex">
        <description>Returns the index of a material given the material's identifier.</description>
        <OLE-syntax>Rhino.MaterialIndex (strMaterial)<input name="strMaterial" optional="Required" vartype="String">The identifier of an existing material.
          <output name="missing" optional="Optional" vartype="Number">The material's index if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialIndices">
        <description>Returns the indices of all material in the document.</description>
        <OLE-syntax>Rhino.MaterialIndices ()<output name="missing" optional="Optional" vartype="Array">An array of material indices if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialName">
        <description>Returns or modifies a material's user-definable name.</description>
        <OLE-syntax>Rhino.MaterialName (intMaterialIndex [, strName])<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based source material index.
          <input name="strName" optional="Optional" vartype="String">The new name. If omitted, the current name is returned.
          <output name="missing" optional="Optional" vartype="String">If strName is not specified, the current material name if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strName is specified, the previous material name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">It not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialReflectiveColor">
        <description>Returns or modifies a material's reflective color. Reflective colors are represented as RGB colors. An RGB color specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</description>
        <OLE-syntax>Rhino.MaterialReflectiveColor (intMaterialIndex [, lngColor])<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based source material index.
          <input name="lngColor" optional="Optional" vartype="long">The new color value. If omitted, the current reflective color is returned.
          <output name="missing" optional="Optional" vartype="Number">If lngColor is not specified, the current reflective color if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If lngColor is specified, the previous reflective color if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">It not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialsByColor">
        <description>Returns the indices of all materials of a specified diffuse color. Diffuse colors are represented as RGB colors. An RGB color specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</description>
        <OLE-syntax>Rhino.MaterialsByColor (lngColor)<input name="strMaterial" optional="Required" vartype="Number">The color value to match.
          <output name="missing" optional="Optional" vartype="Array">An array of material indices if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialsByName">
        <description>Returns the indices of all materials of a specified name.</description>
        <OLE-syntax>Rhino.MaterialsByName (strName)<input name="strName" optional="Required" vartype="String">The material name to match.
          <output name="missing" optional="Optional" vartype="Array">An array of material indices if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialShine">
        <description>Returns or modifies a material's shine value.</description>
        <OLE-syntax>Rhino.MaterialShine (intMaterialIndex [, dblShine])<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based source material index.
          <input name="dblShine" optional="Optional" vartype="double">The new shine value. A material's shine value ranges from 0.0 to 255.0, with 0.0 being matte and 255.0 being glossy. If omitted, the current shine value is returned.
          <output name="missing" optional="Optional" vartype="Number">If dblShine is not specified, the current shine value if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblShine is specified, the previous shine value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">It not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialTexture">
        <description>Returns or modifies a material's texture bitmap filename.</description>
        <OLE-syntax>Rhino.MaterialTexture (intMaterialIndex [, strFileName])<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based source material index.
          <input name="strFileName" optional="Optional" vartype="String">The texture bitmap filename.
          <output name="missing" optional="Optional" vartype="String">If strFileName is not specified, the current texture bitmap filename if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strFileName is specified, the previous texture bitmap filename if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">It not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialTransparency">
        <description>Returns or modifies a material's transparency value.</description>
        <OLE-syntax>Rhino.MaterialTransparency (intMaterialIndex [, dblTransparency])<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based source material index.
          <input name="dblTransparency" optional="Optional" vartype="double">The new transparency value. A material's transparency value ranges from 0.0 to 1.0, with 0.0 being opaque and 1.0 being transparent. If omitted, the current transparency value is returned.
          <output name="missing" optional="Optional" vartype="Number">If dblTransparency is not specified, the current transparency value if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblTransparency is specified, the previous transparency value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">It not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="MaterialTransparencyMap">
        <description>Returns or modifies a material's transparency bitmap filename.</description>
        <OLE-syntax>Rhino.MaterialTransparencyMap (intMaterialIndex [, strFileName])<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based source material index.
          <input name="strFileName" optional="Optional" vartype="String">The transparency bitmap filename.
          <output name="missing" optional="Optional" vartype="String">If strFileName is not specified, the current transparency bitmap filename if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strFileName is specified, the previous transparency bitmap filename if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">It not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Material_Methods" name="Rhino">
      <method name="ResetMaterial">
        <description>Resets a material to Rhino's default material.</description>
        <OLE-syntax>Rhino.ResetMaterial (intMaterialIndex)<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based  source material index.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, False if not successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="ACos">
        <description>Returns the arccosine, or inverse cosine, of a number. The arccosine is the angle whose cosine is number. The returned angle is given in radians in the range 0 (zero) to PI.</description>
        <OLE-syntax>Rhino.ACos (dblNumber)<input name="dblNumber" optional="Required" vartype="double">A number representing the cosine of the angle you want and must be from -1 to 1.
          <output name="missing" optional="Optional" vartype="Number">An angle, &#952;, measured in radians, such that 0 &#8804; &#952; &#8804; PI. Use ToDegrees to convert from radians to degrees.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="ACosH">
        <description>Returns the inverse hyperbolic cosine of a number. Number must be greater than or equal to 1. The inverse hyperbolic cosine is the value whose hyperbolic cosine is number, so ACosH(CosH(number)) equals the number.</description>
        <OLE-syntax>Rhino.ACosH (dblNumber)<input name="dblNumber" optional="Required" vartype="double">A number equal to or greater than 1.
          <output name="missing" optional="Optional" vartype="Number">The inverse hyperbolic cosine of a number if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Angle">
        <description>Measures the angle of a line, between two points, relative to a chosen coordinate system. The results are similar to the angle calculations performed by Rhino's Distance command.</description>
        <OLE-syntax>Rhino.Angle (arrPoint1, arrPoint2 [, blnWorld])<input name="arrPoint1" optional="Required" vartype="single-xyz-array">The first  3-D point.
          <input name="arrPoint2" optional="Required" vartype="single-xyz-array">The second  3-D point.
          <input name="blnWorld" optional="Optional" vartype="Boolean">If True,  the angle calculation is based on the world coordinate system.  If False, the angle calculation is based on the active construction  plane. The default value is True.
          <output name="missing" optional="Optional" vartype="Array">An array containing the following elements  if successful.</output>
          <output name="missing" optional="Optional" vartype="0">The X,Y angle,relative to  a chosen coordinate system, in degrees.</output>
          <output name="missing" optional="Optional" vartype="1">The elevation angle in degrees.</output>
          <output name="missing" optional="Optional" vartype="2">Thedelta (distance) in the  X direction.</output>
          <output name="missing" optional="Optional" vartype="3">Thedelta(distance)  in the Y direction.</output>
          <output name="missing" optional="Optional" vartype="4">Thedelta(distance)  in the Z direction.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Angle2">
        <description>Measures the angle between two lines.</description>
        <OLE-syntax>Rhino.Angle2 (arrLine1, arrLine2)<input name="arrPoint1" optional="Required" vartype="multiple-xyz-array">An array containing  the starting and ending 3-D points of the first line.
          <input name="arrPoint2" optional="Required" vartype="multiple-xyz-array">An array containing  the starting and ending 3-D points of the second line.
          <output name="missing" optional="Optional" vartype="Array">An array containing the following elements  if successful.</output>
          <output name="missing" optional="Optional" vartype="0">The angle in degrees.</output>
          <output name="missing" optional="Optional" vartype="1">The reflex angle in degrees.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="ASin">
        <description>Returns the arcsine, or inverse sine, of a number. The arcsine is the angle whose sine is number. The returned angle is given in radians in the range -PI/2 to PI/2.</description>
        <OLE-syntax>Rhino.ASin (dblNumber)<input name="dblNumber" optional="Required" vartype="double">A number representing the sine of the angle you want and must be from -1 to 1.
          <output name="missing" optional="Optional" vartype="Number">An angle, &#952;, measured in radians, if successful. Note, A positive return value represents a counterclockwise angle from the x-axis; a negative return value represents a clockwise angle. Use ToDegrees to convert from radians to degrees.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="ASinH">
        <description>Returns the inverse hyperbolic sine of a number. The inverse hyperbolic sine is the value whose hyperbolic sine is number, so ASinH(SinH(number)) equals number.</description>
        <OLE-syntax>Rhino.ASinH (dblNumber)<input name="dblNumber" optional="Required" vartype="double">Any real number.
          <output name="missing" optional="Optional" vartype="Number">The inverse hyperbolic sine of a number if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="ATan2">
        <description>Returns the angle whose tangent is the quotient of two specified numbers.</description>
        <OLE-syntax>Rhino.ATan2 (y, x)<input name="y" optional="Required" vartype="Number">The y coordinate of a point.
          <input name="x" optional="Required" vartype="Number">The x coordinate of a point.
          <output name="missing" optional="Optional" vartype="Number">An angle, &#952;, measured in radians, such that -PI &#8804; &#952; &#8804; PI, and Tan(&#952;) = y / x, where (x, y) is a point in the Cartesian plane.</output>
          <output name="missing" optional="Optional" vartype="Observe the following:">For (x, y) in quadrant 1, 0 &lt; &#952; &lt; PI/2.</output>
          <output name="missing" optional="Optional" vartype="For (x, y) in quadrant 2, PI/2 < &#952; &#8804; PI.">For (x, y) in quadrant 3, -PI &lt; &#952; &lt; -PI/2.</output>
          <output name="missing" optional="Optional" vartype="For (x, y) in quadrant 4, -PI/2 < &#952; < 0.">The return value is the angle in the Cartesian plane formed by the x-axis, and a vector starting from the origin, (0, 0), and terminating at the point, (x, y).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="ATanH">
        <description>Returns the inverse hyperbolic tangent of a number. Number must be between -1 and 1 (excluding -1 and 1). The inverse hyperbolic tangent is the value whose hyperbolic tangent is number; ATanH(TanH(number)) equals number.</description>
        <OLE-syntax>Rhino.ATanH (dblNumber)<input name="dblNumber" optional="Required" vartype="double">A number between -1 and 1.
          <output name="missing" optional="Optional" vartype="Number">The inverse hyperbolic tangent of a number if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Ceil">
        <description>Returns the smallest integer greater than or equal to the specified number.</description>
        <OLE-syntax>Rhino.Ceil (dblNumber)<input name="dblNumber" optional="Required" vartype="double">A number.
          <output name="missing" optional="Optional" vartype="Number">The ceiling if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="CosH">
        <description>Returns the hyperbolic cosine of the specified angle.</description>
        <OLE-syntax>Rhino.CosH (dblAngle)<input name="dblAngle" optional="Required" vartype="double">An angle, measured in radians.
          <output name="missing" optional="Optional" vartype="Number">The hyperbolic cosine of dblAngle if successful. Use ToDegrees to convert from radians to degrees.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Deviation">
        <description>Returns the standard deviation from an array of numbers.</description>
        <OLE-syntax>Rhino.Deviation (arrNumbers)<input name="arrNumbers" optional="Required" vartype="number-array">An array of numbers to analyze.
          <output name="missing" optional="Optional" vartype="Number">The standard deviation if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Distance">
        <description>Measures the distance between two 3-D points, or between a 3-D point and an array of 3-D points.</description>
        <OLE-syntax>Rhino.Distance (arrPoint1, arrPoint2)<input name="arrPoint1" optional="Required" vartype="single-xyz-array">The first 3-D point.
          <input name="arrPoint2" optional="Required" vartype="single-xyz-array">The second 3-D point.
          <input name="arrPointArray" optional="Required" vartype="multiple-xyz-array">An array of 3-D points.
          <output name="missing" optional="Optional" vartype="Number">If arrPoint1 and arrPoint2 are specified, then the distance is successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrPoint1 and arrPointArray are specified, then an array of distances if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="E">
        <description>Returns the value of the base of the natural system of logarithms (e).</description>
        <OLE-syntax>Rhino.E<output name="missing" optional="Optional" vartype="Number">2.71828182845904523536028747135</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Floor">
        <description>Returns the largest integer less than or equal to the specified number.</description>
        <OLE-syntax>Rhino.Floor (dblNumber)<input name="dblNumber" optional="Required" vartype="double">A number.
          <output name="missing" optional="Optional" vartype="Number">The floor if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Hypot">
        <description>Calculates the length of the hypotenuse of a right triangle, given the length of the two sides x and y (in other words, the square root of x2 + y2).</description>
        <OLE-syntax>Rhino.Hypot (x, y)<input name="x" optional="Required" vartype="Number">The x value.
          <input name="y" optional="Required" vartype="Number">The y value.
          <output name="missing" optional="Optional" vartype="Number">The length of the hypotenuse if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Log10">
        <description>Returns the base-10 logarithm of a number.</description>
        <OLE-syntax>Rhino.Log10 (dblNumber)<input name="dblNumber" optional="Required" vartype="double">The positive real number for which you want the base-10 logarithm.
          <output name="missing" optional="Optional" vartype="Number">The base-10 logarithm of the number if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Max">
        <description>Returns the maximum number from an array of numbers.</description>
        <OLE-syntax>Rhino.Max (arrNumbers)<input name="arrNumbers" optional="Required" vartype="number-array">An array of numbers to analyze.
          <output name="missing" optional="Optional" vartype="Number">The maximum number if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Mean">
        <description>Returns the mean number, or average, from an array of numbers.</description>
        <OLE-syntax>Rhino.Mean (arrNumbers)<input name="arrNumbers" optional="Required" vartype="number-array">An array of numbers to analyze.
          <output name="missing" optional="Optional" vartype="Number">The mean number if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Median">
        <description>Returns the median value from an array of numbers.</description>
        <OLE-syntax>Rhino.Median (arrNumbers)<input name="arrNumbers" optional="Required" vartype="number-array">An array of numbers to analyze.
          <output name="missing" optional="Optional" vartype="Number">The median value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Min">
        <description>Returns the minimum number from an array of numbers.</description>
        <OLE-syntax>Rhino.Min (arrNumbers)<input name="arrNumbers" optional="Required" vartype="number-array">An array of numbers to analyze.
          <output name="missing" optional="Optional" vartype="Number">The minimum number if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="PI">
        <description>Returns the ratio of the circumference of a circle to its diameter, approximately 3.141592653589793238462643.</description>
        <OLE-syntax>Rhino.PI<output name="missing" optional="Optional" vartype="Number">3.141592653589793238462643</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Polar">
        <description>Returns the 3-D point that is a specified angle and distance from a 3-D point.</description>
        <OLE-syntax>Rhino.Polar (arrPoint, dblAngle, dblDistance [, arrPlane])<input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D point to transform.
          <input name="dblAngle" optional="Required" vartype="double">The angle in degrees.
          <input name="dblDistance" optional="Required" vartype="double">The distance.
          <input name="arrPlane" optional="Optional" vartype="geometrical-string-array">The plane to base the transformation. Of omitted, the world x-y plane is used. The elements of a plane array are as follows:<input-subset name="0" optional="Optional" vartype="geometrical-string-array">Required. The plane's origin (3-D point).</input-subset>
            <input-subset name="1" optional="Optional" vartype="geometrical-string-array">Required. The plane's X axis direction (3-D vector).</input-subset>
            <input-subset name="2" optional="Optional" vartype="geometrical-string-array">Required. The plane's Y axis direction (3-D vector).</input-subset>
            <input-subset name="3" optional="Optional" vartype="geometrical-string-array">Optional. The plane's Z axis direction (3-D vector).</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="SinH">
        <description>Returns the hyperbolic sine of the specified angle.</description>
        <OLE-syntax>Rhino.SinH (dblAngle)<input name="dblAngle" optional="Required" vartype="double">An angle, measured in radians.
          <output name="missing" optional="Optional" vartype="Number">The hyperbolic sine of dblAngle if successful. Use ToDegrees to convert from radians to degrees.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="SolveQuadratic">
        <description>Solves a quadratic equation. A quadratic equation is a second-order polynomial equation in a single variable, x.</description>
        <OLE-syntax>Rhino.SolveQuadratic (dblA, dblB, dblC)<input name="dblA" optional="Required" vartype="double">The A coefficient.
          <input name="dblB" optional="Required" vartype="double">The B coefficient.
          <input name="dblC" optional="Required" vartype="double">The C coefficient.
          <output name="missing" optional="Optional" vartype="Array">The results of the calculation, if successful, where:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Number">The results of the calculation, where:</output>
          <output name="missing" optional="Optional" vartype="0 = Two distinct real roots (R0 < R1) are returned.">1 = One real root (R0 = R1) is returned.</output>
          <output name="missing" optional="Optional" vartype="2 = Two complex conjugate roots (R0 +/- (R1)*Sqr(-1)) are returned">1</output>
          <output name="missing" optional="Optional" vartype="Number">The first root, or R0.</output>
          <output name="missing" optional="Optional" vartype="2">Number</output>
          <output name="missing" optional="Optional" vartype="The second root, or R1.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="Sum">
        <description>Returns the sum of an array of numbers.</description>
        <OLE-syntax>Rhino.Sum (arrNumbers)<input name="arrNumbers" optional="Required" vartype="number-array">An array of numbers to sum.
          <output name="missing" optional="Optional" vartype="Number">The sum of the array if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="TanH">
        <description>Returns the hyperbolic tangent of the specified angle.</description>
        <OLE-syntax>Rhino.TanH (dblAngle)<input name="dblAngle" optional="Required" vartype="double">An angle, measured in radians.
          <output name="missing" optional="Optional" vartype="Number">The hyperbolic tangent of dblAngle if successful. Use ToDegrees to convert from radians to degrees.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="ToDegrees">
        <description>Converts an angle specified in radians to degrees.</description>
        <OLE-syntax>Rhino.ToDegrees (dblRadians)<input name="dblRadians" optional="Required" vartype="double">The angle in radians
          <output name="missing" optional="Optional" vartype="Number">The angle in degrees if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Math_Methods" name="Rhino">
      <method name="ToRadians">
        <description>Converts an angle specified in degrees to radians.</description>
        <OLE-syntax>Rhino.ToRadians (dblDegrees)<input name="dblDegrees" optional="Required" vartype="double">The angle in degrees
          <output name="missing" optional="Optional" vartype="Number">The angle in radians if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="AddMesh">
        <description>Adds a mesh object to the document.</description>
        <OLE-syntax>Rhino.AddMesh (arrVertices, arrFaceVertices [, arrVertexNormals [, arrTextureCoordinates [, arrVertexColors ]]])<input name="arrVertices" optional="Required" vartype="multiple-xyz-array">An array of 3-D points defining the vertices of the mesh.
          <input name="arrFaceVertices" optional="Required" vartype="number-array">An array containing arrays of four numbers that define the vertex indices for each face of the mesh. If the third and forth vertex indices of a face are identical, a triangular face will be created. Otherwise a quad face will be created.
          <input name="arrVertexNormals" optional="Optional" vartype="geometrical-string-array">An array of 3-D vectors defining the vertex normals of the mesh. Note, for every vertex, the must be a corresponding vertex normal.
          <input name="arrTextureCoordinates" optional="Optional" vartype="unknown-type-array">An array of 2-D texture coordinates. Note, for every vertex, there must be a corresponding texture coordinate.
          <input name="arrVertexColors" optional="Optional" vartype="unknown-type-array">An array of RGB color values. Note, for every vertex, there must be a corresponding vertex color.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="AddPlanarMesh">
        <description>Creates a planar mesh from a closed, planar curve.</description>
        <OLE-syntax>Rhino.AddPlanarMesh (strObject [, blnDelete])<input name="strObject" optional="Required" vartype="String">The identifier of a closed, planar curve object.
          <input name="blnDelete" optional="Required" vartype="Boolean">If True, then the input curve will be deleted. If not specified or False (default), then the input curve will not be deleted.
          <output name="missing" optional="Optional" vartype="String">An string identifying the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="ConnectedMeshFaces">
        <description>Finds all connected faces of a joined mesh based at a break angle. This can be used to extract a series of faces that make up a planar surface in a mesh or to extract set of faces that make up a coherent feature in the mesh.</description>
        <OLE-syntax>Rhino.ConnectedMeshFaces (strObject, intFaceIndex, dblBreakAngle, blnGreaterThan)<input name="strObject" optional="Required" vartype="String">The identifier  of a mesh object.
          <input name="intFaceIndex" optional="Required" vartype="integer">The index  of the mesh to begin the search.
          <input name="dblBreakAngle" optional="Required" vartype="double">The break  angle, or the angle between adjacent face normals, in degrees.
          <input name="blnGreaterThan" optional="Required" vartype="Boolean">If True,  angles greater than or equal to are consider. If False,  angles less than or equal to are considered.
          <output name="missing" optional="Optional" vartype="Array">An  array of face indices that identify the connected faces if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="CurveMeshIntersection">
        <description>Calculates the intersection of a curve object and a mesh object.</description>
        <OLE-syntax>Rhino.CurveMeshIntersection (strCurve, strMesh [, blnReturnFaces])<input name="strCurve" optional="Required" vartype="String">The identifier of the curve to intersect.
          <input name="strMesh" optional="Required" vartype="String">The identifier of the mesh to intersect.
          <input name="blnReturnFaces" optional="Optional" vartype="Boolean">Return both intersection points and face indices. If omitted or False, then just the intersection points are returned.
          <output name="missing" optional="Optional" vartype="Array">If blnReturnFaces is either omitted or False, then an array intersection points, if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If blnReturnFaces is True, then a one-dimensional array containing information about each intersection if successful. Each array element is a one-dimensional array that contains the following two elements:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array">The 3-D intersection point.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The mesh face index on which the intersection point lies.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="DeleteMeshFace">
        <description>Deletes one or more faces from a mesh object.</description>
        <OLE-syntax>Rhino.DeleteMeshFace (strObject, intFaceIndex)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intFaceIndex" optional="Required" vartype="integer">The index of the face  to delete.
          <input name="arrFaceIndices" optional="Required" vartype="Number">The indices of the faces  to delete.
          <output name="missing" optional="Optional" vartype="Number">The number of faces deleted from the mesh  object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="DisjointMeshCount">
        <description>Returns the number of meshes that could be created by calling SplitDisjointMesh.</description>
        <OLE-syntax>Rhino.DisjointMeshCount (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Number">The number of meshes that could be created if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="DuplicateMeshBorder">
        <description>Creates a curve that duplicates a mesh border.</description>
        <OLE-syntax>Rhino.DuplicateMeshBorder (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the mesh object.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the new curve objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="ExplodeMeshes">
        <description>Explodes a mesh object, or mesh objects, into submeshes. A submesh is a collection of mesh faces that are contained within a closed loop of unwelded mesh edges. Unwelded mesh edges are edges where the mesh faces that share the edge have unique mesh vertices (not mesh topology vertices) at both ends of the edge.</description>
        <OLE-syntax>Rhino.ExplodeMeshes (strObject [, blnDelete])<input name="strObject" optional="Required" vartype="String">The identifier of the mesh object to explode.
          <input name="arrObjects" optional="Required" vartype="geometrical-string-array">An array of strings identifying the mesh objects to explode.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input objects after exploding. The default is not to delete objects (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly created mesh objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="ExtractAnalysisMesh">
        <description>Extracts the mesh created by the CurvatureAnalysis or DraftAngleAnalysis commands from an object. The vertex color assignments are saved with the mesh. Surfaces, polysurfaces, meshes, block references, and extrusions can contain analysis meshes. Note, if the object does not have an analysis mesh, one will be generated automatically.</description>
        <OLE-syntax>Rhino.ExtractAnalysisMesh (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of the object from which to extract the mesh.
          <input name="arrObjects" optional="Required" vartype="geometrical-string-array">An array  of strings identifying the objects from which to extract the meshes.
          <output name="missing" optional="Optional" vartype="String">If strObject was specified,  the identifier of the newly created mesh object if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrObjects was specified,  an array of strings identifying the newly created mesh objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="ExtractRenderMesh">
        <description>Extracts the render mesh from an object. Surfaces, polysurfaces, meshes, block references, and extrusions can contain render meshes. Note, if the object does not have a render mesh, one will be generated automatically.</description>
        <OLE-syntax>Rhino.ExtractRenderMesh (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of the object from which to extract the mesh.
          <input name="arrObjects" optional="Required" vartype="geometrical-string-array">An array  of strings identifying the objects from which to extract the meshes.
          <output name="missing" optional="Optional" vartype="String">If strObject was specified,  the identifier of the newly created mesh object if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrObjects was specified,  an array of strings identifying the newly created mesh objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="FlipMesh">
        <description>Reverses the normal direction of a mesh object.</description>
        <OLE-syntax>Rhino.FlipMesh (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="IsMesh">
        <description>Verifies an object is a mesh object.</description>
        <OLE-syntax>Rhino.IsMesh (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="IsMeshClosed">
        <description>Verifies a mesh object is closed.</description>
        <OLE-syntax>Rhino.IsMeshClosed (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="IsMeshDoublePrecision">
        <description>Verifies a mesh object contains double-precision vertices.</description>
        <OLE-syntax>Rhino.IsMeshDoublePrecision (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if the mesh object contains double-precision  vertices, False if the mesh object contains single-precision (float)  vertices.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="IsMeshManifold">
        <description>Verifies a mesh object is manifold. A mesh for which every edge is shared by at most two faces is called a manifold. If a mesh has at least one edge that is shared by more than two faces, then that mesh is called non-manifold.</description>
        <OLE-syntax>Rhino.IsMeshManifold (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="IsPointOnMesh">
        <description>Verifies that a point is on a mesh.</description>
        <OLE-syntax>Rhino.IsPointOnMesh (strObject, arrPoint [, dblTolerance])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The test,  or sampling, point.
          <input name="dblTolerance" optional="Optional" vartype="double">A tolerance  to test against. Of omitted, Rhino's internal zero tolerance is  used.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="JoinMeshes">
        <description>Joins two or more mesh object together to form a single mesh object.</description>
        <OLE-syntax>Rhino.JoinMeshes (arrObjects [, blnDelete])<input name="arrObjects  " optional="Required" vartype="geometrical-string-array">An array of  strings identifying the mesh objects to join.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input  objects after joining. The default is not to delete objects  (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the newly created  mesh object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshArea">
        <description>Returns the approximate area of one or more mesh objects.</description>
        <OLE-syntax>Rhino.MeshArea (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrObjects" optional="Required" vartype="unknown-type-array">An array of object identifier.
          <output name="missing" optional="Optional" vartype="Array">An array containing three numbers if successful. The three elements of the array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Number">The number of meshes used in the area calculation.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The total area of all meshes.">2</output>
          <output name="missing" optional="Optional" vartype="Number">The error estimate.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshAreaCentroid">
        <description>Calculates the area centroid of a mesh object.</description>
        <OLE-syntax>Rhino.MeshAreaCentroid (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Array">A 3-D point identifying the area centroid if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshAreaMoments">
        <description>Calculates the area moments of inertia of a mesh object. For more information, see the Rhino help file for "Mass Properties Calculation Details."</description>
        <OLE-syntax>Rhino.MeshAreaMoments (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Array">An array of area moments of inertia information  if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">First Moments.</output>
          <output name="missing" optional="Optional" vartype="1">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the First Moments.">2</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Second Moments.</output>
          <output name="missing" optional="Optional" vartype="3">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Second Moments.">4</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Product Moments.</output>
          <output name="missing" optional="Optional" vartype="5">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Product Moments.">6</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Area Moments of Inertia about the  World Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="7">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Area Moments of Inertia about World Coordinate  Axes.">8</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Area Radii of Gyration about the  World Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="9">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Area Radii of Gyration about World Coordinate  Axes.">10</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Area Moments of Inertia about the  Centroid Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="11">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Area Moments of Inertia about the Centroid Coordinate  Axes.">12</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Area Radii of Gyration about the  Centroid Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="13">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Area Radii of Gyration about the Centroid Coordinate  Axes.">14</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Area Principal Moments of Inertia  about Centroid and Principal Axes</output>
          <output name="missing" optional="Optional" vartype="15">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The X direction of the Area Principal  Moments of Inertia about Centroid and Principal Axes.">16</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">The Y direction of the Area Principal  Moments of Inertia about Centroid and Principal Axes.</output>
          <output name="missing" optional="Optional" vartype="17">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The Z direction of the Area Principal  Moments of Inertia about Centroid and Principal Axes.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshBooleanDifference">
        <description>Performs a Boolean difference operation on two sets of input meshes. For more details, see the MeshBooleanDifference command in the Rhino help file.</description>
        <OLE-syntax>Rhino.MeshBooleanDifference (arrInput0, arrInput1 [, blnDelete])<input name="arrInput0" optional="Required" vartype="geometrical-string-array">The identifiers of the meshes.
          <input name="arrInput1" optional="Required" vartype="geometrical-string-array">The identifiers of the meshes.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete all input objects. The default is to delete all input objects (True).
          <output name="missing" optional="Optional" vartype="Array">An array containing the identifiers of the newly created objects, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshBooleanIntersection">
        <description>Performs a Boolean intersection operation on two sets of input meshes. For more details, see the MeshBooleanIntersection command in the Rhino help file.</description>
        <OLE-syntax>Rhino.MeshBooleanIntersection (arrInput0, arrInput1 [, blnDelete])<input name="arrInput0" optional="Required" vartype="geometrical-string-array">The identifiers of the meshes.
          <input name="arrInput1" optional="Required" vartype="geometrical-string-array">The identifiers of the meshes.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete all input objects. The default is to delete all input objects (True).
          <output name="missing" optional="Optional" vartype="Array">An array containing the identifiers of the newly created objects, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshBooleanSplit">
        <description>Performs a Boolean split operation on two sets of input meshes. For more details, see the MeshBooleanSplit command in the Rhino help file.</description>
        <OLE-syntax>Rhino.MeshBooleanSplit (arrInput0, arrInput1, [, blnDelete])<input name="arrInput0" optional="Required" vartype="geometrical-string-array">The identifiers of the meshes.
          <input name="arrInput1" optional="Required" vartype="geometrical-string-array">The identifiers of the meshes.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete all input objects. The default is to delete all input objects (True).
          <output name="missing" optional="Optional" vartype="Array">An array containing the identifiers of the newly created objects, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshBooleanUnion">
        <description>Performs a Boolean union operation on a set of input meshes. For more details, see the MeshBooleanUnion command in the Rhino help file.</description>
        <OLE-syntax>Rhino.MeshBooleanUnion (arrInput [, blnDelete])<input name="arrInput" optional="Required" vartype="geometrical-string-array">The identifiers of the meshes to union.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete all input objects. The default is to delete all input objects (True).
          <output name="missing" optional="Optional" vartype="Array">An array containing the identifiers of the newly created objects, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshClosestPoint">
        <description>Returns the point on a mesh that is closest to a test point.</description>
        <OLE-syntax>Rhino.MeshClosestPoint (strObject, arrPoint [, dblTolerance])<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">A 3-D point to test.
          <input name="dblTolerance" optional="Optional" vartype="double">The tolerance. Of omitted, a default tolerance of 0.0 is used.
          <output name="missing" optional="Optional" vartype="Array">An array containing the results of the calculation, if successful. The array elements are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array">The 3-D point on the mesh object.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The index of the mesh face on which the 3-D point lies.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshContourPoints">
        <description>Returns the vertices of the polyline curves generated by contouring a mesh object.</description>
        <OLE-syntax>Rhino.MeshContourPoints (strObject, arrStartPoint, arrEndPoint [, dblInterval ,[ blnRemoveCoincidentPoints]])<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <input name="arrStartPoint" optional="Required" vartype="single-xyz-array">The 3-D starting point of a center line.
          <input name="arrEndPoint" optional="Required" vartype="single-xyz-array">The 3-D ending point of a center line.
          <input name="dblInterval" optional="Optional" vartype="double">The distance between contour curves. If omitted, the interval will be equal to the diagonal distance of the object's bounding box divided by 50.
          <input name="blnRemoveCoincidentPoints" optional="Optional" vartype="Boolean">Remove coincident points. If True, and the polyline curves from which the contour point are taken are closed, then duplicate starting and ending points of the polyline curve will not be returned. The default is to return duplicate starting and ending points (False).
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D point arrays, one for each contour, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshFaceCenters">
        <description>Returns the center point of each face of a mesh object. </description>
        <OLE-syntax>Rhino.MeshFaceCenters (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points that define the face center points of the mesh if successful. The number of elements in the array will be equal to the value returned by MeshFaceCount. In which case, the array will identify the center points for each face return by MeshFaces.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshFaceCount">
        <description>Returns the total face count of a mesh object.</description>
        <OLE-syntax>Rhino.MeshFaceCount (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Number">The number of mesh faces if successful</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshFaceNormals">
        <description>Returns the face unit normal for each face of a mesh object. </description>
        <OLE-syntax>Rhino.MeshFaceNormals (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D vectors that define the face unit normals of the mesh if successful. The number of elements in the array will be equal to the value returned by MeshFaceCount. In which case, the array will identify the unit normals for each face return by MeshFaces.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshFaces">
        <description>Returns the face vertices of a mesh object.</description>
        <OLE-syntax>Rhino.MeshFaces (strObject, blnFaceType)<input name="strObject" optional="Required" vartype="String">The identifier  of a mesh object.
          <input name="blnFaceType" optional="Optional" vartype="Boolean">The face  type to be returned. If omitted, both triangles and quads  are returned (True).<input-subset name="True" optional="Optional" vartype="Boolean">Both triangles and quads.</input-subset>
            <input-subset name="False" optional="Optional" vartype="Boolean">Only triangles.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points that define the face vertices of the mesh if successful. If blnFaceType is True, then faces are returned as both quads and triangles (4 3-D points). For triangles, the third and forth vertex will be identical. If blnFaceType  is False, then faces are returned as only triangles (3 3-D points).  Quads will be converted to triangles.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshFaceVertices">
        <description>Returns the vertex indices of all faces of a mesh object.</description>
        <OLE-syntax>Rhino.MeshFaceVertices (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Array">An array containing arrays of four numbers that define the vertex indices for each face of the mesh if successful. Both quad and triangle faces are returned. If the third and forth vertex indices of a face are identical, the face is a triangle. Otherwise the face is a quad.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshHasFaceNormals">
        <description>Verifies a mesh object has face normals.</description>
        <OLE-syntax>Rhino.MeshHasFaceNormals (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshHasHiddenVertices">
        <description>Verifies that a mesh object has hidden vertices.</description>
        <OLE-syntax>Rhino.MeshHasHiddenVertices (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshHasTextureCoordinates">
        <description>Verifies a mesh object has texture coordinates.</description>
        <OLE-syntax>Rhino.MeshHasTextureCoordinates (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshHasVertexColors">
        <description>Verifies a mesh object has vertex colors.</description>
        <OLE-syntax>Rhino.MeshHasVertexColors (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshHasVertexNormals">
        <description>Verifies a mesh object has vertex normals.</description>
        <OLE-syntax>Rhino.MeshHasVertexNormals (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshHideVertices">
        <description>Returns or modifies the hidden vertices of a mesh object. Any mesh faces that reference hidden vertices will be hidden.</description>
        <OLE-syntax>Rhino.MeshHideVertices (strObject [, arrHidden])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="arrHidden" optional="Optional" vartype="boolean-array">An array of  Boolean values indicating the hidden state (True = hidden, False  = Visible). Note, for every mesh vertex, there must be a corresponding  Boolean value.
          <input name="Null" optional="Optional" vartype="Null">Specifying  Null will remove, or purge, any existing hidden vertex information  from the mesh.
          <output name="missing" optional="Optional" vartype="Array">If arrHidden is not specified,  the current hidden state if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrHidden is specified,  the previous hidden state if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If strObject does not have hidden vertices, if not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshMeshIntersection">
        <description>Calculates the intersection of a mesh object with another mesh object.</description>
        <OLE-syntax>Rhino.MeshMeshIntersection (strMesh1, strMesh2 [, dblTolerance])<input name="strMesh1" optional="Required" vartype="String">The identifier of the first mesh object.
          <input name="strMesh2" optional="Required" vartype="String">The identifier of the second mesh object.
          <input name="dblTolerance" optional="Optional" vartype="double">The intersection tolerance. Of omitted, Rhino's internal zero tolerance is used.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D point arrays that identify the vertices of the intersection curves (polylines) if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshNakedEdgePoints">
        <description>Identifies the naked edge points of a polygon mesh object. This function shows where polygon mesh vertices are not completely surrounded by faces. Joined meshes, such as are made by Mesh Box, have naked mesh edge points where the sub-meshes are joined.</description>
        <OLE-syntax>Rhino.MeshNakedEdgePoints (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Array">An array of boolean values that represent whether or not a mesh vertex is naked or not if successful. The number of elements in the array will be equal to the value returned by MeshVertexCount. In which case, the array will identify the naked status for each vertex return by MeshVertices.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshObjects">
        <description>Creates mesh objects from surface, polysurface, and extrusion objects. Blocks that contain surface, polysurface, and extrusion objects can also be meshes.</description>
        <OLE-syntax>Rhino.MeshObjects (arrObjects [, intStyle [, arrMeshParameters]])<input name="arrObjects" optional="Required" vartype="geometrical-string-array">An array of strings identifying the objects to mesh.
          <input name="strObject" optional="Required" vartype="String">The identifier of the object to mesh.
          <input name="intStyle" optional="Optional" vartype="integer">The user interface style.<input-subset name="-1" optional="Optional" vartype="integer">No user interface.</input-subset>
            <input-subset name="0  (Default)" optional="Optional" vartype="integer">Simple dialog box.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Detailed dialog box.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Command line, or scriptable,  interface.</input-subset>
          
          <input name="arrMeshParameters" optional="Optional" vartype="geometrical-string-array">The parameters to use during meshing. See MeshParameters for more information.  If omitted, then the document's current render mesh parameters  are used.
          <output name="missing" optional="Optional" vartype="Array">If arrObjects was specified,  then the identifiers of the new mesh objects if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strObject was specified,  then the identifier of the new mesh object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshOffset">
        <description>Makes a new mesh with vertices offset at a distance in the opposite direction of the existing vertex normals.</description>
        <OLE-syntax>Rhino.MeshOffset (strMesh, dblDistance [, blnSolidify])<input name="strMesh" optional="Required" vartype="String">The identifier  of a mesh object.
          <input name="dblDistance" optional="Required" vartype="double">The distance  to offset.
          <input name="blnSolidify" optional="Optional" vartype="Boolean">If True,  then the space between the original and new mesh is capped to  create a closed mesh. The default is False.
          <output name="missing" optional="Optional" vartype="String">The identifier of the offset mesh object  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshOutline">
        <description>Creates polyline curve outlines of mesh objects.</description>
        <OLE-syntax>Rhino.MeshOutline (arrObjects [, strView])<input name="arrObjects" optional="Required" vartype="geometrical-string-array">An array of strings identifying the mesh objects to outline.
          <input name="strObject" optional="Required" vartype="String">The identifier of the mesh object to outline.
          <input name="strObject" optional="Optional" vartype="String">The title or identifier of the view to use  as the outline direction. If omitted, the current active  view is used.
          <output name="missing" optional="Optional" vartype="Array">The  identifiers of the new polyline curves if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshParameterDensity">
        <description>Modifies the density of meshes generated with a set of mesh parameters. This is equivalent to moving the slider in Rhino's simple mesh generation dialog box.</description>
        <OLE-syntax>Rhino.MeshParameterDensity (arrMeshParameters, dblDensity)<input name="arrMeshParameters" optional="Required" vartype="geometrical-string-array">The parameters to use during meshing. See MeshParameters for more information.  If omitted, then the document's current render mesh parameters  are used.
          <input name="dblDensity" optional="Required" vartype="double">A number between 0.0 (quickly creates coarse  meshes) and 1.0 (creates accurate meshes but takes lots of time).
          <output name="missing" optional="Optional" vartype="Array">The  modified mesh parameters if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshParameters">
        <description>Returns or modifies meshing parameters. Note, Rhino's meshing parameters are well documented in the Rhino help file. Just search for "Polygon Mesh Detailed Options."</description>
        <OLE-syntax>Rhino.MeshParameters (intType [, arrMeshParameters])<input name="intType" optional="Optional" vartype="integer">The type of mesh parameters to return or modify.  If omitted, Rhino's current render mesh parameters are returned.<input-subset name="0" optional="Optional" vartype="integer">Render mesh parameters. These  document settings are used for automatically created rendering  meshes.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Analysis mesh parameters. These  document settings are used for automatically created analysis  meshes.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Custom render mesh parameters. These document setting can be viewed by using the Options command and clicking on the Mesh  tab.</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Fast mesh parameters. Also know as "jagged and faster", these document setting can be viewed by using the Options command and clicking on the Mesh  tab. Note, these parameters cannot be modified.</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Quality mesh parameters. Also know as "smooth and slower", these document setting can be viewed by using the Options command and clicking on the Mesh  tab. Note, these parameters cannot be modified.</input-subset>
          
          <input name="arrMeshParameters" optional="Optional" vartype="geometrical-string-array">The new mesh parameters to use during meshing.  A mesh parameters array contains the following information.<input-subset name="1" optional="Optional" vartype="geometrical-string-array">Number</input-subset>
            <input-subset name="3" optional="Optional" vartype="geometrical-string-array">Number</input-subset>
            <input-subset name="5" optional="Optional" vartype="geometrical-string-array">Number</input-subset>
            <input-subset name="7" optional="Optional" vartype="geometrical-string-array">Boolean</input-subset>
            <input-subset name="9" optional="Optional" vartype="geometrical-string-array">Boolean</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">If arrMeshParameters was  not specified, the current mesh parameters of the specified type  if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If arrMeshParameters was  specified, the previous mesh parameters of the specified type  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshPart">
        <description>Finds faces from a mesh that are bounded by unwelded or naked edges.</description>
        <OLE-syntax>Rhino.MeshPart (strObject, intFaceIndex, dblBreakAngle, blnNonManifoldEdges)<input name="strObject" optional="Required" vartype="String">The identifier  of a mesh object.
          <input name="intFaceIndex" optional="Required" vartype="integer">The index  of the mesh to begin the search.
          <input name="blnNonManifoldEdges" optional="Required" vartype="Boolean">If True,  non-manifold edges will be handled like unwelded edges. If  False, non-manifold edges are ignored.
          <output name="missing" optional="Optional" vartype="Array">An  array of face indices that identify the connected faces if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshQuadCount">
        <description>Returns the number of quad faces of a mesh object.</description>
        <OLE-syntax>Rhino.MeshQuadCount (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Number">The number of quad mesh faces if successful</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshQuadsToTriangles">
        <description>Converts a mesh object's quad faces to triangles.</description>
        <OLE-syntax>Rhino.MeshQuadsToTriangles (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshTextureCoordinates">
        <description>Returns the normalized 2-D texture coordinates of a mesh object. </description>
        <OLE-syntax>Rhino.MeshTextureCoordinates (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Array">An array of 2-D points that define the texture coordinates of the mesh if successful. Each 2-D point is normalized, that is, each coordinate component ranges in value between 0 and 1. The number of elements in the array will be equal to the value returned by MeshVertexCount. In which case, the array will identify the texture coordinate for each vertex return by MeshVertices.</output>
          <output name="missing" optional="Optional" vartype="Null">If the mesh does not contain texture coordinates, if not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshToNurb">
        <description>Duplicates each polygon in a polygon mesh with a NURBS surface. The resulting surfaces are then joined into a polysurface and added to the document. Note, disjoint meshes will be split into unconnected pieces before surface creation.</description>
        <OLE-syntax>Rhino.MeshToNurb (strObject [, blnTrimmedTriangles [, blnDelete]])<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <input name="blnTrimmedTriangles " optional="Optional" vartype="Boolean">If True (default), triangles in the mesh  will be represented by trimmed planes. If False, triangles  in the mesh will be represented by untrimmed singular bilinear  NURBS surfaces (have two of the control points collapsed into  a singularity).
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input object. The default is  not to delete objects (False).
          <output name="missing" optional="Optional" vartype="Array">An  array of strings identifying the newly created objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshTriangleCount">
        <description>Returns the number of triangular faces of a mesh object.</description>
        <OLE-syntax>Rhino.MeshTriangleCount (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Number">The number of triangular mesh faces if successful</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshVertexColors">
        <description>Returns or modifies thevertex colors of a mesh object.</description>
        <OLE-syntax>Rhino.MeshVertexColors (strObject [, arrVertexColors])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="arrVertexColors" optional="Optional" vartype="unknown-type-array">An array of  RGB color values. Note, for every vertex, there must be a corresponding  vertex color.
          <input name="Null" optional="Optional" vartype="Null">Specifying  Null will remove, or purge, any existing vertex colors from the  mesh.
          <output name="missing" optional="Optional" vartype="Array">If arrVertexColors  is not specified, the current vertex colors if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrVertexColors  is specified, the previous vertex colors if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If strObjectdoes not have vertex colors, if not successful, or  on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshVertexCount">
        <description>Returns the vertex count of a mesh object.</description>
        <OLE-syntax>Rhino.MeshVertexCount (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Number">The number of mesh vertices if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshVertexFaces">
        <description>Returns the mesh faces that share a specified mesh vertex.</description>
        <OLE-syntax>Rhino.MeshVertexFaces (strObject, intVertex)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <input name="intVertex" optional="Required" vartype="integer">The index of the mesh vertex.
          <output name="missing" optional="Optional" vartype="Array">An array the indices of the faces that share the specified vertex if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshVertexNormals">
        <description>Returns the vertex unit normal for each vertex of a mesh object. </description>
        <OLE-syntax>Rhino.MeshVertexNormals (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D vectors that define the vertex unit normals of the mesh if successful. The number of elements in the array will be equal to the value returned by MeshVertexCount. In which case, the array will identify the unit normals for each vertex return by MeshVertices.</output>
          <output name="missing" optional="Optional" vartype="Null">If the mesh does not contain vertex normals, if not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshVertices">
        <description>Returns the vertices of a mesh object.</description>
        <OLE-syntax>Rhino.MeshVertices (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points that define the vertices of the mesh if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshVolume">
        <description>Returns the approximate volume of one or more closed mesh objects.</description>
        <OLE-syntax>Rhino.MeshVolume (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrObjects" optional="Required" vartype="unknown-type-array">An array of object identifier.
          <output name="missing" optional="Optional" vartype="Array">An array containing three numbers if successful. The three elements of the array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Number">The number of meshes used in the volume calculation.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The total volume of all meshes.">2</output>
          <output name="missing" optional="Optional" vartype="Number">The error estimate.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshVolumeCentroid">
        <description>Calculates the volume centroid of a mesh object.</description>
        <OLE-syntax>Rhino.MeshVolumeCentroid (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <output name="missing" optional="Optional" vartype="Array">A 3-D point identifying the volume centroid if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="MeshVolumeMoments">
        <description>Calculates the volume moments of inertia of a closed mesh object. For more information, see the Rhino help file for "Mass Properties Calculation Details."</description>
        <OLE-syntax>Rhino.MeshVolumeMoments (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Array">An array of volume moments of inertia information  if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">First Moments.</output>
          <output name="missing" optional="Optional" vartype="1">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the First Moments.">2</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Second Moments.</output>
          <output name="missing" optional="Optional" vartype="3">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Second Moments.">4</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Product Moments.</output>
          <output name="missing" optional="Optional" vartype="5">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Product Moments.">6</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Volume Moments of Inertia about  the World Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="7">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Volume Moments of Inertia about World Coordinate  Axes.">8</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Volume Radii of Gyration about  the World Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="9">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Volume Radii of Gyration about World Coordinate  Axes.">10</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Volume Moments of Inertia about  the Centroid Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="11">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Volume Moments of Inertia about the Centroid Coordinate  Axes.">12</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Volume Radii of Gyration about  the Centroid Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="13">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Volume Radii of Gyration about the Centroid Coordinate  Axes.">14</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Volume Principal Moments of Inertia  about Centroid and Principal Axes</output>
          <output name="missing" optional="Optional" vartype="15">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The X direction of the Volume Principal  Moments of Inertia about Centroid and Principal Axes.">16</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">The Y direction of the Volume Principal  Moments of Inertia about Centroid and Principal Axes.</output>
          <output name="missing" optional="Optional" vartype="17">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The Z direction of the Volume Principal  Moments of Inertia about Centroid and Principal Axes.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="PullCurveToMesh">
        <description>Pulls a curve object to a mesh object. The function makes a polyline approximation of the input curve and gets the closest point on the mesh for each point on the polyline. Then it "connects the points" so that you have a polyline on the mesh.</description>
        <OLE-syntax>Rhino.PullCurveToMesh (strMesh, strCurve)<input name="strMesh" optional="Required" vartype="String">The identifier  of the mesh object that pulls.
          <input name="strCurve" optional="Required" vartype="String">The identifier  of the curve object to pull.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new curve object  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="ReduceMesh">
        <description>Reduces a mesh object's polygon count.</description>
        <OLE-syntax>Rhino.ReduceMesh (strObject, intPolygonCount, blnPlanar, intAccuracy)<input name="strObject" optional="Required" vartype="String">The identifier of the mesh object to reduce.
          <input name="intPolygonCount" optional="Required" vartype="integer">The target polygon count.
          <input name="blnPlanar" optional="Optional" vartype="Boolean">If True, then the reduction is restricted  to planar polygons. The default value is False.
          <input name="intAccuracy" optional="Optional" vartype="integer">A whole number between 1 and 10 that indicates  the accuracy. Greater numbers give more accurate results. The  default value is 10.
          <output name="missing" optional="Optional" vartype="Boolean">True  if the reduction was successful, False otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On  error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="SplitDisjointMesh">
        <description>Splits up a mesh object into its unconnected pieces.</description>
        <OLE-syntax>Rhino.SplitDisjointMesh (strObject [, blnDelete])<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete the input object. The default is not to delete the input object (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly created mesh objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="UnifyMeshNormals">
        <description>Fixes inconsistencies in the directions of faces of a mesh object.</description>
        <OLE-syntax>Rhino.UnifyMeshNormals (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of a mesh object.
          <output name="missing" optional="Optional" vartype="Number">The number of faces that were modified  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="UnweldMesh">
        <description>Adds creases to a smooth mesh by creating coincident vertices.</description>
        <OLE-syntax>Rhino.UnweldMesh (strObject, dblAngleTolerance, blnModifyNormals)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <input name="dblAngleTolerance" optional="Required" vartype="double">The angle tolerance in degrees.
          <input name="blnModifyNormals" optional="Optional" vartype="Boolean">If True (Default), the vertex normals on  each side of the edge take the same value as the face to which  they belong, giving the mesh a hard edge look. If False, each  of the vertex normals on either side of the edge is assigned the  same value as the original normal that the pair is replacing,  keeping a smooth look.
          <output name="missing" optional="Optional" vartype="Boolean">True  of False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On  error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Mesh_Methods" name="Rhino">
      <method name="WeldMesh">
        <description>Removes creases from a mesh by merging coincident mesh vertices.</description>
        <OLE-syntax>Rhino.WeldMesh (strObject, dblAngleTolerance)<input name="strObject" optional="Required" vartype="String">The identifier of a mesh object.
          <input name="dblAngleTolerance" optional="Required" vartype="double">The angle tolerance in degrees. If two naked  mesh edge points of a mesh are coincident, and their neighboring  faces are within the angle tolerance of each other, they will  be replaced by a single mesh point. If the two points are from  different "sub-meshes" of a joined mesh, the meshes  become one mesh that cannot explode.
          <output name="missing" optional="Optional" vartype="Boolean">True  of False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On  error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="EnableObjectGrips">
        <description>Enables or disables an object's grips. For curves and surfaces, these are also called control points.</description>
        <OLE-syntax>Rhino.EnableObjectGrips (strObject [, blnEnable])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="blnEnable" optional="Optional" vartype="Boolean">If True (default), the specified object's grips will be turned on. Otherwise, they will be turned off.
          <output name="missing" optional="Optional" vartype="Boolean">True of False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="GetObjectGrip">
        <description>Prompts the user to pick or select a single object grip.</description>
        <OLE-syntax>Rhino.GetObjectGrip ([strMessage [, blnPreSelect [, blnSelect]]])<input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="blnPreSelect" optional="Optional" vartype="Boolean">Allow for the selection of a pre-selected object grip. If omitted, pre-selected object grips are not accepted (False).
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the picked object grip. If omitted, the object grip that is picked is not selected (False).
          <output name="missing" optional="Optional" vartype="Array">A one-dimensional array containing the following three elements if successful:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="String">The identifier of the object that owns the grip.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The zero-based index value of the grip.">2</output>
          <output name="missing" optional="Optional" vartype="Array">A 3-D point identifying the location of the grip.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="GetObjectGrips">
        <description>Prompts the user to pick or select one or more object grips from one or more objects.</description>
        <OLE-syntax>Rhino.GetObjectGrips ([strMessage [, blnPreSelect [, blnSelect]]])<input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="blnPreSelect" optional="Optional" vartype="Boolean">Allow for the selection of a pre-selected object grips. If omitted, pre-selected object grips are not accepted (False).
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the picked object grips. If omitted, the object grips that are picked is not selected (False).
          <output name="missing" optional="Optional" vartype="Array">A one-dimensional array containing one or more object grip records if successful. An object grip record itself is a one-dimensional array that contains the following three elements:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="String">The identifier of the object that owns the grip.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The zero-based index value of the grip.">2</output>
          <output name="missing" optional="Optional" vartype="Array">A 3-D point identifying the location of the grip.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="NextObjectGrip">
        <description>Returns the next grip index from a specified grip index of an object.</description>
        <OLE-syntax>Rhino.NextObjectGrip (strObject, intIndex [, intDirection [, blnSelect]])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="intIndex" optional="Required" vartype="integer">The zero-based grip index from which to get the next grip index.
          <input name="intDirection" optional="Optional" vartype="integer">The direction to get the next grip index, either 0=U or 1=V. The default value is 0. Note, this argument only applies when dealing with surfaces.
          <input name="blnEnable" optional="Optional" vartype="Boolean">If True (default), the next grip index found will be selected. Otherwise, it will not be selected.
          <output name="missing" optional="Optional" vartype="Number">The index of the next grip from the specified grip index.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="ObjectGripCount">
        <description>Returns the number of grips owned by an object.</description>
        <OLE-syntax>Rhino.ObjectGripCount (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <output name="missing" optional="Optional" vartype="Number">The number of grips if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="ObjectGripLocation">
        <description>Returns or modifies the location of an object's grip.</description>
        <OLE-syntax>Rhino.ObjectGripLocation (strObject, intIndex [, arrPoint])<input name="strObject" optional="Required" vartype="String">The identifier of  the object.
          <input name="intIndex" optional="Required" vartype="integer">The zero-based index  of the grip to either query or modify.
          <input name="arrIndices" optional="Required" vartype="unknown-type-array">An array of zero-based  indices of the grips to either query or modify.
          <input name="arrPoint" optional="Optional" vartype="single-xyz-array">A 3-D point identifying  the new location of the grip.
          <input name="arrPoints" optional="Optional" vartype="multiple-xyz-array">An array of 3-D points identifying the new locations of the grips specified in arrIndices.
          <output name="missing" optional="Optional" vartype="Array">If arrPoint is not specified, the current location of the grip referenced by intIndex if  successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrPoints is not specified, the previous locations of the grips referenced by arrIndices if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrPoint is specified, the previous location of the grip referenced by intIndex if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrPoints is specified, the previous locations of the grips referenced by arrIndices if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="ObjectGripLocations">
        <description>Returns or modifies the location of all grips owned by an object. The locations of the grips are returned in an array of 3-D points with each position in the array corresponding to that grip's index. To modify the locations of grips, you must provide an array of 3-D points that contains the same number of points at grips.</description>
        <OLE-syntax>Rhino.ObjectGripLocations (strObject [, arrPoints])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="arrPoints" optional="Optional" vartype="multiple-xyz-array">An array of 3-D points identifying the new locations of the grips.
          <output name="missing" optional="Optional" vartype="Array">If arrPoints is not specified, the current location of all grips if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrPoints is specified, the previous location of all grips if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="ObjectGripOwner">
        <description>Returns the identifier of object that owns a grip object.</description>
        <OLE-syntax>Rhino.ObjectGripOwner (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of the grip object.
          <output name="missing" optional="Optional" vartype="String">The identifier of object that owns a grip  object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="ObjectGripsOn">
        <description>Verifies that an object's grips are turned on.</description>
        <OLE-syntax>Rhino.ObjectGripsOn (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <output name="missing" optional="Optional" vartype="Boolean">True of False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="ObjectGripsSelected">
        <description>Verifies that an object's grips are turned on and at least one grip is selected.</description>
        <OLE-syntax>Rhino.ObjectGripsSelected (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <output name="missing" optional="Optional" vartype="Boolean">True of False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="PrevObjectGrip">
        <description>Returns the previous grip index from a specified grip index of an object.</description>
        <OLE-syntax>Rhino.PrevObjectGrip (strObject, intIndex [, intDirection [, blnSelect]])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="intIndex" optional="Required" vartype="integer">The zero-based grip index from which to get the previous grip index.
          <input name="intDirection" optional="Optional" vartype="integer">The direction to get the previous grip index, either 0=U or 1=V. The default value is 0. Note, this argument only applies when dealing with surfaces.
          <input name="blnEnable" optional="Optional" vartype="Boolean">If True (default), the previous grip index found will be selected. Otherwise, it will not be selected.
          <output name="missing" optional="Optional" vartype="Number">The index of the next grip from the specified grip index.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="SelectedObjectGrips">
        <description>Returns an array of grip indices identifying an object's selected grips.</description>
        <OLE-syntax>Rhino.SelectedObjectGrips (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <output name="missing" optional="Optional" vartype="Array">An array of zero-based grip indices identifying the selected grips.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="SelectObjectGrip">
        <description>Selects a single grip owned by an object. If the object's grips are not turned on, grips will not be selected.</description>
        <OLE-syntax>Rhino.SelectObjectGrip (strObject, intIndex)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="intIndex" optional="Required" vartype="integer">The zero-based grip index to select.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="SelectObjectGrips">
        <description>Selects an object's grips. If the object's grips are not turned on, they will not be selected.</description>
        <OLE-syntax>Rhino.SelectObjectGrips (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <output name="missing" optional="Optional" vartype="Number">The number of grips selected if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="UnselectObjectGrip">
        <description>Unselects a single grip owned by an object.</description>
        <OLE-syntax>Rhino.UnselectObjectGrip (strObject, intIndex)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="intIndex" optional="Required" vartype="integer">The zero-based grip index to unselect.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Grip_Methods" name="Rhino">
      <method name="UnselectObjectGrips">
        <description>Unselects an object's grips. Note, the grips will not be turned off.</description>
        <OLE-syntax>Rhino.UnselectObjectGrips (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <output name="missing" optional="Optional" vartype="Number">The number of grips unselected if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="AddObjectDisplayMode">
        <description>Assigns separate display modes to individual objects. Object display modes are view based. Thus, it is possible to have an object display different in different views.</description>
        <OLE-syntax>Rhino.AddObjectDisplayMode (strObject, strMode [, strView]])<input name="strObject" optional="Required" vartype="String">The identifier  of the object to modify.
          <input name="intQuality" optional="Required" vartype="String">The name or identifier of the display mode obtained from the ViewDisplayModes  method.
          <input name="strView" optional="Optional" vartype="String">The title  or identifier of the view. If omitted, the current active  view is used.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, false otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="AddObjectMesh">
        <description>Adds custom render mesh parameters to a meshable object, such as a surface or a polysurface. If an object has custom render mesh parameters and they are enabled, then they will be used, instead of the document's render mesh parameters, when a render mesh is generated for the object.</description>
        <OLE-syntax>Rhino.AddObjectMesh (strObject [, intQuality [, blnEnable]])<input name="strObject" optional="Required" vartype="Object">The identifier  of a meshable object.
          <input name="intQuality" optional="Optional" vartype="integer">The initial  settings of the new custom render mesh parameters. The available  options are as follows:<input-subset name="0" optional="Optional" vartype="integer">Jagged and faster. Objects  may look jagged, but they should shade and render relatively  quickly.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Smooth and slower. Objects  should look smooth, but they may take a very long time  to shade and render.</input-subset>
            <input-subset name="2 (Default)" optional="Optional" vartype="integer">Use the document's current render  mesh parameters.</input-subset>
          
          <input name="blnEnable" optional="Optional" vartype="Boolean">Enable the  custom render mesh parameters. If omitted, the newly added  parameters will be enabled (True).
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, false otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="BendObject">
        <description>Deforms objects by bending along a spine arc.</description>
        <OLE-syntax>Rhino.BendObject (strObject, arrStartPoint, arrEndPoint, arrArcPoint [, dblAngle, [, blnLimit [, blnSymmetric [, blnCopy]]]])<input name="strObject" optional="Required" vartype="String">The identifier of the  object to deform.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying  the objects to deform.
          <input name="arrStartPoint" optional="Required" vartype="single-xyz-array">The starting point of  a spine line that represents the original orientation of the object.
          <input name="arrEndPoint" optional="Required" vartype="single-xyz-array">The ending point of the  spine line.
          <input name="arrArcPoint" optional="Required" vartype="single-xyz-array">The point to bend through.  
          <input name="dlbAngle" optional="Required" vartype="Number">The bend angle in degrees. If specified, then arrArcPoint  is used to specify bend direction.
          <input name="blnLimit" optional="Optional" vartype="Boolean">If False (Default), then arrArcPoint determines  the region to bend. If true, only the spine region is bent.
          <input name="blnSymmetric  " optional="Optional" vartype="Boolean">If False (Default),  then only one end of the object bends. If True, then the  object will bend symmetrically around the center if you start  the spine in the middle of the object.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If  omitted, the object(s) will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the deformed object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the deformed  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="BoxMorphObject">
        <description>Deforms an object by mapping its eight bounding box points to eight new points.</description>
        <OLE-syntax>Rhino.BoxMorphObject (strObject, arrBoxPoints [, blnCopy [, arrOrigBoxPoints]])<input name="strObject" optional="Required" vartype="String">The identifier of the  object to deform.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying  the objects to deform.
          <input name="arrBoxPoints" optional="Required" vartype="multiple-xyz-array">An array of eight 3-D  points that contain the modified bounding box points.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If  omitted, the object(s) will not be copied (False).
          <input name="arrOrigBoxPoints" optional="Optional" vartype="multiple-xyz-array">An array of eight 3-D  points that define the original, or starting, box. If omitted,  the object(s) bounding box is used.
          <output name="missing" optional="Optional" vartype="String">The identifier of the deformed object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the deformed  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ChangeObjectSpace">
        <description>Changes the space, from world to page layout or from page layout to world, of objects.</description>
        <OLE-syntax>Rhino.ChangeObjectSpace (strObject, strLayout, strDetail [, blnToLayout [, blnCopy]])<input name="strObject" optional="Required" vartype="String">The identifier of the  object to change space.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying  the objects to change space.
          <input name="strLayout" optional="Required" vartype="String">he title or identifier  of an existing page layout view.
          <input name="strDetail " optional="Required" vartype="String">he title identifier  of an existing detail view in the layout view.
          <input name="blnToLayout" optional="Optional" vartype="Boolean">Change object(s) from  world to page layout (True), or change object(s) from page layout  to world (False). The default is True.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If  omitted, the object(s) will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the changed object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the changed  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="CopyObject">
        <description>Copies a single object from one location to another, or in-place.</description>
        <OLE-syntax>Rhino.CopyObject (strObject [, arrStart , arrEnd])<input name="strObject" optional="Required" vartype="String">The identifier of the object to copy.
          <input name="arrStart" optional="Optional" vartype="single-xyz-array">The 3-D starting, or base, point of the copy operation. If omitted, the object is copied in-place.
          <input name="arrEnd" optional="Optional" vartype="single-xyz-array">The 3-D ending point of the copy operation.
          <input name="arrTranslation" optional="Optional" vartype="geometrical-string-array">The 3-D translation vector.
          <output name="missing" optional="Optional" vartype="String">The identifier of the copied object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="CopyObjects">
        <description>Copies one or more objects from one location to another, or in-place.</description>
        <OLE-syntax>Rhino.CopyObjects (arrObjects [, arrStart , arrEnd])<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of  strings identifying the objects to copy.
          <input name="arrStart" optional="Optional" vartype="single-xyz-array">The 3-D starting,  or base, point of the copy operation. If omitted, the objects  are copied in-place.
          <input name="arrEnd" optional="Optional" vartype="single-xyz-array">The 3-D ending  point of the copy operation.
          <input name="arrTranslation" optional="Optional" vartype="geometrical-string-array">The 3-D translation  vector.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the copied  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="DeleteObject">
        <description>Deletes a single object from the document.</description>
        <OLE-syntax>Rhino.DeleteObject (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object to delete.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="DeleteObjects">
        <description>Deletes one or more objects from the document.</description>
        <OLE-syntax>Rhino.DeleteObjects (arrObjects)<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to delete.
          <output name="missing" optional="Optional" vartype="Number">The number of objects deleted if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="EnableObjectMesh">
        <description>Enables or disables an object's custom render mesh parameters. If an object's custom render mesh parameters are enabled, then they will be used, instead of the document's render mesh parameters, when a render mesh is generated for the object.</description>
        <OLE-syntax>Rhino.EnableObjectMesh (strObject [, blnEnable])<input name="arrObjects" optional="Required" vartype="Object">The identifier of a meshable object.
          <input name="blnEnable" optional="Optional" vartype="Boolean">Enable the custom render mesh settings.
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is not specified, then the current enabled/disabled state if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnEnable is not specified, then the current enabled/disabled state if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If the object does not have custom render mesh parameters, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="FlashObject">
        <description>Causes the selection state of one or more objects to change momentarily so the object appears to flash on the screen.</description>
        <OLE-syntax>Rhino.FlashObject (strObject [, blnStyle])<input name="strObject" optional="Required" vartype="String">The identifier of the object to flash.
          <input name="arrObjects" optional="Required" vartype="unknown-type-array">The identifiers of the objects to flash.
          <input name="blnStyle" optional="Optional" vartype="Boolean">The flash style. If True (default), then the objects will flash between their object color and Rhino's selected object color. If false, then the objects will flash between invisible and visible.
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="FlowObject">
        <description>Re-aligns objects from a base curve to a target curve.</description>
        <OLE-syntax>Rhino.FlowObject (strObject, strCurve0, strCurve1 [, blnReverse0 [, blnReverse1 [, blnStretch [, blnCopy [, blnPreserve]]]]])<input name="strObject" optional="Required" vartype="String">The identifier of the  object to deform.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying  the objects to deform.
          <input name="strCurve0" optional="Required" vartype="String">The identifier of the  base curve.
          <input name="strCurve1 " optional="Required" vartype="String">The identifier of the  target curve.
          <input name="blnReverse0  " optional="Optional" vartype="Boolean">Reverse the direction of strCurve0. The default  is False.
          <input name="blnReverse1  " optional="Optional" vartype="Boolean">Reverse the direction of strCurve1. The default  is False.
          <input name="blnStretch  " optional="Optional" vartype="Boolean">If False (Default),  the length of the objects along the curve directions are not changed.  If True, objects are stretched or compressed in the curve direction  so that the relationship to the target curve is the same as it  is to the base curve.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the objects. If  omitted, the objects will not be copied (False).
          <input name="blnPreserve" optional="Optional" vartype="Boolean">Preserve structure.  If False, objects are refit as needed with more control points  to allow accurate deformation. If True, the control point structure  of the objects are preserved. Deformation may be less accurate  if there are too few control points in on the object.The  default is False.
          <output name="missing" optional="Optional" vartype="String">The  identifier of the deformed object if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">An  array of strings identifying the deformed objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="HideObject">
        <description>Hides a single object. Hidden objects are not visible, cannot be snapped to, and cannot be selected.</description>
        <OLE-syntax>Rhino.HideObject (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object to hide.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="HideObjects">
        <description>Hides one or more objects. Hidden objects are not visible, cannot be snapped to, and cannot be selected.</description>
        <OLE-syntax>Rhino.HideObjects (arrObjects)<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to hide.
          <output name="missing" optional="Optional" vartype="Number">The number of objects hidden if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsLayoutObject">
        <description>Verifies that an object is in either page layout space or model space.</description>
        <OLE-syntax>Rhino.IsLayoutObject (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of an object.
          <output name="missing" optional="Optional" vartype="True">The object is in page layout space.</output>
          <output name="missing" optional="Optional" vartype="False">The object is in model space.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsObject">
        <description>Verifies the existence of an object.</description>
        <OLE-syntax>Rhino.IsObject (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of an object.
          <output name="missing" optional="Optional" vartype="True">The object exists.</output>
          <output name="missing" optional="Optional" vartype="False">The object does not exist.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsObjectChild">
        <description>Verifies that an object is a history descendant, or child object. Child objects are the output of a history-supporting command. Note, is possible to an object to be both a history antecedent and a history descendant.</description>
        <OLE-syntax>Rhino.IsObjectChild (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of an object.
          <output name="missing" optional="Optional" vartype="True">The object is a child object.</output>
          <output name="missing" optional="Optional" vartype="False">The object is not a child object.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsObjectHidden">
        <description>Verifies that an object is hidden. Hidden objects are not visible, cannot be snapped to, and cannot be selected.</description>
        <OLE-syntax>Rhino.IsObjectHidden (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of an object.
          <output name="missing" optional="Optional" vartype="True">The object is hidden.</output>
          <output name="missing" optional="Optional" vartype="False">The object is not hidden.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsObjectInBox">
        <description>Verifies an object's bounding box is inside of another bounding box.</description>
        <OLE-syntax>Rhino.IsObjectInBox (strObject, arrBox, [blnMode])<input name="strObject" optional="Required" vartype="String">The identifier  of an object.
          <input name="arrBox" optional="Required" vartype="multiple-xyz-array">The bounding  box to test against. A bounding box is an array of eight 3-D points  that define the corners of the box. Points need to be in  counter-clockwise order starting with the bottom rectangle of  the box.
          <input name="blnMode" optional="Optional" vartype="Boolean">The test  mode.<input-subset name="True (Default)" optional="Optional" vartype="Boolean">The object's bounding box must  be contained by the test bounding box. In other words,  test.min &lt;= object.min and object.max &lt;= test.max.</input-subset>
            <input-subset name="False" optional="Optional" vartype="Boolean">The object's bounding box must  be contained by or intersect with the test bounding box.</input-subset>
          
          <output name="missing" optional="Optional" vartype="True">The object is inside the bounding box.</output>
          <output name="missing" optional="Optional" vartype="False">The object is not inside the bounding box.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsObjectInGroup">
        <description>Verifies that an object is a member of a specified group.</description>
        <OLE-syntax>Rhino.IsObjectInGroup (strObject [, strGroup])<input name="strObject" optional="Required" vartype="String">The identifier of an object.
          <input name="strGroup" optional="Optional" vartype="String">The name of a group. If omitted, the function verifies that the object is a member of any group.
          <output name="missing" optional="Optional" vartype="True">The object is a member of the specified group. If a group was not specified, the object is a member of some group.</output>
          <output name="missing" optional="Optional" vartype="False">The object is not a member of the specified group. If a group was not specified, the object is not a member of any group.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsObjectLocked">
        <description>Verifies that an object is locked. Locked objects are visible and can be snapped to, but they cannot be selected.</description>
        <OLE-syntax>Rhino.IsObjectLocked (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of an object.
          <output name="missing" optional="Optional" vartype="True">The object is locked.</output>
          <output name="missing" optional="Optional" vartype="False">The object is not locked.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsObjectNormal">
        <description>Verifies that an object is normal. Normal objects are objects that are neither hidden nor locked. Normal objects are visible, can be snapped to, and can be selected.</description>
        <OLE-syntax>Rhino.IsObjectNormal (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of an object.
          <output name="missing" optional="Optional" vartype="True">The object is normal.</output>
          <output name="missing" optional="Optional" vartype="False">The object is not normal.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsObjectParent">
        <description>Verifies that an object is a history antecedent, or parent object. Parent objects are the input to a history-supporting command. Note, is possible to an object to be both a history antecedent and a history descendant.</description>
        <OLE-syntax>Rhino.IsObjectParent (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of an object.
          <output name="missing" optional="Optional" vartype="True">The object is a parent object.</output>
          <output name="missing" optional="Optional" vartype="False">The object is not a parent object.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsObjectReference">
        <description>Verifies that an object is a reference object. Reference objects are object that are not part of the current document.</description>
        <OLE-syntax>Rhino.IsObjectReference (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of an object.
          <output name="missing" optional="Optional" vartype="True">The object is a reference object.</output>
          <output name="missing" optional="Optional" vartype="False">The object is not a reference object.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsObjectSelectable">
        <description>Verifies that an object is selectable. Objects that are locked, hidden, or on locked or hidden layers cannot be selected.</description>
        <OLE-syntax>Rhino.IsObjectSelectable (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of an object.
          <output name="missing" optional="Optional" vartype="True">The object is selectable.</output>
          <output name="missing" optional="Optional" vartype="False">The object is not selectable.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsObjectSelected">
        <description>Verifies that an object is currently selected.</description>
        <OLE-syntax>Rhino.IsObjectSelected (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of an object.
          <output name="missing" optional="Optional" vartype="True">The object is selected.</output>
          <output name="missing" optional="Optional" vartype="False">The object is not selected.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsObjectSolid">
        <description>Verifies that an object is a closed, solid object.</description>
        <OLE-syntax>Rhino.IsObjectSolid (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of an object.
          <output name="missing" optional="Optional" vartype="True">The object is solid.</output>
          <output name="missing" optional="Optional" vartype="False">The object is not solid.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsObjectValid">
        <description>Verifies that an object's geometry is valid and without error.</description>
        <OLE-syntax>Rhino.IsObjectValid (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of an object.
          <output name="missing" optional="Optional" vartype="True">The object is valid.</output>
          <output name="missing" optional="Optional" vartype="False">The object is not valid.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="IsVisibleInView">
        <description>Verifies that an object is visible in a view.</description>
        <OLE-syntax>Rhino.IsVisibleInView (strObject [, strView])<input name="strObject" optional="Required" vartype="String">The identifier of an object.
          <input name="strView" optional="Optional" vartype="String">The title of the view. If omitted, the current active view is used.
          <output name="missing" optional="Optional" vartype="True">The object is visible in the specified view.</output>
          <output name="missing" optional="Optional" vartype="False">The object is not visible in the specified view.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="LockObject">
        <description>Locks a single object. Locked object are visible, and they can be snapped to. But, they cannot be selected.</description>
        <OLE-syntax>Rhino.LockObject (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object to lock.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="LockObjects">
        <description>Locks one or more objects. Locked object are visible, and they can be snapped to. But, they cannot be selected.</description>
        <OLE-syntax>Rhino.LockObjects (arrObjects)<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to lock.
          <output name="missing" optional="Optional" vartype="Number">The number of objects locked if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="MaelstromObject">
        <description>Deforms objects in a spiral as if they were caught in a whirlpool.</description>
        <OLE-syntax>Rhino.MaelstromObject (strObject, arrPlane, dblRadius0, dblRadius1, dblAngle [, blnCopy])<input name="strObject" optional="Required" vartype="String">The identifier of the  object to deform.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying  the objects to deform.
          <input name="arrPlane" optional="Required" vartype="single-xyz-array">The plane on which the  base circle will lie. The origin of the plane will be the center  point of the circle.
          <input name="dblRadius0" optional="Required" vartype="double">The first radius.
          <input name="dblRadius1" optional="Required" vartype="double">The second radius.
          <input name="dblAngle " optional="Required" vartype="double">The coil  angle in degrees.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If  omitted, the object(s) will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the deformed object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the deformed  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="MatchObjectAttributes">
        <description>Matches, or copies, the attributes of a source object to a target object or an array of target objects. If the source object is not specified, the attributes of the target object(s) will be reset to Rhino's default object attributes.</description>
        <OLE-syntax>Rhino.MatchObjectAttributes (strTarget [, strSource])<input name="strTarget" optional="Required" vartype="String">The identifier of the target object.
          <input name="arrTargets" optional="Required" vartype="unknown-string-array">An array of strings identifying the target objects.
          <input name="strSource" optional="Optional" vartype="String">The identifier of the source object. If the source object is not specified, the attributes of the target object(s) will be reset to Rhino's default object attributes.
          <output name="missing" optional="Optional" vartype="Number">The number of objects whose attributes were modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="MirrorObject">
        <description>Mirrors a single object.</description>
        <OLE-syntax>Rhino.MirrorObject (strObject, arrStartPt, arrEndPt [, blnCopy])<input name="strObject" optional="Required" vartype="String">The identifier of the object to mirror.
          <input name="arrStartPt" optional="Required" vartype="geometrical-string-array">The start of the mirror plane.
          <input name="arrEndPt" optional="Required" vartype="geometrical-string-array">The end of the mirror plane.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If omitted, the object will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the mirrored object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="MirrorObjects">
        <description>Mirrors one or more objects.</description>
        <OLE-syntax>Rhino.MirrorObjects (arrObjects, arrStartPt, arrEndPt [, blnCopy])<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to mirror.
          <input name="arrStartPt" optional="Required" vartype="geometrical-string-array">The start of the mirror plane.
          <input name="arrEndPt" optional="Required" vartype="geometrical-string-array">The end of the mirror plane.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the objects. If omitted, the objects will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">An array of strings identifying the mirrored objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="MoveObject">
        <description>Moves a single object.</description>
        <OLE-syntax>Rhino.MoveObject (strObject, arrStart, arrEnd)<input name="strObject" optional="Required" vartype="String">The identifier  of the object to move.
          <input name="arrStart" optional="Required" vartype="single-xyz-array">The 3-D starting,  or base, point of the move operation.
          <input name="arrEnd" optional="Required" vartype="single-xyz-array">The 3-D ending  point of the move operation.
          <input name="arrTranslation" optional="Required" vartype="geometrical-string-array">The 3-D translation  vector.
          <output name="missing" optional="Optional" vartype="String">The identifier of the moved object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="MoveObjects">
        <description>Moves one or more objects.</description>
        <OLE-syntax>Rhino.MoveObjects (arrObjects, arrStart, arrEnd)<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of  strings identifying the objects to move.
          <input name="arrStart" optional="Required" vartype="single-xyz-array">The 3-D starting,  or base, point of the move operation.
          <input name="arrEnd" optional="Required" vartype="single-xyz-array">The 3-D ending  point of the move operation.
          <input name="arrTranslation" optional="Required" vartype="geometrical-string-array">The 3-D translation  vector.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the moved  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectChildren">
        <description>Returns the identifiers of history descendants, or children, of a parent object. Child objects are the output of a history-supporting command.</description>
        <OLE-syntax>Rhino.ObjectChildren (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of an object.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectClash">
        <description>Performs clash and clearance analysis on two sets of surface, polysurface, extrusion, or mesh objects. For more information see the Rhino help file for details on the Clash command.</description>
        <OLE-syntax>Rhino.ObjectClash (arrObjects0, arrObjects1, dblClearance)<input name="arrObjects0" optional="Required" vartype="unknown-type-array">The first  array of object identifiers.
          <input name="arrObjects1" optional="Required" vartype="unknown-type-array">The first  array of object identifiers.
          <input name="dblClearance" optional="Required" vartype="double">The clearance  distance. If 0.0, then only clash, or intersection, analysis is  performed. If &gt; 0.0, then objects are also analyzed to see  if they violate the defined zone of clearance.
          <output name="missing" optional="Optional" vartype="Array">An array that contains arrays of clash  and clearance events if successful. The array of event information  will contain the following:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">String. The identifier of the object in arrObjects0.</output>
          <output name="missing" optional="Optional" vartype="1">String. The identifier of the object in arrObjects1.</output>
          <output name="missing" optional="Optional" vartype="2">Array. An array of 3-D hit  points where the objects interfere.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectColor">
        <description>Returns or modifies the color of an object. Object colors are represented as RGB colors. An RGB color specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</description>
        <OLE-syntax>Rhino.ObjectColor (strObject [, lngColor])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to modify.
          <input name="lngColor" optional="Optional" vartype="long">The new color value. If omitted, the current object color is returned. Note, if arrObjects is specified, lngColor is required.
          <output name="missing" optional="Optional" vartype="Number">If a color value is not specified, the current color value if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a color value is specified, the previous color value if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If arrObjects is specified, then the number of objects modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectColorSource">
        <description>Returns or modifies the color source of an object. The color used to display objects is specified in one of four ways:</description>
        <OLE-syntax>Rhino.ObjectColorSource (strObject [, intSource])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to modify.
          <input name="intSource" optional="Optional" vartype="integer">The new color source. If omitted, the current color source is returned. Note, if arrObjects is specified, intSource is required.<input-subset name="0" optional="Optional" vartype="integer">Color from layer</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Color from object</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Color from material</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Color from parent</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If a color source is not specified, the current color source if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a color source is specified, the previous color source if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If arrObjects is specified, then the number of objects modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectDescription">
        <description>Returns a short text description of an object.</description>
        <OLE-syntax>Rhino.ObjectDescription (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <output name="missing" optional="Optional" vartype="String">A short text description of the object is successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectDisplayMode">
        <description>Returns the display mode of an objects. Object display modes are view based. Thus, it is possible to have an object display different in different views.</description>
        <OLE-syntax>Rhino.ObjectDisplayMode (strObject [, strView])<input name="strObject" optional="Required" vartype="String">The identifier  of the object to query.
          <input name="strView" optional="Optional" vartype="String">The title  or identifier of the view. If omitted, the current active  view is used.
          <output name="missing" optional="Optional" vartype="String">The identifier of the display mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectDump">
        <description>Returns a detailed description of an object.</description>
        <OLE-syntax>Rhino.ObjectDump (strObject [, intType])<input name="strObject" optional="Required" vartype="String">The identifier of the object.<input-subset name="0 (Default)" optional="Required" vartype="String">Returns both geometry and attribute details. This is equivalent to the results of the What command.</input-subset>
            <input-subset name="1" optional="Required" vartype="String">Returns geometry details.</input-subset>
            <input-subset name="2" optional="Required" vartype="String">Returns attribute details.</input-subset>
            <input-subset name="3" optional="Required" vartype="String">Returns detailed technical information about the data structure of the object. This is equivalent to the results of the List command.</input-subset>
          
          <output name="missing" optional="Optional" vartype="String">A detailed description of the object is successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectGroups">
        <description>Returns all of the group names that an object is assigned.</description>
        <OLE-syntax>Rhino.ObjectGroups (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <output name="missing" optional="Optional" vartype="Array">An array of all group names for the object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectHasHistory">
        <description>Verifies that an object has history. Objects with history were either the input to, or the output of a history-supporting command.</description>
        <OLE-syntax>Rhino.ObjectHasHistory (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of an object.
          <output name="missing" optional="Optional" vartype="True">The object has history.</output>
          <output name="missing" optional="Optional" vartype="False">The object does not have history.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectHasMesh">
        <description>Verifies that an object has custom render mesh parameters.</description>
        <OLE-syntax>Rhino.ObjectHasMesh (strObject)<input name="strObject" optional="Required" vartype="Object">The identifier of a meshable object.
          <output name="missing" optional="Optional" vartype="Boolean">True of the object has custom render mesh parameters, False otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectLayer">
        <description>Returns or modifies the layer of an object.</description>
        <OLE-syntax>Rhino.ObjectLayer (strObject [, strLayer])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of  strings identifying the objects to modify.
          <input name="strLayer" optional="Optional" vartype="String">The name or identifier of an existing layer. If omitted, the current object layer is returned. Note, if arrObjects is specified, strLayer  is required.
          <output name="missing" optional="Optional" vartype="String">If a layer is not specified, the  object's current layer if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If a layer is specified, the object's previous  layer if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If arrObjects  is specified, then the number of objects modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectLayout">
        <description>Returns or changes the layout or model space of an object.</description>
        <OLE-syntax>Rhino.ObjectLayout (strObject [, strLayout [, blnReturnName]])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="strLayout" optional="Optional" vartype="String">To change, or move, an object from model space to page layout space, or from one page layout to another, then specify the title or identifier of an existing page layout view. To move an object from page layout space to model space, just specify Null.
          <input name="blnReturnName" optional="Optional" vartype="Boolean">If True (default), then the name, or title, of the page layout view is returned. If False, then the identifier of the page layout view is returned.
          <output name="missing" optional="Optional" vartype="String">If strLayout is not specified, the object's current page layout view if successful. Note, if the object is not in page layout space, Null is returned.</output>
          <output name="missing" optional="Optional" vartype="String">If strLayout is specified, the object's previous page layout view if successful. Note, if the object was not in page layout space, Null is returned.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectLinetype">
        <description>Returns or modifies the linetype of an object.</description>
        <OLE-syntax>Rhino.ObjectLinetype (strObject [, strLinetype])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to modify.
          <input name="strLayer" optional="Optional" vartype="String">The name of an existing linetype. If omitted, the current object linetype is returned. Note, if arrObjects is specified, strLinetype is required.
          <output name="missing" optional="Optional" vartype="Number">If a linetype is not specified, the object's current linetype if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a linetype is specified, the object's previous linetype if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If arrObjects is specified, then the number of objects modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectLinetypeSource">
        <description>Returns or modifies the linetype source of an object. The linetype used to display objects is specified in one of three ways:</description>
        <OLE-syntax>Rhino.ObjectLinetypeSource (strObject [, intSource])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to modify.
          <input name="intSource" optional="Optional" vartype="integer">The new linetype source. If omitted, the current linetype source is returned. Note, if arrObjects is specified, intSource is required.<input-subset name="0" optional="Optional" vartype="integer">Layer. Use the object's layer linetype.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Object. Use the object's linetype.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">&lt;unused&gt;</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Parent. Use the parent object's linetype.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If a linetype source is not specified, the current linetype source if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a linetype source is specified, the previous linetype source if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If arrObjects is specified, then the number of objects modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectMaterialIndex">
        <description>Returns or changes the material index of an object.</description>
        <OLE-syntax>Rhino.ObjectMaterialIndex (strObject [, intIndex])<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <input name="intIndex" optional="Optional" vartype="integer">The new material  index.
          <output name="missing" optional="Optional" vartype="Number">The rendering material index if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectMaterialSource">
        <description>Returns or modifies the rendering material source of an object.</description>
        <OLE-syntax>Rhino.ObjectMaterialSource (strObject [, intSource])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to modify.
          <input name="intSource" optional="Optional" vartype="integer">The new rendering material source. If omitted, the current material source is returned. Note, if arrObjects is specified, intSource is required.<input-subset name="0" optional="Optional" vartype="integer">Material from layer</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Material from object</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">&lt;unused&gt;</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Material from parent</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If a rendering material source is not specified, the current rendering material source if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a rendering material source is specified, the previous rendering material source if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If arrObjects is specified, then the number of objects modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectMeshDensity">
        <description>Returns or modifies an object's custom render mesh parameter's mesh density property.</description>
        <OLE-syntax>Rhino.ObjectMeshDensity (strObject [, dblDensity])<input name="strObject" optional="Required" vartype="Object">The identifier  of an object that has custom render mesh parameters.
          <input name="dblDensity" optional="Optional" vartype="double">The render  mesh density, which is a number between 0.0 and 1.0.
          <output name="missing" optional="Optional" vartype="Number">If dblDensity  is not specified, the current render mesh density if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblDensity  is specified, the previous render mesh density if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectMeshMaxAngle">
        <description>Returns or modifies an object's custom render mesh parameter's maximum angle property.</description>
        <OLE-syntax>Rhino.ObjectMeshMaxAngle (strObject [, dblAngle])<input name="strObject" optional="Required" vartype="Object">The identifier  of an object that has custom render mesh parameters.
          <input name="dblAngle" optional="Optional" vartype="double">The render  mesh maximum angle in degrees.
          <output name="missing" optional="Optional" vartype="Number">If dblAngle  is not specified, the current render mesh maximum angle if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblAngle  is specified, the previous render mesh maximum angle if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectMeshMaxAspectRatio">
        <description>Returns or modifies an object's custom render mesh parameter's maximum aspect ratio property.</description>
        <OLE-syntax>Rhino.ObjectMeshMaxAspectRatio (strObject [, dblRatio])<input name="strObject" optional="Required" vartype="Object">The identifier  of an object that has custom render mesh parameters.
          <input name="dblRatio" optional="Optional" vartype="double">The render  mesh maximum aspect ratio. The suggested range, when not  zero, is from 1 to 100.
          <output name="missing" optional="Optional" vartype="Number">If dblRatio  is not specified, the current render mesh maximum aspect ratio  if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblRatio  is specified, the previous render mesh maximum aspect ratio if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectMeshMaxDistEdgeToSrf">
        <description>Returns or modifies an object's custom render mesh parameter's maximum distance, edge to surface property.</description>
        <OLE-syntax>Rhino.ObjectMeshMaxDistEdgeToSrf (strObject [, dblDistance])<input name="strObject" optional="Required" vartype="Object">The identifier  of an object that has custom render mesh parameters.
          <input name="dblDistance" optional="Optional" vartype="double">The render  mesh maximum distance, edge to surface.
          <output name="missing" optional="Optional" vartype="Number">If dblDistance  is not specified, the current render mesh maximum distance, edge  to surface if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblDistance  is specified, the previous render mesh maximum distance, edge  to surface if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectMeshMaxEdgeLength">
        <description>Returns or modifies an object's custom render mesh parameter's maximum edge length property.</description>
        <OLE-syntax>Rhino.ObjectMeshMaxEdgeLength (strObject [, dblLength])<input name="strObject" optional="Required" vartype="Object">The identifier  of an object that has custom render mesh parameters.
          <input name="dblLength" optional="Optional" vartype="double">The render  mesh maximum edge length.
          <output name="missing" optional="Optional" vartype="Number">If dblLength  is not specified, the current render mesh maximum edge length  if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblLength  is specified, the previous render mesh maximum edge length if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectMeshMinEdgeLength">
        <description>Returns or modifies an object's custom render mesh parameter's minimum edge length property.</description>
        <OLE-syntax>Rhino.ObjectMeshMinEdgeLength (strObject [, dblLength])<input name="strObject" optional="Required" vartype="Object">The identifier  of an object that has custom render mesh parameters.
          <input name="dblLength" optional="Optional" vartype="double">The render  mesh minimum edge length.
          <output name="missing" optional="Optional" vartype="Number">If dblLength  is not specified, the current render mesh minimum edge length  if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblLength  is specified, the previous render mesh minimum edge length if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectMeshMinInitialGridQuads">
        <description>Returns or modifies an object's custom render mesh parameter's minimum initial grid quads property.</description>
        <OLE-syntax>Rhino.ObjectMeshMinInitialGridQuads (strObject [, intQuads])<input name="strObject" optional="Required" vartype="Object">The identifier  of an object that has custom render mesh parameters.
          <input name="intQuads" optional="Optional" vartype="integer">The render  mesh minimum initial grid quads. The suggested range is  from 0 to 10000.
          <output name="missing" optional="Optional" vartype="Number">If intQuads  is not specified, the current render mesh minimum initial grid  quads if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intQuads  is specified, the previous render mesh minimum initial grid quads  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectMeshQuality">
        <description>Returns or sets the render mesh quality of an object's custom render mesh parameters.</description>
        <OLE-syntax>Rhino.ObjectMeshQuality (strObject [, intQuality])<input name="strObject" optional="Required" vartype="Object">The identifier  of an object that has custom render mesh parameters.
          <input name="intQuality" optional="Optional" vartype="integer">The render  mesh quality, either:<input-subset name="0" optional="Optional" vartype="integer">Jagged and faster. Objects  may look jagged, but they should shade and render relatively  quickly.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Smooth and slower. Objects  should look smooth, but they may take a very long time  to shade and render.</input-subset>
            <input-subset name="2 (Default)" optional="Optional" vartype="integer">Use the document's current render  mesh parameters.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If intQuality  is not specified, the current render mesh quality if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intQuality  is specified, the previous render mesh quality if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If the object does not have custom render  mesh parameters, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectMeshSettings">
        <description>Returns or sets the render mesh settings of an object's custom render mesh parameters.</description>
        <OLE-syntax>Rhino.ObjectMeshSettings (strObject [, intSettings])<input name="strObject" optional="Required" vartype="Object">The identifier  of an object that has custom render mesh parameters.
          <input name="intSettings" optional="Optional" vartype="integer">The render  mesh settings, which is a bit-coded number that allows or disallows  certain features. The bits can be added together in any  combination to form a value between 0 and 15. The bit values  are as follows:<input-subset name="0" optional="Optional" vartype="integer">No settings enabled.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Refine mesh enabled.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Jagged seams enabled.</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Simple planes enabled.</input-subset>
            <input-subset name="8" optional="Optional" vartype="integer">Pack textures enabled</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If intSettings  is not specified, the current render mesh settings if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intSettings  is specified, the previous render mesh settings if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If the object does not have custom render  mesh parameters, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectName">
        <description>Returns or modifies the user-definable name of an object.</description>
        <OLE-syntax>Rhino.ObjectName (strObject [, strName])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to modify.
          <input name="strName" optional="Optional" vartype="String">The new object name. If omitted, the current object name is returned. Note, if arrObjects is specified, strName is required.
          <output name="missing" optional="Optional" vartype="String">If an object name is not specified, the current object name if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If an object name is specified, the previous object name if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If arrObjects is specified, then the number of objects modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectNames">
        <description>Returns or modifies the user-definable name of one or more objects.</description>
        <OLE-syntax>Rhino.ObjectNames (arrObjects [, arrNames])<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects.
          <input name="arrNames" optional="Optional" vartype="unknown-string-array">An array of strings identifying the new user-definable names. This array must have the same upper bounds as arrObjects. Each element in arrNames will correspond with each element in arrObjects.
          <output name="missing" optional="Optional" vartype="Array">If arrNames is not specified, the current object names if successful. Note, if an object does not have a user-definable name, it's corresponding element will be Null.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrNames is specified, the previous object names if successful. Note, if an object does not have a user-definable name, it's corresponding element will be Null.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectParents">
        <description>Returns the identifiers of history antecedents, or parents, of an object. Parent objects are the input to a history-supporting command.</description>
        <OLE-syntax>Rhino.ObjectParents (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of an object.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectPrintColor">
        <description>Returns or modifies the print color of an object. Object print colors are represented as RGB colors. An RGB color specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</description>
        <OLE-syntax>Rhino.ObjectPrintColor (strObject [, lngColor])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to modify.
          <input name="lngColor" optional="Optional" vartype="long">The new print color value. If omitted, the current object color is returned. Note, if arrObjects is specified, lngColor is required.
          <output name="missing" optional="Optional" vartype="Number">If a print color value is not specified, the current print color value if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a print color value is specified, the previous print color value if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If arrObjects is specified, then the number of objects modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectPrintColorSource">
        <description>Returns or modifies the print color source of an object. The color used to print objects is specified in one of four ways:</description>
        <OLE-syntax>Rhino.ObjectPrintColorSource (strObject [, intSource])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to modify.
          <input name="intSource" optional="Optional" vartype="integer">The new print color source. If omitted, the current print color source is returned. Note, if arrObjects is specified, intSource is required.<input-subset name="0" optional="Optional" vartype="integer">Print color by layer.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Print color by object.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Print color by display.</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Print color by parent.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If a print color source is not specified, the current color source if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a print color source is specified, the previous color source if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If arrObjects is specified, then the number of objects modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectPrintWidth">
        <description>Returns or modifies the print width of an object. Object print widths are measured in millimeters (mm).</description>
        <OLE-syntax>Rhino.ObjectPrintWidth (strObject [, dblWidth])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to modify.
          <input name="dblWidth" optional="Optional" vartype="double">The new print width value in millimeters, where dblWidth = 0.0 means use the default width, and dblWidth &lt; 0.0 means do not print (visible for screen display, but does not show on print). If omitted, the current object print width is returned. Note, if arrObjects is specified, dblWidth is required.
          <output name="missing" optional="Optional" vartype="Number">If a print width value is not specified, the current print width value if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a print width value is specified, the previous print width value if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If arrObjects is specified, then the number of objects modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectPrintWidthSource">
        <description>Returns or modifies the print width source of an object. The width used to print objects is specified in one of three ways:</description>
        <OLE-syntax>Rhino.ObjectPrintWidthSource (strObject [, intSource])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to modify.
          <input name="intSource" optional="Optional" vartype="integer">The new print width source. If omitted, the current print width source is returned. Note, if arrObjects is specified, intSource is required.<input-subset name="0" optional="Optional" vartype="integer">Print width by layer.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Print width by object.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">&lt;unused&gt;</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Print width by parent.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If a print width source is not specified, the current width source if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a print width source is specified, the previous width source if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If arrObjects is specified, then the number of objects modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectTopGroup">
        <description>Returns the top most group name that an object is assigned. This function primarily applies to objects that are members of nested groups.</description>
        <OLE-syntax>Rhino.ObjectTopGroup (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <output name="missing" optional="Optional" vartype="String">The top most group name of the object if successful</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectType">
        <description>Returns the object type.</description>
        <OLE-syntax>Rhino.ObjectType (strObject)<input name="strObject" optional="Required" vartype="String">The identifier  of the object.
          <output name="missing" optional="Optional" vartype="Number">The object type if successful. The  valid object types are as follows:</output>
          <output name="missing" optional="Optional" vartype="Value">Hex</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="&amp;h0">Unknown object</output>
          <output name="missing" optional="Optional" vartype="1">&amp;h1</output>
          <output name="missing" optional="Optional" vartype="Point">2</output>
          <output name="missing" optional="Optional" vartype="&amp;h2">Point cloud</output>
          <output name="missing" optional="Optional" vartype="4">&amp;h4</output>
          <output name="missing" optional="Optional" vartype="Curve">8</output>
          <output name="missing" optional="Optional" vartype="&amp;h8">Surface (single-face Brep)</output>
          <output name="missing" optional="Optional" vartype="16">&amp;h10</output>
          <output name="missing" optional="Optional" vartype="Polysurface (multiple-face Brep)">32</output>
          <output name="missing" optional="Optional" vartype="&amp;h20">Mesh</output>
          <output name="missing" optional="Optional" vartype="256">&amp;h100</output>
          <output name="missing" optional="Optional" vartype="Light">512</output>
          <output name="missing" optional="Optional" vartype="&amp;h200">Annotation</output>
          <output name="missing" optional="Optional" vartype="4096">&amp;h1000</output>
          <output name="missing" optional="Optional" vartype="Instance (Block) reference">8192</output>
          <output name="missing" optional="Optional" vartype="&amp;h2000">Text dot</output>
          <output name="missing" optional="Optional" vartype="16384">&amp;h4000</output>
          <output name="missing" optional="Optional" vartype="Grip">32768</output>
          <output name="missing" optional="Optional" vartype="&amp;h8000">Detail</output>
          <output name="missing" optional="Optional" vartype="65536">&amp;h10000</output>
          <output name="missing" optional="Optional" vartype="Hatch">131072</output>
          <output name="missing" optional="Optional" vartype="&amp;h20000">Morph control</output>
          <output name="missing" optional="Optional" vartype="134217728">&amp;h8000000</output>
          <output name="missing" optional="Optional" vartype="Cage">268435456</output>
          <output name="missing" optional="Optional" vartype="&amp;h10000000">Phantom</output>
          <output name="missing" optional="Optional" vartype="536870912">&amp;h20000000</output>
          <output name="missing" optional="Optional" vartype="Clipping plane">1073741824</output>
          <output name="missing" optional="Optional" vartype="&amp;h40000000">Extrusion</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ObjectURL">
        <description>Returns or modifies the user-definable URL of an object.</description>
        <OLE-syntax>Rhino.ObjectURL (strObject [, strURL])<input name="strObject" optional="Required" vartype="String">The identifier of the object.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to modify.
          <input name="strURL" optional="Optional" vartype="String">The new object URL. If omitted, the current object URL is returned. Note, if arrObjects is specified, strURL is required.
          <output name="missing" optional="Optional" vartype="String">If an object URL is not specified, the current object URL if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If an object URL is specified, the previous object URL if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If arrObjects is specified, then the number of objects modified if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="OrientObject">
        <description>Orients a single object based on input points.</description>
        <OLE-syntax>Rhino.OrientObject (strObject, arrReference, arrTarget [, intFlags])<input name="strObject" optional="Required" vartype="String">The identifier of the object to orient.
          <input name="arrReference" optional="Required" vartype="multiple-xyz-array">An array of 3-D reference points. If two 3-D points are specified, then this method will function similar to Rhino's Orient command. If more than two 3-D points are specified, then the function will orient similar to Rhino's Orient3Pt command.
          <input name="arrTarget" optional="Required" vartype="multiple-xyz-array">An array of 3-D target points. If two 3-D points are specified, then this method will function similar to Rhino's Orient command. If more than two 3-D points are specified, then the function will orient similar to Rhino's Orient3Pt command.
          <input name="intFlags" optional="Optional" vartype="integer">The orient flags. Values can be added together to specify multiple options.<input-subset name="1" optional="Optional" vartype="integer">Copy object. The default is not to copy the object.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Scale object. The default is not to scale the object. Note, the scale option only applies if both arrReference and arrTarget contain only two 3-D points.</input-subset>
          
          <output name="missing" optional="Optional" vartype="String">The identifier of the oriented object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="OrientObjects">
        <description>Orients one or more objects based on input points.</description>
        <OLE-syntax>Rhino.OrientObjects (arrObjects, arrReference, arrTarget [, intFlags])<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to orient.
          <input name="arrReference" optional="Required" vartype="multiple-xyz-array">An array of 3-D reference points. If two 3-D points are specified, then this method will function similar to Rhino's Orient command. If more than two 3-D points are specified, then the function will orient similar to Rhino's Orient3Pt command.
          <input name="arrTarget" optional="Required" vartype="multiple-xyz-array">An array of 3-D target points. If two 3-D points are specified, then this method will function similar to Rhino's Orient command. If more than two 3-D points are specified, then the function will orient similar to Rhino's Orient3Pt command.
          <input name="intFlags" optional="Optional" vartype="integer">The orient flags. Values can be added together to specify multiple options.<input-subset name="1" optional="Optional" vartype="integer">Copy object. The default is not to copy the objects.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Scale object. The default is not to scale the objects. Note, the scale option only applies if both arrReference and arrTarget contain only two 3-D points.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the oriented objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="RemapObject">
        <description>Remaps a single object from one plane, or coordinate system, to another.</description>
        <OLE-syntax>Rhino.RemapObject (strObject, arrSrcPlane, arrDstPlane [, blnCopy])<input name="strObject" optional="Required" vartype="String">The identifier of the  object to remap.
          <input name="arrSrcPlane" optional="Required" vartype="geometrical-string-array">The source plane to transform  from.
          <input name="arrDstPlane" optional="Required" vartype="geometrical-string-array">The destination plane  to transform to.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If  omitted, the object will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the remapped object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="RemapObjects">
        <description>Remaps one or more objects from one plane, or coordinate system, to another.</description>
        <OLE-syntax>Rhino.RemapObjects (arrObjects, arrSrcPlane, arrDstPlane [, blnCopy])<input name="arrObject" optional="Required" vartype="unknown-type-array">The identifiers of the  objects to remap.
          <input name="arrSrcPlane" optional="Required" vartype="geometrical-string-array">The source plane to transform  from.
          <input name="arrDstPlane" optional="Required" vartype="geometrical-string-array">The destination plane  to transform to.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If  omitted, the object will not be copied (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the remapped  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="RemoveObjectDisplayMode">
        <description>Removes separate display modes from individual objects. Object display modes are view based. Thus, it is possible to have an object display different in different views.</description>
        <OLE-syntax>Rhino.RemoveObjectDisplayMode (strObject [, strView])<input name="strObject" optional="Required" vartype="String">The identifier  of the object to modify.
          <input name="strView" optional="Optional" vartype="String">The title  or identifier of the view. If omitted, the current active  view is used. Note, if Null is specified, all display modes are  removed from the object.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, false otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ReplaceGeometry">
        <description>Replaces the geometry of an object with that of another object. Note, the target object's attributes, such as it's object identifier, attribute user data, and other properties, are retained.</description>
        <OLE-syntax>Rhino.ReplaceGeometry (strTarget, strSource [, blnDelete])<input name="strTarget" optional="Required" vartype="String">The target object, or  the object geometry to replace.
          <input name="strSource " optional="Required" vartype="String">The source object, or  the object geometry to replace with.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete the source object.  The default is not to delete the source object (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the target object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="RotateObject">
        <description>Rotates a single object. Rotation is based on the active construction plane.</description>
        <OLE-syntax>Rhino.RotateObject (strObject, arrPoint, dblAngle [, arrAxis [, blnCopy]])<input name="strObject" optional="Required" vartype="String">The identifier of the object to rotate.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D center point of the rotation.
          <input name="dblAngle" optional="Required" vartype="double">The rotation angle in degrees.
          <input name="arrAxis" optional="Optional" vartype="geometrical-string-array">A 3-D vector that identifies the axis of rotation. If omitted, the Z axis of the active construction plane is used as the rotation axis.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If omitted, the object will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the rotated object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="RotateObjects">
        <description>Rotates one or more objects. Rotation is based on the active construction plane.</description>
        <OLE-syntax>Rhino.RotateObjects (arrObjects, arrPoint, dblAngle [, arrAxis [, blnCopy]])<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying  the objects to rotate.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D center point of  the rotation.
          <input name="dblAngle" optional="Required" vartype="double">The rotation angle in  degrees.
          <input name="arrAxis" optional="Optional" vartype="geometrical-string-array">A 3-D vector that identifies  the axis of rotation. If omitted, the Z axis of the active construction  plane is used as the rotation axis.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If  omitted, the objects will not be copied (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the rotated  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ScaleObject">
        <description>Scales a single object. This function can be used to perform uniform or non-uniform scale transformations. Scaling is based on the active construction plane.</description>
        <OLE-syntax>Rhino.ScaleObject (strObject, arrOrigin, arrScale [, blnCopy])<input name="strObject" optional="Required" vartype="String">The identifier of the object to scale.
          <input name="arrOrigin" optional="Required" vartype="unknown-type-array">The origin of the scale transformation.
          <input name="arrScale" optional="Required" vartype="number-array">An array of three numbers that identify the X axis, Y axis, and Z axis scale factors to apply. Scaling is based on the active construction plane.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If omitted, the object will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the scaled object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ScaleObjects">
        <description>Scales one or more objects. This function can be used to perform uniform or non-uniform scale transformations. Scaling is based on the active construction plane.</description>
        <OLE-syntax>Rhino.ScaleObjects (arrObjects, arrOrigin, arrScale [, blnCopy])<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to scale.
          <input name="arrOrigin" optional="Required" vartype="unknown-type-array">The origin of the scale transformation.
          <input name="arrScale" optional="Required" vartype="number-array">An array of three numbers that identify the X axis, Y axis, and Z axis scale factors to apply. Scaling is based on the active construction plane.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the objects. If omitted, the objects will not be copied (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the scaled objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="SelectObject">
        <description>Selects a single object.</description>
        <OLE-syntax>Rhino.SelectObject (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object to select.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="SelectObjects">
        <description>Selects one or more objects.</description>
        <OLE-syntax>Rhino.SelectObjects (arrObjects)<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to select.
          <output name="missing" optional="Optional" vartype="Number">The number of objects selected if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ShearObject">
        <description>Performs a shear transformation on a single object. Transformation is based on the active construction plane.</description>
        <OLE-syntax>Rhino.ShearObject (strObject, arrOrigin, arrRefPt, dblAngle [, blnCopy])<input name="strObject" optional="Required" vartype="String">The identifier of the object to shear.
          <input name="arrOrigin" optional="Required" vartype="unknown-type-array">The origin of the shear transformation.
          <input name="arrRefPt" optional="Required" vartype="single-xyz-array">The reference point of the shear transformation.
          <input name="arrScale" optional="Required" vartype="Number">An angle in degrees of the shear transformation, where -90.0 &lt;= angle &lt;= 90.0.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If omitted, the object will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the sheared object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ShearObjects">
        <description>Performs a shear transformation on one or more objects. Transformation is based on the active construction plane.</description>
        <OLE-syntax>Rhino.ShearObjects (arrObjects, arrOrigin, arrRefPt, dblAngle [, blnCopy])<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying  the objects to shear.
          <input name="arrOrigin" optional="Required" vartype="unknown-type-array">The origin of the shear  transformation.
          <input name="arrRefPt" optional="Required" vartype="single-xyz-array">The reference point of  the shear transformation.
          <input name="arrScale" optional="Required" vartype="Number">An angle in degrees of  the shear transformation, where -90.0 &lt;= angle &lt;= 90.0.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the objects. If  omitted, the objects will not be copied (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the sheared  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ShowObject">
        <description>Shows a previously hidden object. Hidden objects are not visible, cannot be snapped to, and cannot be selected.</description>
        <OLE-syntax>Rhino.ShowObject (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object to show.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="ShowObjects">
        <description>Shows one or more hidden objects. Hidden objects are not visible, cannot be snapped to, and cannot be selected.</description>
        <OLE-syntax>Rhino.ShowObjects (arrObjects)<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to show.
          <output name="missing" optional="Optional" vartype="Number">The number of objects shown if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="SplopObject">
        <description>Rotates, scales, and wraps objects on a surface.</description>
        <OLE-syntax>Rhino.SplopObject (strObject, arrPlane, strSurface, arrParam, [, dblScale, [, dblAngle, blnCopy]]])<input name="strObject" optional="Required" vartype="String">The identifier of the  object to deform.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying  the objects to deform.
          <input name="arrPlane" optional="Required" vartype="geometrical-string-array">The source plane of the  deformation.
          <input name="strSurface" optional="Required" vartype="String">The identifier of the  surface to wrap the objects onto.
          <input name="arrParam " optional="Required" vartype="geometrical-string-array">The u,v parameter on strSurface used for orienting  the surface.
          <input name="dblScale" optional="Optional" vartype="double">he scale factor.  If omitted, the objects will not be scaled.
          <input name="dblAngle" optional="Optional" vartype="double">he rotation angle  in degrees. If omitted, the objects will not be rotated.
          <input name="blnCopy" optional="Optional" vartype="unknown-type-array">Copy the object. If omitted,  the object(s) will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the deformed object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the deformed  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="SporphObject">
        <description>Deforms an object from a source surface to a target surface.</description>
        <OLE-syntax>Rhino.SporphObject (strObject, strSurface0, strSurface1 [, arrParam0 [, arrParam1 [, blnCopy]]])<input name="strObject" optional="Required" vartype="String">The identifier of the  object to deform.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying  the objects to deform.
          <input name="strSurface0" optional="Required" vartype="String">The identifier of the  base surface.
          <input name="strSurface1" optional="Required" vartype="String">The identifier of the  target surface.
          <input name="arrParam0 " optional="Optional" vartype="geometrical-string-array">The u,v parameter on strSurface0 used for orienting  the surface.
          <input name="arrParam1" optional="Optional" vartype="geometrical-string-array">he u,v parameter on strSurface1used  for orienting the surface.
          <input name="blnCopy" optional="Optional" vartype="unknown-type-array">Copy the object. If omitted,  the object(s) will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the deformed object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the deformed  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="StretchObject">
        <description>Deforms objects toward or away from a specified axis.</description>
        <OLE-syntax>Rhino.StretchObject (strObject, arrStartPoint, arrEndPoint, arrStretchPoint [, blnCopy]]])<input name="strObject" optional="Required" vartype="String">The identifier of the  object to deform.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying  the objects to deform.
          <input name="arrStartPoint" optional="Required" vartype="single-xyz-array">The starting point of  the stretch axis.
          <input name="arrEndPoint" optional="Required" vartype="unknown-type-array">The ending pointofof  the stretch axis.
          <input name="arrStretchPoint" optional="Required" vartype="unknown-type-array">The new ending pointofof  the stretch axis.
          <input name="dblEndRadius" optional="Required" vartype="double">he new length ofof  the stretch axis.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If  omitted, the object(s) will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the deformed object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the deformed  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="TaperObject">
        <description>Deforms objects toward or away from a specified axis.</description>
        <OLE-syntax>Rhino.TaperObject (strObject, arrStartPoint, arrEndPoint, dblStartRadius, dblEndRadius, [, blnFlat [, blnInfinite [, blnCopy]]])<input name="strObject" optional="Required" vartype="String">The identifier of the  object to deform.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying  the objects to deform.
          <input name="arrStartPoint" optional="Required" vartype="single-xyz-array">The starting point of  an axis line to taper the objects around.
          <input name="arrEndPoint" optional="Required" vartype="geometrical-string-array">The ending pointof  an axis line to taper the objects around.
          <input name="dblStartRadius" optional="Required" vartype="double">The radius at the start  point. 
          <input name="dblEndRadius" optional="Required" vartype="double">he radius at the  end point. 
          <input name="blnFlat" optional="Optional" vartype="Boolean">If True, then a  one-directional, one-dimensional taper is created. The default  is False.
          <input name="blnInfinite" optional="Optional" vartype="Boolean">If False (Default),  the deformation takes place only the length of the axis. If  True, the deformation happens throughout the object, even if the  axis is shorter.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If  omitted, the object(s) will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the deformed object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the deformed  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="TransformObject">
        <description>Moves, scales, or rotates an object given a 4x4 transformation matrix. The matrix acts on the left. The following table demonstrates the transformation matrix configuration:</description>
        <OLE-syntax>Rhino.TransformObject (strObject, arrMatrix [, blnCopy])<input name="strObject" optional="Required" vartype="String">The identifier of the  object.
          <input name="arrMatrix" optional="Required" vartype="number-array">The transformation matrix  (4x4 array of numbers).
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If  omitted, the object will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the transformed object  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="TransformObjects">
        <description>Moves, scales, or rotates one or more objects given a 4x4 transformation matrix. The matrix acts on the left. The following table demonstrates the transformation matrix configuration:</description>
        <OLE-syntax>Rhino.TransformObjects (arrObjects, arrMatrix [, blnCopy])<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to transform.
          <input name="arrMatrix" optional="Required" vartype="number-array">The transformation matrix (4x4 array of numbers).
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the objects. If omitted, the objects will not be copied (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly transformed objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="TwistObject">
        <description>Deforms objects by rotating them around an axis.</description>
        <OLE-syntax>Rhino.TwistObject (strObject, arrStartPoint, arrEndPoint, dblAngle, [, blnInfinite [, blnCopy]])<input name="strObject" optional="Required" vartype="String">The identifier of the  object to deform.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying  the objects to deform.
          <input name="arrStartPoint" optional="Required" vartype="single-xyz-array">The starting point of  the rotation axis.
          <input name="arrEndPoint" optional="Required" vartype="single-xyz-array">The ending point of the  rotation axis.
          <input name="dlbAngle" optional="Required" vartype="Number">The rotation angle in  degrees.
          <input name="blnInfinite" optional="Optional" vartype="Boolean">If False  (Default), then the twisting is not constant throughout the object.  The deformation takes place only the length of the axis. The length  of the axis is important. If the axis is shorter than the object,  the twist applies only to that part of the object. If True, then  the deformation is constant throughout the object, even if the  axis is shorter than the object.
          <input name="blnCopy" optional="Optional" vartype="Boolean">Copy the object. If  omitted, the object(s) will not be copied (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the deformed object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the deformed  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="UnlockObject">
        <description>Unlocks a previously locked object. Locked object are visible, and they can be snapped to. But, they cannot be selected.</description>
        <OLE-syntax>Rhino.UnlockObject (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object to unlock.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="UnlockObjects">
        <description>Unlocks one or more objects. Locked object are visible, and they can be snapped to. But, they cannot be selected.</description>
        <OLE-syntax>Rhino.UnlockObjects (arrObjects)<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to unlock.
          <output name="missing" optional="Optional" vartype="Number">The number of objects unlocked if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="UnselectObject">
        <description>Unselects a single selected object.</description>
        <OLE-syntax>Rhino.UnselectObject (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object to unselect.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Object_Methods" name="Rhino">
      <method name="UnselectObjects">
        <description>Unselects one or more selected objects.</description>
        <OLE-syntax>Rhino.UnselectObjects (arrObjects)<input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the objects to unselect.
          <output name="missing" optional="Optional" vartype="Number">The number of objects unselected if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="IsVectorParallelTo">
        <description>Compares two vectors to see if they are parallel.</description>
        <OLE-syntax>Rhino.IsVectorParallelTo (arrVector1, arrVector2)<input name="arrVector1" optional="Required" vartype="geometrical-string-array">The 3-D vector.
          <input name="arrVector2" optional="Required" vartype="geometrical-string-array">The 3-D vector to compare to.
          <output name="missing" optional="Optional" vartype="Number">The result of the comparison if successful. The possible results are as follows:</output>
          <output name="missing" optional="Optional" vartype="Value">Description</output>
          <output name="missing" optional="Optional" vartype="-1">The vectors are anti-parallel.</output>
          <output name="missing" optional="Optional" vartype="0">The vectors are not parallel.</output>
          <output name="missing" optional="Optional" vartype="1">The vectors are parallel.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="IsVectorPerpendicularTo">
        <description>Compares two vectors to see if they are perpendicular.</description>
        <OLE-syntax>Rhino.IsVectorPerpendicularTo (arrVector1, arrVector2)<input name="arrVector1" optional="Required" vartype="geometrical-string-array">The 3-D vector.
          <input name="arrVector2" optional="Required" vartype="geometrical-string-array">The 3-D vector to compare to.
          <output name="missing" optional="Optional" vartype="Boolean">True if the vectors are perpendicular, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="IsVectorTiny">
        <description>Verifies that a vector is very short, or tiny - the x,y,z elements are less than or equal to Rhino's internal zero tolerance.</description>
        <OLE-syntax>Rhino.IsVectorTiny (arrVector)<input name="arrVector" optional="Required" vartype="geometrical-string-array">The 3-D vector  to test.
          <output name="missing" optional="Optional" vartype="Boolean">True if the vector is tiny, otherwise False,  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="IsVectorZero">
        <description>Verifies that a vector is zero, or tiny - the x,y,z elements are equal to 0.0.</description>
        <OLE-syntax>Rhino.IsVectorZero (arrVector)<input name="arrVector" optional="Required" vartype="geometrical-string-array">The 3-D vector to test.
          <output name="missing" optional="Optional" vartype="Boolean">True if the vector is zero, otherwise False, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="PointAdd">
        <description>Adds a 3-D point or a 3-D vector to a 3-D point.</description>
        <OLE-syntax>Rhino.PointAdd (arrPoint1, arrPoint2)<input name="arrPoint1" optional="Required" vartype="single-xyz-array">The 3-D point to add to.
          <input name="arrPoint2" optional="Required" vartype="single-xyz-array">The 3-D point or a 3-D vector to add.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="PointArrayBoundingBox">
        <description>Returns either a world axis-aligned or a construction plane axis-aligned bounding box of an array of 3-D point locations.</description>
        <OLE-syntax>Rhino.PointArrayBoundingBox (arrPoints [, strView [, blnWorldCoords]])<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of  3-D points.
          <input name="strView" optional="Optional" vartype="String">The title  of the view that contains the construction plane to which the  bounding box should be aligned. If omitted, a world axis-aligned  bounding box will be calculated.
          <input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane  to which the bounding box should be aligned.
          <input name="blnWorldCoords" optional="Optional" vartype="Boolean">Whether  or not to return the bounding box as world coordinates or construction  plane coordinates. The default is to return world coordinates  (True). Note, this option does not apply to world axis-aligned  bounding boxes.
          <output name="missing" optional="Optional" vartype="Array">An array of eight 3-D points that define  the bounding box if successful. Points are returned in counter-clockwise  order starting with the bottom rectangle of the box. See  the image below for details.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="PointArrayClosestPoint">
        <description>Finds the point in an array of 3-D points that is closest to a test point.</description>
        <OLE-syntax>Rhino.PointArrayClosestPoint (arrPoints, arrPoint)<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D points to test.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D test point.
          <output name="missing" optional="Optional" vartype="Number">The index of the element in the point array that is closest to the test point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="PointArrayTransform">
        <description>Transforms an array of 3-D points.</description>
        <OLE-syntax>Rhino.PointArrayTransform (arrPoints, arrXform)<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D points to transform.
          <input name="arrXform" optional="Required" vartype="unknown-type-array">A valid 4x4 transformation matrix.
          <output name="missing" optional="Optional" vartype="Array">The resulting array of 3-D points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="PointClosestObject">
        <description>Finds the object that is closest to a test point.</description>
        <OLE-syntax>Rhino.PointClosestObject (arrPoint, strObject)<input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D test  point.
          <input name="strObject" optional="Required" vartype="String">The identifier  of a point, point cloud, curve, surface, polysurface, or mesh  object to test against.
          <input name="arrObjects" optional="Required" vartype="single-xyz-array">The identifiers  of one or more point, point cloud, curve, surface, polysurface,  or mesh object to test against.
          <output name="missing" optional="Optional" vartype="Array">An array containing the results of the  closest point calculation if successful. The elements of  the array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="String">The identifier of the closest object.</output>
          <output name="missing" optional="Optional" vartype="1">Array</output>
          <output name="missing" optional="Optional" vartype="The 3-D point that is closest to  the closest object.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="PointCompare">
        <description>Compares two 3-D points.</description>
        <OLE-syntax>Rhino.PointCompare (arrPoint1, arrPoint2 [, dblTolerance])<input name="arrPoint1" optional="Required" vartype="single-xyz-array">The first 3-D point to compare.
          <input name="arrPoint2" optional="Required" vartype="single-xyz-array">The second 3-D point to compare.
          <input name="dblTolerance" optional="Optional" vartype="double">The tolerance to use for the comparison. If omitted, Rhino's internal zero tolerance is used.
          <output name="missing" optional="Optional" vartype="Boolean">True or False</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="PointDivide">
        <description>Divides a 3-D point by a value</description>
        <OLE-syntax>Rhino.PointDivide (arrPoint, dblDivide)<input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D point to divide.
          <input name="dblScale" optional="Required" vartype="double">The a non-zero value to divide.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="PointsAreCoplanar">
        <description>Verifies that an array of 3-D points are co-planar.</description>
        <OLE-syntax>Rhino.PointsAreCoplanar (arrPoints [, dblTolerance])<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of  3-D points.
          <input name="dblTolerance" optional="Optional" vartype="double">A tolerance to use when  verifying. The default is to use Rhino's internal zero tolerance.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating either coplanar  or not coplanar, respectively, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="PointScale">
        <description>Scales a 3-D point.</description>
        <OLE-syntax>Rhino.PointScale (arrPoint, dblScale)<input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D point to scale.
          <input name="dblScale" optional="Required" vartype="double">The scale factor to apply.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="PointSubtract">
        <description>Subtracts a 3-D point or a 3-D vector from a 3-D point.</description>
        <OLE-syntax>Rhino.PointSubtract (arrPoint1, arrPoint2)<input name="arrPoint1" optional="Required" vartype="single-xyz-array">The 3-D point to subtract from.
          <input name="arrPoint2" optional="Required" vartype="single-xyz-array">The 3-D point or a 3-D vector to subtract.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="PointTransform">
        <description>Transforms a 3-D point.</description>
        <OLE-syntax>Rhino.PointTransform (arrPoint, arrXform)<input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D point to transform.
          <input name="arrXform" optional="Required" vartype="unknown-type-array">A valid 4x4 transformation matrix.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="ProjectPointToMesh">
        <description>Projects one or more points onto one or more meshes.</description>
        <OLE-syntax>Rhino.ProjectPointToMesh (arrPoint, strMesh, arrDirection)<input name="arrPoints" optional="Required" vartype="single-xyz-array">A 3-D point to project.
          <input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D points to project.
          <input name="strMesh" optional="Required" vartype="String">The identifier of the mesh object to project onto.
          <input name="arrMeshes" optional="Required" vartype="geometrical-string-array">The identifiers of the mesh objects to project onto.
          <input name="arrDirection" optional="Required" vartype="multiple-xyz-array">The direction (3-D vector) to project the points.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="ProjectPointToSurface">
        <description>Projects one or more points onto one or more surfaces or polysurfaces.</description>
        <OLE-syntax>Rhino.ProjectPointToSurface (arrPoint, strSurface, arrDirection)<input name="arrPoints" optional="Required" vartype="single-xyz-array">A 3-D point to project.
          <input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D points to project.
          <input name="strSurface" optional="Required" vartype="String">The identifier of the surface or polysurface object to project onto.
          <input name="arrSurfaces" optional="Required" vartype="geometrical-string-array">The identifiers of the surface or polysurface objects to project onto.
          <input name="arrDirection" optional="Required" vartype="multiple-xyz-array">The direction (3-D vector) to project the points.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="PullPoints">
        <description>Pulls an array of points to a surface or mesh object. For more information, see the Rhino help file for information on the Pull command.</description>
        <OLE-syntax>Rhino.PullPoints (strObject, arrPoints)<input name="strObject" optional="Required" vartype="String">The identifier of the surface or mesh object that pulls.
          <input name="arrPoints" optional="Required" vartype="String">An array of 3-D points to pull.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorAdd">
        <description>Adds two 3-D vectors. With two vectors, a and b, the sum a+b is a vector that is calculated as follows:</description>
        <OLE-syntax>Rhino.VectorAdd (arrVector1, arrVector2)<input name="arrVector1" optional="Required" vartype="geometrical-string-array">The 3-D vector  to add to.
          <input name="arrVector2" optional="Required" vartype="geometrical-string-array">The 3-D vector  to add.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D vector if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorAngle">
        <description>Returns the angle, in degrees, between two 3-D vectors.</description>
        <OLE-syntax>Rhino.VectorAngle (arrVector1, arrVector2)<input name="arrVector1" optional="Required" vartype="geometrical-string-array">The first  3-D vector.
          <input name="arrVector2" optional="Required" vartype="geometrical-string-array">The second  3-D vector.
          <output name="missing" optional="Optional" vartype="Number">The angle in degrees if successfull.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorCompare">
        <description>Compares two 3-D vectors.</description>
        <OLE-syntax>Rhino.VectorCompare (arrVector1, arrVector2)<input name="arrVector1" optional="Required" vartype="geometrical-string-array">The first 3-D vector to compare.
          <input name="arrVector2" optional="Required" vartype="geometrical-string-array">The second 3-D vector to compare.
          <output name="missing" optional="Optional" vartype="-1">If arrVector1 is less than arrVector2.</output>
          <output name="missing" optional="Optional" vartype="0">If arrVector1 is equal to arrVector2.</output>
          <output name="missing" optional="Optional" vartype="1">If arrVector1 is greater than arrVector2.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorCreate">
        <description>Creates a vector from two 3-D points.</description>
        <OLE-syntax>Rhino.VectorCreate (arrPoint1, arrPoint2)<input name="arrPoint1" optional="Required" vartype="single-xyz-array">The first 3-D point.
          <input name="arrPoint2" optional="Required" vartype="single-xyz-array">The second 3-D point.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D vector if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorCrossProduct">
        <description>Calculates the cross product of two 3-D vectors. The vector a x b is orthogonal to both a and b.</description>
        <OLE-syntax>Rhino.VectorCrossProduct (arrVector1, arrVector2)<input name="arrVector1" optional="Required" vartype="geometrical-string-array">The first  3-D vector.
          <input name="arrVector2" optional="Required" vartype="geometrical-string-array">The second  3-D vector.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D vector if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorDivide">
        <description>Divides a 3-D vectors by a value</description>
        <OLE-syntax>Rhino.VectorDivide (arrVector, dblDivide)<input name="arrVector" optional="Required" vartype="geometrical-string-array">The 3-D vector to divide.
          <input name="dblDivide" optional="Required" vartype="double">The a non-zero value to divide.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D vector if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorDotProduct">
        <description>Calculates the dot product of two 3-D vectors. The dot product of two unit vectors equals the cosine of the angle between them. Vectors a and b are orthogonal if, and only if, a &#9679; b = 0. The dot product of two vectors is defined as follows:</description>
        <OLE-syntax>Rhino.VectorDotProduct (arrVector1, arrVector2)<input name="arrVector1" optional="Required" vartype="geometrical-string-array">The first  3-D vector.
          <input name="arrVector2" optional="Required" vartype="geometrical-string-array">The second  3-D vector.
          <output name="missing" optional="Optional" vartype="Double">The resulting dot product, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorLength">
        <description>Returns the length of a 3-D vector. The magnitude, or length, of a vector a = (a1, a2, a3) is calculated by:</description>
        <OLE-syntax>Rhino.VectorLength (arrVector)<input name="arrVector" optional="Required" vartype="geometrical-string-array">The 3-D vector.
          <output name="missing" optional="Optional" vartype="Double">The length of the vector, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorMultiply">
        <description>Multiplies two 3-D vectors.</description>
        <OLE-syntax>Rhino.VectorMultiply (arrVector1, arrVector2)<input name="arrVector1" optional="Required" vartype="geometrical-string-array">The first 3-D vector.
          <input name="arrVector2" optional="Required" vartype="geometrical-string-array">The second 3-D vector.
          <output name="missing" optional="Optional" vartype="Number">The resulting inner (dot) product if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorReverse">
        <description>Reverses the direction of a 3-D vector.</description>
        <OLE-syntax>Rhino.VectorReverse (arrVector)<input name="arrVector" optional="Required" vartype="geometrical-string-array">The 3-D vector.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D vector if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorRotate">
        <description>Rotates a 3-D vector.</description>
        <OLE-syntax>Rhino.VectorRotate (arrVector, dblAngle, arrAxis)<input name="arrVector" optional="Required" vartype="geometrical-string-array">The 3-D vector.
          <input name="dblAngle" optional="Required" vartype="double">The rotation angle in degrees.
          <input name="arrAxis" optional="Required" vartype="geometrical-string-array">A 3-D vector defining the axis of rotation.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D vector if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorScale">
        <description>Scales a 3-D vector.</description>
        <OLE-syntax>Rhino.VectorScale (arrVector, dblScale)<input name="arrVector" optional="Required" vartype="geometrical-string-array">The 3-D vector to scale.
          <input name="dblScale" optional="Required" vartype="double">The scale factor to apply.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D vector if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorSubtract">
        <description>Subtracts two 3-D vectors.</description>
        <OLE-syntax>Rhino.VectorSubtract (arrVector1, arrVector2)<input name="arrVector1" optional="Required" vartype="geometrical-string-array">The 3-D vector to subtract from.
          <input name="arrVector2" optional="Required" vartype="geometrical-string-array">The 3-D vector to subtract.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D vector if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorTransform">
        <description>Transforms a 3-D vector.</description>
        <OLE-syntax>Rhino.VectorTransform (arrVector, arrXform)<input name="arrVector" optional="Required" vartype="geometrical-string-array">The 3-D vector to transform.
          <input name="arrXform" optional="Required" vartype="unknown-type-array">A valid 4x4 transformation matrix.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D vector if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Point_and_Vector_Methods" name="Rhino">
      <method name="VectorUnitize">
        <description>Unitizes, or normalizes, a 3-D vector. A vector is called a unit vector when its length or magnitude is equal to one unit. Note, zero vectors cannot be unitized.</description>
        <OLE-syntax>Rhino.VectorUnitize (arrVector)<input name="arrVector" optional="Required" vartype="geometrical-string-array">The 3-D vector  to unitize.
          <output name="missing" optional="Optional" vartype="Array">The resulting 3-D vector if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="RhinoScript_Fundamentals" name="Rhino">
      <method name="Lines">
        <description>3-D lines, or chords, are represented as zero-based, one-dimensional arrays that contain two elements: the starting 3-D point and the ending 3-D point. A 3-D line can be constructed in a number of different ways. For example,</description>
      </method>
    </object>
    <object category="RhinoScript_Fundamentals" name="Rhino">
      <method name="Objects">
        <description>Rhino can create and manipulate a number of geometric objects, including points, point clouds, curves, surfaces, B-reps, meshes, lights, annotations, and references. Each object in the Rhino document is identified by a globally unique identifier, or GUID, that is generated and assigned to objects when they are created. Because identifiers are saved in the 3DM file, an object's identifier will be the same between editing sessions.</description>
      </method>
    </object>
    <object category="RhinoScript_Fundamentals" name="Rhino">
      <method name="Planes">
        <description>Several RhinoScript methods either require as an argument or return as a result a plane. Planes are represented as zero-based, one-dimensional array containing four elements: the plane's origin (3-D point), the plane's X axis direction (3-D vector), the plane's Y axis direction (3-D vector), and the plane's Z axis direction (3-D vector).</description>
      </method>
    </object>
    <object category="RhinoScript_Fundamentals" name="Rhino">
      <method name="Points">
        <description>In RhinoScript, 3-D points are represented as zero-based, one-dimensional arrays that contain three numbers. These three number represent to the X, Y and Z coordinate values of the point.</description>
      </method>
    </object>
    <object category="RhinoScript_Fundamentals" name="Rhino">
      <method name="Vectors">
        <description>Like 3-D points, 3-D vectors are also represented as zero-based, one-dimensional array that contain three numbers. Thesethree number represent to the X, Y and Z coordinate values of the vector. Note, unlike points, vectors define magnitude (length) and direction, not position. A 3-D vector can be constructed in a number of different ways. For example,</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="AnnotateCurveEndPoints">
        <description>The following example demonstrates how to annotate the end points of a curve object.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="ArrayPointsOnSurface">
        <description>The following example demonstrates how to array point objects on a surface.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="CircleFromCircumference">
        <description>The following example demonstrates how to create a circle from a center point and a circumference value.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="CopyObjectsToLayer">
        <description>The following example demonstrates how to copy selected objects to a different layer.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="CreateShortcut">
        <description>The following example demonstrates how to create a shortcut to the current document on the Windows desktop.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="CurrentModelInfo">
        <description>The following example demonstrates how to use the File System Object to retrieve information about a file.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="CurveLength">
        <description>The following example demonstrates how to determine there length of selected curve objects.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="DrawParametricCurve">
        <description>The following example demonstrates creating an interpolated curve based on a parametric equation.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="DumpDocumentData">
        <description>The following example demonstrates how to view all RhinoScript document data.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="DynamicArray">
        <description>DynamicArray is a VBScript class for maintaining dynamic arrays of data. That is, an array that "knows" how to add, insert, and delete it's elements.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="ExportPoints">
        <description>The following example demonstrates how to export the coordinates of point and point cloud objects to a text file.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="FormatMessage">
        <description>The following example functions can be useful when formatting strings of text.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="GardenPath">
        <description>For those familiar with AutoLISP&#174;, the programming language of Autodesk's AutoCAD&#174;, you are probably also familiar with the garden path tutorial. The following sample script subroutine is the RhinoScript equivalent to this tutorial routine. If you study this script carefully and compare it with the AutoLISP tutorial, you will that, other than the differences in language syntax, the two examples are very similar.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="GetArrayDim">
        <description>The following example function demonstrates how to determine the number of dimensions to an array.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="ImportCurveFromExcel">
        <description>The following example demonstrates how to create an interpolated curve from 3-D point coordinates that are read from a Microsoft Excel spreadsheet.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="MakeNurbsCurve">
        <description>The following example demonstrates how to create a NURBS curve with specified degree, control points, weights, and knot vector.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="ReadTextFile">
        <description>The following example demonstrates how to create a text file using the scripting FileSystemObject.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="RingTorus">
        <description>The following example demonstrates two different methods for generating a torus-shaped surface.</description>
      </method>
    </object>
    <object category="Sample_Scripts" name="Rhino">
      <method name="SaveView">
        <description>The following example demonstrates how to write a scripted version of Rhino 2.0's SaveView command.</description>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="AllObjects">
        <description>Returns the identifiers of all objects in the document, including reference objects. This includes object that are normal (neither hidden nor locked), hidden, and locked objects.</description>
        <OLE-syntax>Rhino.AllObjects ([blnSelect [, blnIncludeLights [, blnIncludeGrips]]])<input name="blnSelect" optional="Optional" vartype="Boolean">Select the  objects. If omitted, the objects are not selected (False).
          <input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include  light objects. If omitted, light objects are not returned  (False).
          <input name="blnIncludeGrips" optional="Optional" vartype="Boolean">Include  grips objects. If omitted, grips objects are not returned  (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="FirstObject">
        <description>Returns the identifier of the first object in the document. The first object in the document is the last object created by the user.</description>
        <OLE-syntax>Rhino.FirstObject ([blnSelect [, blnIncludeLights [, blnIncludeGrips]]])<input name="blnSelect" optional="Optional" vartype="Boolean">Select the object. If omitted, the object is not selected (False).
          <input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include light objects. If omitted, light objects are not returned (False).
          <input name="blnIncludeGrips" optional="Optional" vartype="Boolean">Include grips objects. If omitted, grips objects are not returned (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="GetCurveObject">
        <description>Prompts the user to pick, or select, a single curve object.</description>
        <OLE-syntax>Rhino.GetCurveObject ([strMessage [, blnPreSelect [, blnSelect ]]])<input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="blnPreSelect" optional="Optional" vartype="Boolean">Allow for the selection of pre-selected objects. If omitted, pre-selected objects are not accepted (False).
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the picked objects. If omitted, the objects that are picked are not selected (False).
          <output name="missing" optional="Optional" vartype="Array">An array of selection information if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">String. The identifier of the curve object.</output>
          <output name="missing" optional="Optional" vartype="1">Boolean. True if the curve was pre-selected, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="2">Number. The selection method: </output>
          <output name="missing" optional="Optional" vartype="0: selected by non-mouse method (SelAll, etc.).">1: selected by mouse click on the object.</output>
          <output name="missing" optional="Optional" vartype="2: selected by being inside of a mouse window.">3: selected by intersecting a mouse crossing window.</output>
          <output name="missing" optional="Optional" vartype="3">Array. The selection point. This value is valid only if the curve was not pre-selected and it was selected by clicking the mouse on the curve.</output>
          <output name="missing" optional="Optional" vartype="4">Number. The curve parameter of the selection point. This value is valid only if the curve was not pre-selected and it was selected by clicking the mouse on the curve.</output>
          <output name="missing" optional="Optional" vartype="5">String. The name of the view in which the selection was made.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="GetObject">
        <description>Prompts the user to pick, or select, a single object.</description>
        <OLE-syntax>Rhino.GetObject ([strMessage [, intType [, blnPreSelect [, blnSelect [, arrObjects ]]]]])<input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="intType" optional="Optional" vartype="integer">The type  or types of geometry objects (points, curves, surfaces, meshes,  etc.) that can be selected. Object types can be added together  to filter several different kinds of geometry.<input-subset name="1" optional="Optional" vartype="integer">&amp;h1</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">&amp;h4</input-subset>
            <input-subset name="16" optional="Optional" vartype="integer">&amp;h10</input-subset>
            <input-subset name="256" optional="Optional" vartype="integer">&amp;h100</input-subset>
            <input-subset name="4096" optional="Optional" vartype="integer">&amp;h1000</input-subset>
            <input-subset name="16384" optional="Optional" vartype="integer">&amp;h4000</input-subset>
            <input-subset name="65536" optional="Optional" vartype="integer">&amp;h10000</input-subset>
            <input-subset name="134217728" optional="Optional" vartype="integer">&amp;h8000000</input-subset>
            <input-subset name="536870912" optional="Optional" vartype="integer">&amp;h20000000</input-subset>
          
          <input name="blnPreSelect" optional="Optional" vartype="Boolean">Allow for  the selection of pre-selected objects. If omitted, pre-selected  objects are not accepted (False).
          <input name="blnSelect" optional="Optional" vartype="Boolean">Specifies  whether or not the picked objects will remain selected when the  function ends. If omitted, objects that were pre-picked  will remain selected and the objects that were post-picked will  not be selected.
          <input name="arrObjects" optional="Optional" vartype="unknown-string-array">An array of  strings identifying the objects that are allowed to be selected.
          <output name="missing" optional="Optional" vartype="String">The identifier of the picked object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="GetObjectEx">
        <description>Prompts the user to pick, or select, a single object.</description>
        <OLE-syntax>Rhino.GetObjectEx ([strMessage [, intType [, blnPreSelect [, blnSelect [, arrObjects ]]]]])<input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="intType" optional="Optional" vartype="integer">The type  or types of geometry objects (points, curves, surfaces, meshes,  etc.) that can be selected. Object types can be added together  to filter several different kinds of geometry.<input-subset name="1" optional="Optional" vartype="integer">&amp;h1</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">&amp;h4</input-subset>
            <input-subset name="16" optional="Optional" vartype="integer">&amp;h10</input-subset>
            <input-subset name="256" optional="Optional" vartype="integer">&amp;h100</input-subset>
            <input-subset name="4096" optional="Optional" vartype="integer">&amp;h1000</input-subset>
            <input-subset name="16384" optional="Optional" vartype="integer">&amp;h4000</input-subset>
            <input-subset name="65536" optional="Optional" vartype="integer">&amp;h10000</input-subset>
            <input-subset name="134217728" optional="Optional" vartype="integer">&amp;h8000000</input-subset>
            <input-subset name="536870912" optional="Optional" vartype="integer">&amp;h20000000</input-subset>
          
          <input name="blnPreSelect" optional="Optional" vartype="Boolean">Allow for  the selection of pre-selected objects. If omitted, pre-selected  objects are not accepted (False).
          <input name="blnSelect" optional="Optional" vartype="Boolean">Specifies  whether or not the picked objects will remain selected when the  function ends. If omitted, objects that were pre-picked  will remain selected and the objects that were post-picked will  not be selected.
          <input name="arrObjects" optional="Optional" vartype="unknown-string-array">An array of  strings identifying the objects that are allowed to be selected.
          <output name="missing" optional="Optional" vartype="Array">An array of selection information if successful.  The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">String. The identifier of the object.</output>
          <output name="missing" optional="Optional" vartype="1">Boolean. True if the object was  pre-selected, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="2">Number. The selection method: </output>
          <output name="missing" optional="Optional" vartype="0: selected by non-mouse method (SelAll,  etc.).">1: selected by mouse click on the  object.</output>
          <output name="missing" optional="Optional" vartype="2: selected by being inside of a  mouse window.">3: selected by intersecting a mouse  crossing window.</output>
          <output name="missing" optional="Optional" vartype="3">Array. The selection point. This  value is valid only if the object was not pre-selected  and it was selected by clicking the mouse on the curve.</output>
          <output name="missing" optional="Optional" vartype="4">String. The name of the view in  which the selection was made.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="GetObjects">
        <description>Prompts the user to pick or select one or more objects.</description>
        <OLE-syntax>Rhino.GetObjects ([strMessage [, intType [, blnGroup [, blnPreSelect [, blnSelect [, arrObjects [, intMin [, intMax ]]]]]]])<input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="intType" optional="Optional" vartype="integer">The type(s)  of geometry objects (points, curves, surfaces, meshes, etc.) that  can be selected. Object types can be added together to filter  several different kinds of geometry.<input-subset name="1" optional="Optional" vartype="integer">&amp;h1</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">&amp;h4</input-subset>
            <input-subset name="16" optional="Optional" vartype="integer">&amp;h10</input-subset>
            <input-subset name="256" optional="Optional" vartype="integer">&amp;h100</input-subset>
            <input-subset name="4096" optional="Optional" vartype="integer">&amp;h1000</input-subset>
            <input-subset name="16384" optional="Optional" vartype="integer">&amp;h4000</input-subset>
            <input-subset name="65536" optional="Optional" vartype="integer">&amp;h10000</input-subset>
            <input-subset name="134217728" optional="Optional" vartype="integer">&amp;h8000000</input-subset>
            <input-subset name="536870912" optional="Optional" vartype="integer">&amp;h20000000</input-subset>
          
          <input name="blnGroup" optional="Optional" vartype="Boolean">Honor object grouping. If omitted and the user picks a group, the entire group will be picked (True). Note, if intType  is set to a value other than 0 (All objects), then group selection  will be disabled.
          <input name="blnPreSelect" optional="Optional" vartype="Boolean">Allow for  the selection of pre-selected objects. If omitted, pre-selected  objects are not accepted (False).
          <input name="blnSelect" optional="Optional" vartype="Boolean">Specifies  whether or not the picked objects will remain selected when the  function ends. If omitted, objects that were pre-picked  will remain selected and the objects that were post-picked will  not be selected.
          <input name="arrObjects" optional="Optional" vartype="unknown-string-array">An array of  strings identifying the objects that are allowed to be selected.
          <input name="intMin" optional="Optional" vartype="integer">The minimum  number of objects to select. If omitted, then at least one (1)  object must be selected.
          <input name="intMax" optional="Optional" vartype="integer">The maximum number of objects to select. If 0 (Default), then the user must press enter to finish object selection. If -1, then object selection stops as soon as there are at least intMin of object selected. If &gt;0, then the picking stops when there are intMax objects. If a window pick, crossing pick, or Sel* command attempts to add more than intMax,  then the attempt is ignored.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the picked  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="GetObjectsEx">
        <description>Prompts the user to pick or select one or more objects.</description>
        <OLE-syntax>Rhino.GetObjectsEx ([strMessage [, intType [, blnGroup [, blnPreSelect [, blnSelect [, arrObjects [, intMin [, intMax ]]]]]]])<input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="intType" optional="Optional" vartype="integer">The type(s)  of geometry objects (points, curves, surfaces, meshes, etc.) that  can be selected. Object types can be added together to filter  several different kinds of geometry.<input-subset name="1" optional="Optional" vartype="integer">&amp;h1</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">&amp;h4</input-subset>
            <input-subset name="16" optional="Optional" vartype="integer">&amp;h10</input-subset>
            <input-subset name="256" optional="Optional" vartype="integer">&amp;h100</input-subset>
            <input-subset name="4096" optional="Optional" vartype="integer">&amp;h1000</input-subset>
            <input-subset name="16384" optional="Optional" vartype="integer">&amp;h4000</input-subset>
            <input-subset name="65536" optional="Optional" vartype="integer">&amp;h10000</input-subset>
            <input-subset name="134217728" optional="Optional" vartype="integer">&amp;h8000000</input-subset>
            <input-subset name="536870912" optional="Optional" vartype="integer">&amp;h20000000</input-subset>
          
          <input name="blnGroup" optional="Optional" vartype="Boolean">Honor object grouping. If omitted and the user picks a group, the entire group will be picked (True). Note, if intType  is set to a value other than 0 (All objects), then group selection  will be disabled.
          <input name="blnPreSelect" optional="Optional" vartype="Boolean">Allow for  the selection of pre-selected objects. If omitted, pre-selected  objects are not accepted (False).
          <input name="blnSelect" optional="Optional" vartype="Boolean">Specifies  whether or not the picked objects will remain selected when the  function ends. If omitted, objects that were pre-picked  will remain selected and the objects that were post-picked will  not be selected.
          <input name="arrObjects" optional="Optional" vartype="unknown-string-array">An array of  strings identifying the objects that are allowed to be selected.
          <input name="intMin" optional="Optional" vartype="integer">The minimum  number of objects to select. If omitted, then at least one (1)  object must be selected.
          <input name="intMax" optional="Optional" vartype="integer">The maximum number of objects to select. If 0 (Default), then the user must press enter to finish object selection. If -1, then object selection stops as soon as there are at least intMin of object selected. If &gt;0, then the picking stops when there are intMax objects. If a window pick, crossing pick, or Sel* command attempts to add more than intMax,  then the attempt is ignored.
          <output name="missing" optional="Optional" vartype="Array">An array that contains arrays of selection  information if successful. The array of selection information  will contain the following:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">String. The identifier of the object.</output>
          <output name="missing" optional="Optional" vartype="1">Boolean. True if the object was  pre-selected, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="2">Number. The selection method: </output>
          <output name="missing" optional="Optional" vartype="0: selected by non-mouse method (SelAll,  etc.).">1: selected by mouse click on the  object.</output>
          <output name="missing" optional="Optional" vartype="2: selected by being inside of a  mouse window.">3: selected by intersecting a mouse  crossing window.</output>
          <output name="missing" optional="Optional" vartype="3">Array. The selection point. This  value is valid only if the object was not pre-selected  and it was selected by clicking the mouse on the curve.</output>
          <output name="missing" optional="Optional" vartype="4">String. The name of the view in  which the selection was made.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="GetPointCoordinates">
        <description>Prompts the user to pick or select one or more point objects. Unlike GetObjects, this function does not return an array of point object identifiers. Rather, it returns an array of 3-D point coordinates - one for each selected point object. Note, the array returned is not in any sorted order.</description>
        <OLE-syntax>Rhino.GetPointCoordinates ([strMessage [, blnPreSelect]])<input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="blnPreSelect" optional="Optional" vartype="Boolean">Allow for the selection of pre-selected objects. If omitted, pre-selected objects are not accepted (False).
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points, one for each selected point object, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="GetSurfaceObject">
        <description>Prompts the user to pick, or select, a single surface object.</description>
        <OLE-syntax>Rhino.GetSurfaceObject ([strMessage [, blnPreSelect [, blnSelect ]]])<input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="blnPreSelect" optional="Optional" vartype="Boolean">Allow for the selection of pre-selected objects. If omitted, pre-selected objects are not accepted (False).
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the picked objects. If omitted, the objects that are picked are not selected (False).
          <output name="missing" optional="Optional" vartype="Array">An array of selection information if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">String. The identifier of the surface object.</output>
          <output name="missing" optional="Optional" vartype="1">Boolean. True if the surface was pre-selected, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="2">Number. The selection method: </output>
          <output name="missing" optional="Optional" vartype="0: selected by non-mouse method (SelAll, etc.).">1: selected by mouse click on the object.</output>
          <output name="missing" optional="Optional" vartype="2: selected by being inside of a mouse window.">3: selected by intersecting a mouse crossing window.</output>
          <output name="missing" optional="Optional" vartype="3">Array. The selection point. This value is valid only if the surface was not pre-selected and it was selected by clicking the mouse on the surface.</output>
          <output name="missing" optional="Optional" vartype="4">Array. The u,v surface parameter of the selection point. This value is valid only if the surface was not pre-selected and it was selected by clicking the mouse on the surface.</output>
          <output name="missing" optional="Optional" vartype="5">String. The name of the view in which the selection was made.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="HiddenObjects">
        <description>Returns the identifiers of all hidden objects in the document, including reference objects. Hidden objects are not visible, cannot be snapped to, and cannot be selected.</description>
        <OLE-syntax>Rhino.HiddenObjects ([blnIncludeLights [, blnIncludeGrips]])<input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include  light objects. If omitted, light objects are not returned  (False).
          <input name="blnIncludeGrips" optional="Optional" vartype="Boolean">Include  grips objects. If omitted, grips objects are not returned  (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="InvertSelectedObjects">
        <description>Inverts the current object selection. The identifiers of the newly selected objects are returned.</description>
        <OLE-syntax>Rhino.InvertSelectedObjects ([blnIncludeLights [, blnIncludeGrips]])<input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include light objects. If omitted, light objects are not returned (False).
          <input name="blnIncludeGrips" optional="Optional" vartype="Boolean">Include grips objects. If omitted, grips objects are not returned (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly selected objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="LastCreatedObjects">
        <description>Returns the identifiers of the objects that were most recently created or changed by scripting a Rhino command using the Command function. It is important to call this function immediately after calling the Command function as only the most recently created or changed object identifiers will be returned.</description>
        <OLE-syntax>Rhino.LastCreatedObjects ([blnSelect [, intFlags]])<input name="blnSelect" optional="Optional" vartype="Boolean">Select the  object. If omitted, the object is not selected (False).
          <input name="intFlags" optional="Optional" vartype="integer">The object  filters. Values can be added together to specify multiple  options.<input-subset name="0 (Default)" optional="Optional" vartype="integer">Return all objects.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Ignore block definition objects.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Ignore reference objects.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the most  recently created or changed objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="LastObject">
        <description>Returns the identifier of the last object in the document. The last object in the document is the first object created by the user.</description>
        <OLE-syntax>Rhino.LastObject ([blnSelect [, blnIncludeLights [, blnIncludeGrips]]])<input name="blnSelect" optional="Optional" vartype="Boolean">Select the object. If omitted, the object is not selected (False).
          <input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include light objects. If omitted, light objects are not returned (False).
          <input name="blnIncludeGrips" optional="Optional" vartype="Boolean">Include grips objects. If omitted, grips objects are not returned (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="LockedObjects">
        <description>Returns the identifiers of all locked objects in the document, including reference objects. Locked objects are visible and can be snapped to, but they cannot be selected.</description>
        <OLE-syntax>Rhino.LockedObjects ([blnIncludeLights [, blnIncludeGrips]])<input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include  light objects. If omitted, light objects are not returned  (False).
          <input name="blnIncludeGrips" optional="Optional" vartype="Boolean">Include  grips objects. If omitted, grips objects are not returned  (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="NextObject">
        <description>Returns the identifier of the next object in the document.</description>
        <OLE-syntax>Rhino.NextObject (strObject [, blnSelect [, blnIncludeLights [, blnIncludeGrips]]])<input name="strObject" optional="Required" vartype="String">The identifier of the object from which to get the next object.
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the object. If omitted, the object is not selected (False).
          <input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include light objects. If omitted, light objects are not returned (False).
          <input name="blnIncludeGrips" optional="Optional" vartype="Boolean">Include grips objects. If omitted, grips objects are not returned (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="NormalObjects">
        <description>Returns the identifiers of all objects that are neither hidden nor locked in the document, including reference objects. Normal objects are visible, can be snapped to, and are independent of selection state.</description>
        <OLE-syntax>Rhino.NormalObjects ([blnIncludeLights [, blnIncludeGrips]])<input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include  light objects. If omitted, light objects are not returned  (False).
          <input name="blnIncludeGrips" optional="Optional" vartype="Boolean">Include  grips objects. If omitted, grips objects are not returned  (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="ObjectsByColor">
        <description>Returns the identifiers of all objects based on the objects' color. Object colors are represented as RGB colors. An RGB color specifies the relative intensity of red, green, and blue to cause a specific color to be displayed.</description>
        <OLE-syntax>Rhino.ObjectsByColor (lngColor [, blnSelect [, blnIncludeLights]])<input name="lngColor" optional="Required" vartype="long">An RGB color value.
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the objects. If omitted, the objects are not selected (False).
          <input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include light objects. If omitted, light objects are not returned (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="ObjectsByGroup">
        <description>Returns the identifiers of all objects based on the objects' group name.</description>
        <OLE-syntax>Rhino.ObjectsByGroup (strGroup [, blnSelect])<input name="strGroup" optional="Required" vartype="String">The name of a group of objects.
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the objects. If omitted, the objects are not selected (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="ObjectsByLayer">
        <description>Returns the identifiers of all objects based on the objects' layer.</description>
        <OLE-syntax>Rhino.ObjectsByLayer (strLayer [, blnSelect])<input name="strLayer" optional="Required" vartype="String">The name  or identifier of a layer.
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the  objects. If omitted, the objects are not selected (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="ObjectsByMaterialIndex">
        <description>Returns the identifiers of all objects based on the objects' material index. An object's material index can be obtained using ObjectMaterialIndex.</description>
        <OLE-syntax>Rhino.ObjectsByMaterialIndex (intMaterialIndex [, blnSelect])<input name="intMaterialIndex" optional="Required" vartype="integer">The zero-based material index to query.
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the objects. If omitted, the  objects are not selected (False).
          <output name="missing" optional="Optional" vartype="Array">An  array of strings identifying the objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="ObjectsByMaterialSource">
        <description>Returns the identifiers of all objects based on the objects' material source. An object's material source can be obtained using ObjectMaterialSource.</description>
        <OLE-syntax>Rhino.ObjectsByMaterialSource (intMaterialSource [, blnSelect])<input name="intMaterialSource" optional="Required" vartype="integer">The material source to query, where:<input-subset name="0" optional="Required" vartype="integer">Material from layer</input-subset>
            <input-subset name="1" optional="Required" vartype="integer">Material from object</input-subset>
            <input-subset name="2" optional="Required" vartype="integer">&lt;unused&gt;</input-subset>
            <input-subset name="3" optional="Required" vartype="integer">Material from parent</input-subset>
          
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the objects. If omitted, the  objects are not selected (False).
          <output name="missing" optional="Optional" vartype="Array">An  array of strings identifying the objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="ObjectsByName">
        <description>Returns the identifiers of all objects based on the objects' user-assigned name.</description>
        <OLE-syntax>Rhino.ObjectsByName (strName [, blnSelect [, blnIncludeLights]])<input name="strName" optional="Required" vartype="String">The name of an object or objects.
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the objects. If omitted, the objects are not selected (False).
          <input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include light objects. If omitted, light objects are not returned (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="ObjectsByRegion">
        <description>Returns the identifiers of all objects based on the objects' geometry type.</description>
        <OLE-syntax>Rhino.ObjectsByRegion (arrPoints, intMode, intType, strView, blnSelect)<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of  3-D points that define the selection region. The array must  contain at least three 3-D points.
          <input name="intMode" optional="Required" vartype="integer">The selection  mode, where:<input-subset name="1" optional="Required" vartype="integer">&amp;h1</input-subset>
            <input-subset name="3" optional="Required" vartype="integer">&amp;h3</input-subset>
            <input-subset name="(Default) 0" optional="Required" vartype="integer">&amp;h0</input-subset>
            <input-subset name="2" optional="Required" vartype="integer">&amp;h2</input-subset>
            <input-subset name="8" optional="Required" vartype="integer">&amp;h8</input-subset>
            <input-subset name="32" optional="Required" vartype="integer">&amp;h20</input-subset>
            <input-subset name="512" optional="Required" vartype="integer">&amp;h200</input-subset>
            <input-subset name="8192" optional="Required" vartype="integer">&amp;h2000</input-subset>
            <input-subset name="32768" optional="Required" vartype="integer">&amp;h8000</input-subset>
            <input-subset name="131072" optional="Required" vartype="integer">&amp;h20000</input-subset>
            <input-subset name="268435456" optional="Required" vartype="integer">&amp;h10000000</input-subset>
            <input-subset name="1073741824" optional="Required" vartype="integer">&amp;h40000000</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error. Object  states can be added together to filter several different states  of geometry.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="ObjectsByType">
        <description>Returns the identifiers of all objects based on the objects' geometry type.</description>
        <OLE-syntax>Rhino.ObjectsByType (intType [, blnSelect [, intState]])<input name="intType" optional="Required" vartype="integer">The type(s)  of geometry objects (points, curves, surfaces, meshes, etc.) that  can be selected. Object types can be added together to filter  several different kinds of geometry.<input-subset name="1" optional="Required" vartype="integer">&amp;h1</input-subset>
            <input-subset name="4" optional="Required" vartype="integer">&amp;h4</input-subset>
            <input-subset name="16" optional="Required" vartype="integer">&amp;h10</input-subset>
            <input-subset name="256" optional="Required" vartype="integer">&amp;h100</input-subset>
            <input-subset name="4096" optional="Required" vartype="integer">&amp;h1000</input-subset>
            <input-subset name="16384" optional="Required" vartype="integer">&amp;h4000</input-subset>
            <input-subset name="65536" optional="Required" vartype="integer">&amp;h10000</input-subset>
            <input-subset name="134217728" optional="Required" vartype="integer">&amp;h8000000</input-subset>
            <input-subset name="536870912" optional="Required" vartype="integer">&amp;h20000000</input-subset>
          
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the  objects. If omitted, the objects are not selected (False).
          <input name="intState" optional="Optional" vartype="integer">The object  state (normal, locked, and hidden). Object states can be added  together to filter several different states of geometry.<input-subset name="1" optional="Optional" vartype="integer">&amp;h1</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">&amp;h4</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error. Object  states can be added together to filter several different states  of geometry.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="ObjectsByURL">
        <description>Returns the identifiers of all objects based on the objects' user-assigned URL.</description>
        <OLE-syntax>Rhino.ObjectsByURL (strURL [, blnSelect [, blnIncludeLights]])<input name="strURL" optional="Required" vartype="String">The URL of an object or objects.
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the objects. If omitted, the objects are not selected (False).
          <input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include light objects. If omitted, light objects are not returned (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="PointPick">
        <description>Picks objects using a point selection.</description>
        <OLE-syntax>Rhino.PointPick (arrPoint [, strView [, blnSelect]])<input name="arrPoint" optional="Required" vartype="single-xyz-array">The 3-D selection point.
          <input name="strView " optional="Optional" vartype="String">The title or identifier of the view. If  omitted, the current active view is used.
          <input name="blnSelect " optional="Optional" vartype="Boolean">Select picked objects. If omitted,  picked objects are not selected (False).
          <output name="missing" optional="Optional" vartype="Array">An array that contains arrays of picking  information if successful. The array of picking information will  contain the following:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">String. The identifier of the object.</output>
          <output name="missing" optional="Optional" vartype="1">Array. The selection point. </output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="PrevSelectedObjects">
        <description>Returns the identifiers of the previously selected objects. The operation of this function is similar to that of Rhino's SelPrev command.</description>
        <OLE-syntax>Rhino.PrevSelectedObjects ([blnSelect])<input name="blnSelect" optional="Optional" vartype="Boolean">Select the object. If omitted, the object is not selected (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the previously selected objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="ReferenceObjects">
        <description>Returns the identifiers of all reference objects attached to the document. An object from a work session reference model is a reference object. A reference object cannot be modified. An object is a reference object if, and only if, it is on a reference layer.</description>
        <OLE-syntax>Rhino.ReferenceObjects ([blnIncludeLights [, blnIncludeGrips]])<input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include light objects. If omitted, light objects are not returned (False).
          <input name="blnIncludeGrips" optional="Optional" vartype="Boolean">Include grips objects. If omitted, grips objects are not returned (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="SelectedObjects">
        <description>Returns the identifiers of all objects that are currently selected.</description>
        <OLE-syntax>Rhino.SelectedObjects ([blnIncludeLights [, blnIncludeGrips]])<input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include light objects. If omitted, light objects are not returned (False).
          <input name="blnIncludeGrips" optional="Optional" vartype="Boolean">Include grips objects. If omitted, grips objects are not returned (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="UnselectAllObjects">
        <description>Unselects all objects in the document.</description>
        <OLE-syntax>Rhino.UnselectAllObjects<output name="missing" optional="Optional" vartype="Number">The number of objects that were unselected.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="UnselectedObjects">
        <description>Returns the identifiers of all objects that are currently unselected.</description>
        <OLE-syntax>Rhino.UnselectedObjects ([blnSelect [, blnIncludeLights [, blnIncludeGrips]]])<input name="blnSelect" optional="Optional" vartype="Boolean">Select the objects. If omitted, the object is not selected (False).
          <input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include light objects. If omitted, light objects are not returned (False).
          <input name="blnIncludeGrips" optional="Optional" vartype="Boolean">Include grips objects. If omitted, grips objects are not returned (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="VisibleObjects">
        <description>Returns the identifiers of all objects that are visible in a specified view.</description>
        <OLE-syntax>Rhino.VisibleObjects ([strView [, blnSelect [, blnIncludeLights [, blnIncludeGrips]]]])<input name="strView" optional="Optional" vartype="String">The title of the view. If omitted, the current active view is used.
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the objects. If omitted, the object is not selected (False).
          <input name="blnIncludeLights" optional="Optional" vartype="Boolean">Include light objects. If omitted, light objects are not returned (False).
          <input name="blnIncludeGrips" optional="Optional" vartype="Boolean">Include grips objects. If omitted, grips objects are not returned (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Selection_Methods" name="Rhino">
      <method name="WindowPick">
        <description>Picks objects using either a window or crossing selection.</description>
        <OLE-syntax>Rhino.WindowPick (arrCorner1, arrCorner2 [, strView [, blnSelect [, blnWindow]]])<input name="arrCorner1" optional="Required" vartype="single-xyz-array">The first 3-D corner point of the selection rectangle.
          <input name="arrCorner2 " optional="Required" vartype="single-xyz-array">The second 3-D corner point of the selection rectangle.
          <input name="strView " optional="Optional" vartype="String">The title or identifier of the view. If  omitted, the current active view is used.
          <input name="blnSelect " optional="Optional" vartype="Boolean">Select picked objects. If omitted,  picked objects are not selected (False).
          <input name="blnWindow" optional="Optional" vartype="Boolean">If True (Default), then a window selection is performed.  If False, then a crossing selection is performed.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddBox">
        <description>Adds a new box-shaped polysurface to the document.</description>
        <OLE-syntax>Rhino.AddBox (arrCorners)<input name="arrCorners" optional="Required" vartype="multiple-xyz-array">An array of eight 3-D points that define the corners of the box. Points need to be in counter-clockwise order starting with the bottom rectangle of the box.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddCone">
        <description>Adds a cone-shaped polysurface to the document.</description>
        <OLE-syntax>Rhino.AddCone (arrBase, arrHeight, dblRadius [, blnCap])<input name="arrBase" optional="Required" vartype="single-xyz-array">The 3-D origin  point of the cone.
          <input name="arrPlane" optional="Required" vartype="geometrical-string-array">The cone's  base plane. The apex of cone is at plane's origin and the  axis of the cone is plane's Z axis.
          <input name="arrHeight" optional="Required" vartype="single-xyz-array">The 3-D height  point of the cone. The height point defines the height and  direction of the cone.
          <input name="dblHeight" optional="Required" vartype="double">The height of the cone. If arrPlane is specified, then the center of the arrPlane  is height * the plane's Z axis.
          <input name="dblRadius" optional="Required" vartype="double">The radius at the base of the cone. Note, tan(cone_angle) = dblRadius/ dblHeight.
          <input name="blnCap" optional="Optional" vartype="Boolean">Cap the  base of the cone. The default is to cap the cone (True).
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddCutPlane">
        <description>Adds a planar surface through objects at a designated location. For more information, see the Rhino help file for the CutPlane command.</description>
        <OLE-syntax>Rhino.AddCutPlane (arrObjects, arrStartPoint, arrEndPoint [, arrNormal])<input name="arrObjects" optional="Required" vartype="geometrical-string-array">The identifiers  of objects that the cutting planes will pass through.
          <input name="arrStartPoint" optional="Required" vartype="geometrical-string-array">The start  of the line that defines the cutting plane.
          <input name="arrEndPoint" optional="Required" vartype="geometrical-string-array">The end of  the line that defines the cutting plane.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddCylinder">
        <description>Adds a cylinder to the document.</description>
        <OLE-syntax>Rhino.AddCylinder (arrBase, arrHeight, dblRadius [, blnCap [, blnExtrusion]])<input name="arrBase" optional="Required" vartype="single-xyz-array">The 3-D base  point of the cylinder.
          <input name="arrPlane" optional="Required" vartype="geometrical-string-array">The base plane  of the cylinder.
          <input name="arrHeight" optional="Required" vartype="single-xyz-array">The 3-D height  point of the cylinder. The height point defines the height  and direction of the cylinder.
          <input name="dblHeight" optional="Required" vartype="double">The height  of the cylinder.
          <input name="dblRadius" optional="Required" vartype="double">The radius  of the cylinder.
          <input name="blnCap" optional="Optional" vartype="Boolean">Cap the  ends of the cylinder. If omitted, the ends of the cylinder  will be capped (True).
          <input name="blnExtrusion" optional="Optional" vartype="Boolean">Create a  lightweight extrusion. The default is to create a surface (uncapped)  or a polysurface (capped) (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddEdgeSrf">
        <description>Creates a surface from 2, 3, or 4 edge curves.</description>
        <OLE-syntax>Rhino.AddEdgeSrf (arrObjects)<input name="arrObjects" optional="Required" vartype="geometrical-string-array">An array of 2, 3, or 4 curve object identifiers.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddExtrusion">
        <description>Adds a lightweight extrusion object to the document. Lightweight extrusion objects use less memory, mesh faster, and save smaller than the traditional polysurfaces. For more information on lightweight extrusions, see the Rhino help file.</description>
        <OLE-syntax>Rhino.AddExtrusion (strCurve, dblHeight, [, blnCap [, arrPlane]])<input name="strCurve" optional="Required" vartype="String">The identifier  of an existing curve object.
          <input name="dblHeight" optional="Required" vartype="double">The height  of the extrusion. If height &gt; 0, the bottom of the extrusion  will be in plane and the top will be height units above the plane.  If height &lt; 0, the top of the extrusion will be in plane and  the bottom will be height units below the plane.
          <input name="blnCap " optional="Optional" vartype="Boolean">If the curve is closed and blnCap is  true, then the resulting extrusion is capped. The default  is not to cap (False).
          <input name="arrPlane" optional="Optional" vartype="geometrical-string-array">The extrusion plane. If omitted and strCurve is a planar curve, then the curve's plane is used as the extrusion plane. If specified, strCurve  will be projected to this plane and the results used as the profile  curve.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddLoftSrf">
        <description>Adds a surface created by lofting curves to the document.</description>
        <OLE-syntax>Rhino.AddLoftSrf (arrObjects [, arrStartPt [, arrEndPt [, intType [, intStyle [, nValue [, blnClosed]]]]]])<input name="arrObjects" optional="Required" vartype="geometrical-string-array">An ordered array of strings identifying the curve objects to loft.
          <input name="arrStartPt" optional="Optional" vartype="single-xyz-array">The starting point of the loft.
          <input name="arrEndPt" optional="Optional" vartype="single-xyz-array">The ending point of the loft.
          <input name="intType" optional="Optional" vartype="integer">The type of loft. The default loft type is Normal (0). The possible loft types are as follows:<input-subset name="0" optional="Optional" vartype="integer">Normal. Uses chord-length parameterization in the loft direction.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Loose. The surface is allowed to move away from the original curves to make a smoother surface. The surface control points are created at the same locations as the control points of the loft input curves.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Straight. The sections between the curves are straight. This is also known as a ruled surface.</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Tight. The surface sticks closely to the original curves. Uses square root of chord-length parameterization in the loft direction.</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Developable. Creates a separate developable surface or polysurface from each pair of curves.</input-subset>
          
          <input name="intStyle" optional="Optional" vartype="integer">The simplify method of the loft. The default value is None (0). The possible loft simplify methods are as follows:<input-subset name="0" optional="Optional" vartype="integer">None. Does not simplify.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Rebuild. Rebuilds the shape curves before lofting.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Refit. Refits the shape curves to a specified tolerance.</input-subset>
          
          <input name="nValue" optional="Optional" vartype="Number">A value based on the specified intStyle. If intStyle=1 (Rebuild), then nValue is the number of control point used to rebuild. If intstyle=1 is specified and this argument is omitted, then curves will be rebuilt using 10 control points. If intStyle=2 (Refit), then nValue is the tolerance used to rebuild. If intstyle=2 is specified and this argument is omitted, then the document's absolute tolerance us used for refitting.
          <input name="blnClosed" optional="Optional" vartype="Boolean">Creates a closed surface, continuing the surface past the last curve around to the first curve. Available when you have selected three shape curves. The default value is not to create a closed surface (False).
          <output name="missing" optional="Optional" vartype="Array">An array containing the identifiers of the new surface objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddNetworkSrf">
        <description>Creates a surface from a network of crossing curves. Note: All curves in one direction have to cross all curves in the other direction and cannot cross each other.</description>
        <OLE-syntax>Rhino.AddNetworkSrf (arrCurves [, intContinuity [, dblEdgeTolerance [, dblInteriorTolerance [, dblAngleTolerance]]]])<input name="arrCurves " optional="Required" vartype="geometrical-string-array">The identifiers of the curve object from which  to create the surface. Note, the curves will be automatically  sorted and ordered into U and V direction curves.
          <input name="intContinuity " optional="Optional" vartype="integer">The continuity, which determines how the edges  match the input geometry. The possible values are:<input-subset name="0" optional="Optional" vartype="integer">Loose. The surface will match to  the input edge curves with less accuracy.</input-subset>
            <input-subset name="1 (Default)" optional="Optional" vartype="integer">Position (G0 continuity) measures  location only. If the end points of each curve are in  the same location in space, the curves are position continuous  (G0) at the ends.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Tangency (G1 continuity) measures  position and curve direction at the ends. The direction  is determined by the first and second point on each curve.  If these all fall on a line then two curves are tangent  (G1) at the ends. Curves and surfaces with G1 continuity  are also G0 continuous.</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Curvature continuity (G2 continuity)  between two curves measures position, direction, and radius  of curvature at the ends. If the radius of curvature is  the same at the common end point, curves are curvature  continuous (G2). This condition is not easy to determine  by just looking at where the points are located. Curves  and surfaces with G2 continuity are also G1 and therefore  G0 continuous.</input-subset>
          
          <input name="dblEdgeTolerance " optional="Optional" vartype="double">Sets the tolerance for the edge curves. The  edges of the surface will be within this value from the edge curves.  The default is 0.0.
          <input name="dblInteriorTolerance " optional="Optional" vartype="double">Sets the tolerance for the interior curves.  The interior of the curve's surface will be within this value.  If the curves themselves are farther apart from each other than  the tolerance values, the best guess is made at the surface.The  default is 0.0.
          <input name="dblAngleTolerance" optional="Optional" vartype="double">If the edge curves are surface edges, and  you want the surface matching the adjacent surfaces with tangency  or curvature continuity, this is the accuracy used to match the  surface normals.The default is 0.0.
          <output name="missing" optional="Optional" vartype="String">The  identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddNetworkSrfEx">
        <description>Creates a surface from a network of crossing curves. Note: All curves in one direction have to cross all curves in the other direction and cannot cross each other.</description>
        <OLE-syntax>Rhino.AddNetworkSrf (arrUCurves, arrUContinuity, arrVCurves, arrVContinuity [, dblEdgeTolerance [, dblInteriorTolerance [, dblAngleTolerance]]])<input name="arrUCurves " optional="Required" vartype="geometrical-string-array">The identifiers of the curve object, in the  U direction, from which to create the surface. Note, the curves  must be sorted and ordered.
          <input name="arrUContinuity " optional="Required" vartype="geometrical-string-array">Two values identifying continuity of the first  and last U (edge) curve segment. The possible values are:<input-subset name="0" optional="Required" vartype="geometrical-string-array">Loose. The surface will match to  the input edge curves with less accuracy.</input-subset>
            <input-subset name="1" optional="Required" vartype="geometrical-string-array">Position (G0 continuity) measures  location only. If the end points of each curve are in  the same location in space, the curves are position continuous  (G0) at the ends.</input-subset>
            <input-subset name="2" optional="Required" vartype="geometrical-string-array">Tangency (G1 continuity) measures  position and curve direction at the ends. The direction  is determined by the first and second point on each curve.  If these all fall on a line then two curves are tangent  (G1) at the ends. Curves and surfaces with G1 continuity  are also G0 continuous.</input-subset>
            <input-subset name="3" optional="Required" vartype="geometrical-string-array">Curvature continuity (G2 continuity)  between two curves measures position, direction, and radius  of curvature at the ends. If the radius of curvature is  the same at the common end point, curves are curvature  continuous (G2). This condition is not easy to determine  by just looking at where the points are located. Curves  and surfaces with G2 continuity are also G1 and therefore  G0 continuous.</input-subset>
          
          <input name="arrVCurves " optional="Required" vartype="geometrical-string-array">The identifiers of the curve object, in the  V direction, from which to create the surface. Note, the curves  must be sorted and ordered.
          <input name="arrVContinuity " optional="Required" vartype="geometrical-string-array">Two values identifying continuity of the first  and last V (edge) curve segment. The possible values are:<input-subset name="0" optional="Required" vartype="geometrical-string-array">Loose. The surface will match to  the input edge curves with less accuracy.</input-subset>
            <input-subset name="1" optional="Required" vartype="geometrical-string-array">Position (G0 continuity) measures  location only. If the end points of each curve are in  the same location in space, the curves are position continuous  (G0) at the ends.</input-subset>
            <input-subset name="2" optional="Required" vartype="geometrical-string-array">Tangency (G1 continuity) measures  position and curve direction at the ends. The direction  is determined by the first and second point on each curve.  If these all fall on a line then two curves are tangent  (G1) at the ends. Curves and surfaces with G1 continuity  are also G0 continuous.</input-subset>
            <input-subset name="3" optional="Required" vartype="geometrical-string-array">Curvature continuity (G2 continuity)  between two curves measures position, direction, and radius  of curvature at the ends. If the radius of curvature is  the same at the common end point, curves are curvature  continuous (G2). This condition is not easy to determine  by just looking at where the points are located. Curves  and surfaces with G2 continuity are also G1 and therefore  G0 continuous.</input-subset>
          
          <input name="dblEdgeTolerance " optional="Optional" vartype="double">Sets the tolerance for the edge curves. The  edges of the surface will be within this value from the edge curves.  The default is 0.0.
          <input name="dblInteriorTolerance " optional="Optional" vartype="double">Sets the tolerance for the interior curves.  The interior of the curve's surface will be within this value.  If the curves themselves are farther apart from each other than  the tolerance values, the best guess is made at the surface.The  default is 0.0.
          <input name="dblAngleTolerance" optional="Optional" vartype="double">If the edge curves are surface edges, and  you want the surface matching the adjacent surfaces with tangency  or curvature continuity, this is the accuracy used to match the  surface normals.The default is 0.0.
          <output name="missing" optional="Optional" vartype="String">The  identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddNurbsSurface">
        <description>Adds a NURBS surface object to the document.</description>
        <OLE-syntax>Rhino.AddNurbsSurface (arrPointCount, arrPoints, arrKnotU, arrKnotV, arrDegree [, arrWeights])<input name="arrPointCount" optional="Required" vartype="multiple-xyz-array">The number  of control points in the U and V directions.
          <input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of  3-D control points.
          <input name="arrKnotsU" optional="Required" vartype="geometrical-string-array">The knot values for the surface in the U direction. The array must contain arrPointCount(0) + arrDegree(0) - 1 elements.
          <input name="arrKnotsV" optional="Required" vartype="geometrical-string-array">The knot values for the surface in the V direction. The array must contain arrPointCount(1) + arrDegree(1) - 1 elements.
          <input name="arrDegree" optional="Required" vartype="geometrical-string-array">The degree  of the surface in the U and V directions. The degree in  each direction must be greater than or equal to one (1).
          <input name="arrWeights" optional="Required" vartype="number-array">The weight values for the surface. The number of elements in arrWeights equal the number of elements in arrPoints.  Weight values must be greater than zero (0).
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddPatch">
        <description>Fits a surface through curve, point, point cloud, and mesh objects.</description>
        <OLE-syntax>Rhino.AddPatch (arrObjects, intUSpans, intVSpans [, dblTolerance [, blnTrim [, dblPointSpacing [, dblFlexibility [, dblSurfacePull [, blnFixEdges]]]]]]])<input name="arrObjects " optional="Required" vartype="single-xyz-array">An array of object identifiers that indicate  the objects to use for the patch fitting. Acceptable object types  include curves, points, point clouds, and meshes.
          <input name="intUSpans " optional="Required" vartype="integer">The U direction span count for the automatically  generated surface.
          <input name="intVSpans " optional="Required" vartype="integer">The V direction span count for the automatically  generated surface. 
          <input name="strSurface " optional="Required" vartype="String">The identifier of the starting surface. It  is best if you create a starting surface that is similar in shape  to the surface you are trying to create.
          <input name="dblTolerance " optional="Optional" vartype="double">The tolerance used by input analysis functions.  If omitted, Rhino's document absolute tolerance is used.
          <input name="blnTrim " optional="Optional" vartype="Boolean">Try to find an outside curve and trims the  surface to it. The default value is True.
          <input name="dblPointSpacing " optional="Optional" vartype="double">The basic distance between points sampled  from input curves. The default value is 0.1.
          <input name="dblFlexibility" optional="Optional" vartype="double">Determines the behavior of the surface in  areas where its not otherwise controlled by the input. Lower  numbers make the surface behave more like a stiff material, higher,  more like a flexible material. That is, each span is made  to more closely match the spans adjacent to it if there is no  input geometry mapping to that area of the surface when the flexibility  value is low. The scale is logarithmic. For example,  numbers around 0.001 or 0.1 make the patch pretty stiff and numbers  around 10 or 100 make the surface flexible. The default  value is 1.0.
          <input name="dblSurfacePull " optional="Optional" vartype="double">Similar to stiffness, but applies to the starting  surface. The bigger the pull, the closer the resulting surface  shape will be to the starting surface. The default value  is 1.0.
          <input name="blnFixEdges" optional="Optional" vartype="boolean">Clamps the edges of the starting surface in  place. This option is useful if you are using a curve or points  for deforming an existing surface, and you do not want the edges  of the starting surface to move. The default if False.
          <output name="missing" optional="Optional" vartype="String">The  identifier of the new surface object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddPipe">
        <description>Creates a singled-walled surface with a circular profile around a curve.</description>
        <OLE-syntax>Rhino.AddPipe (strCurve, arrParameters, arrRadii [, intType [, intCap [, blnFit]]])<input name="strCurve" optional="Required" vartype="String">The identifier of the path curve object.
          <input name="arrParameters" optional="Required" vartype="geometrical-string-array">An array of one or more curve parameters where  changes in radius occur.
          <input name="arrRadii " optional="Required" vartype="geometrical-string-array">An array of radii; one at each curve parameter in arrParameters.
          <input name="intType " optional="Optional" vartype="integer">The type of shape blending, where:<input-subset name="0 (Default)" optional="Optional" vartype="integer">Local. The pipe radius stays  constant at the ends and changes more rapidly in the middle.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Global. The radius is linearly  blended from one end to the other, creating pipes that  taper from one radius to the other.</input-subset>
          
          <input name="intCap " optional="Optional" vartype="integer">The end cap mode, where:<input-subset name="0 (Default)" optional="Optional" vartype="integer">None.</input-subset>
            <input-subset name="1 (Default)" optional="Optional" vartype="integer">Flat. Capped with a planar  surface.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Round. Capped with hemispherical  surface.</input-subset>
          
          <input name="blnFit" optional="Optional" vartype="Boolean">If the curve is a polycurve of lines and  arcs, the curve is fit and a single surface is created; otherwise  the result is a polysurface with joined surfaces created from  the polycurve segments. The default is not to fit (False).
          <output name="missing" optional="Optional" vartype="Array">The identifier of the new objects if successful. If strCurve is a line segment, arrParameters contains two curve parameters, arrRadii contains two identical values, and intCap  is either 0 (None) or 1 (Flat), then an extrusion object  will be returned. Otherwise, a polysurface object will be returned.  Note, it is possible for more than one object to be returned  (when it is not possible to miter sharp corners, for example).</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddPlanarSrf">
        <description>Creates one or more surfaces from planar curves.</description>
        <OLE-syntax>Rhino.AddPlanarSrf (arrObjects)<input name="arrObjects" optional="Required" vartype="geometrical-string-array">An array of curve object identifiers.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the new objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddPlaneSurface">
        <description>Creates a plane surface.</description>
        <OLE-syntax>Rhino.AddPlaneSurface (arrPlane, dblDU, dblDV)<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane.
          <input name="dblDU" optional="Required" vartype="double">The magnitude in the U direction.
          <input name="dblDV" optional="Required" vartype="double">The magnitude in the V direction.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddRailRevSrf">
        <description>Create a surface by revolving a profile curve along a rail curve.</description>
        <OLE-syntax>Rhino.AddRailRevSrf (strProfile, strRail, arrAxis)<input name="strProfile" optional="Required" vartype="String">The identifier of the profile curve.
          <input name="strRail" optional="Required" vartype="String">The identifier of the rail curve.
          <input name="arrAxis" optional="Required" vartype="single-xyz-array">An array of two 3-D points identifying the start point and end point of the rail revolve axis.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddRevSrf">
        <description>Create a surface by revolving a curve around an axis.</description>
        <OLE-syntax>Rhino.AddRevSrf (strCurve, arrAxis [, dblStartAngle [, dblEndAngle]])<input name="strProfile" optional="Required" vartype="String">The identifier of the curve to revolve.
          <input name="arrAxis" optional="Required" vartype="single-xyz-array">An array of two 3-D points identifying the start point and end point of the rail revolve axis.
          <input name="dblStartAngle" optional="Optional" vartype="double">The starting angle. If omitted, an angle of 0.0 is used.
          <input name="dblEndAngle" optional="Optional" vartype="double">The ending angle. If omitted, an angle of 360.0 is used.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddSphere">
        <description>Adds a spherical surface to the document.</description>
        <OLE-syntax>Rhino.AddSphere (arrCenter, dblRadius)<input name="arrCenter" optional="Required" vartype="single-xyz-array">The center point of the sphere.
          <input name="arrPlane" optional="Required" vartype="single-xyz-array">An equatorial plane. The origin of the plane will be the center point of the sphere.
          <input name="dblRadius" optional="Required" vartype="double">The radius of the sphere in current model units.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddSrfContourCrvs">
        <description>Adds a spaced series of planar curves resulting from the intersection of a defined cutting planes through a surface or a polysurface. For more information, see the Rhino help file for details on the Contour command.</description>
        <OLE-syntax>Rhino.AddSrfContourCrvs (strObject, arrStartPoint, arrEndPoint [, dblInterval])<input name="strObject" optional="Required" vartype="String">The identifier of a surface or polysurface object.
          <input name="arrStartPoint" optional="Required" vartype="single-xyz-array">The 3-D starting point of a center line.
          <input name="arrEndPoint" optional="Required" vartype="single-xyz-array">The 3-D ending point of a center line.
          <input name="arrPlane" optional="Required" vartype="geometrical-string-array">A plane that defines the cutting plane.
          <input name="dblInterval" optional="Optional" vartype="double">The distance between contour curves. If omitted, the interval will be equal to the diagonal distance of the object's bounding box divided by 50.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly created contour curves if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddSrfControlPtGrid">
        <description>Creates a surface from a grid of control points.</description>
        <OLE-syntax>Rhino.AddSrfControlPtGrid (arrCount, arrPoints [, arrDegree])<input name="arrCount" optional="Required" vartype="multiple-xyz-array">The number of control points in the U and V directions.
          <input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D control points.
          <input name="arrDegree" optional="Optional" vartype="geometrical-string-array">The degree of the surface in the U and V directions. If omitted, the degree of the new surface in the U and V directions will be 3.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddSrfPt">
        <description>Creates a new surface from either 3 or 4 corner points.</description>
        <OLE-syntax>Rhino.AddSrfPt (arrPoints)<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of either 3 or 4 corner points.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddSrfPtGrid">
        <description>Creates a surface from a grid of points.</description>
        <OLE-syntax>Rhino.AddSrfPtGrid (arrCount, arrPoints [, arrDegree [, arrClosed]])<input name="arrCount" optional="Required" vartype="multiple-xyz-array">The number  of points in the U and V directions.
          <input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of  3-D points.
          <input name="arrDegree" optional="Optional" vartype="geometrical-string-array">The degree  of the surface in the U and V directions. If omitted, the  degree of the new surface in the U and V directions will be 3.
          <input name="arrClosed" optional="Optional" vartype="geometrical-string-array">Whether or  not the surface is closed in the U and V directions. If  omitted, the new surface will not be closed in either the U or  V directions.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddSrfSectionCrvs">
        <description>Adds planar curves resulting from the intersection of a defined cutting plane through a surface or a polysurface. For more information, see the Rhino help file for details on the Section command.</description>
        <OLE-syntax>Rhino.AddSrfSectionCrvs (strObject, arrPlane)<input name="strObject" optional="Required" vartype="String">The identifier of a surface or polysurface object.
          <input name="arrPlane" optional="Required" vartype="geometrical-string-array">A plane that defines the cutting plane.
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly created section curves if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddSweep1">
        <description>Adds a surface created through profile curves that define the surface shape and one curve that defines a surface edge. For more details on this method, see the Rhino help file for the Sweep1 command.</description>
        <OLE-syntax>Rhino.AddSweep1 (strRail, arrShapes [, arrStartPt [, arrEndPt [, blnClosed [, intStyle [, vaStyleArg [, intSimplify [, vaSimplifyArg]]]]]]])<input name="strRail" optional="Required" vartype="String">The identifier of the rail curve.
          <input name="arrShapes" optional="Required" vartype="geometrical-string-array">An array of strings identifying one or more shape, or cross section, curves.
          <input name="arrStartPt" optional="Optional" vartype="single-xyz-array">The 3-D starting point of the surface.
          <input name="arrEndPt" optional="Optional" vartype="single-xyz-array">The 3-D ending point of the surface.
          <input name="blnClosed" optional="Optional" vartype="Boolean">If True, then create a closed surface, continuing the surface past the last curve around to the first curve. This option is only available after you select two cross-section curves. The default value is False.
          <input name="intStyle" optional="Optional" vartype="Integer">The sweep style, where 0 = Freeform and 1 = Roadlike. The default value is 0 = Freeform.
          <input name="vaStyleArg" optional="Optional" vartype="Variant">If intStyle = 1 (Roadlike), then this argument is a 3-D vector identifying the planar up direction for the sweep.
          <input name="intSimplify" optional="Optional" vartype="Integer">Cross section curve options, where 0 = Do Not Simplify, 1 = Refit, and 2 = Rebuild. The default value is 0 = Do Not Simplify.
          <input name="vaSimplifyArg" optional="Optional" vartype="Variant">If intSimplify = 1 (Refit), then this argument is a number specifying the refit tolerance. If intSimplify = 2 (Rebuild), then this argument is a number specifying the number of control points to rebuild the shape curves.
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the new surface objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddSweep2">
        <description>Adds a surface created through profile curves that define the surface shape and two curves that define the surface edges. For more details on this method, see the Rhino help file for the Sweep2 command.</description>
        <OLE-syntax>Rhino.AddSweep2 (arrRails, arrShapes [, arrStartPt [, arrEndPt [, blnClosed [, blnSimpleSweep [, blnMaintainHeight [, intSimplify [, vaSimplifyArg]]]]]]])<input name="arrRails" optional="Required" vartype="String">An array of strings identifying two rail curves.
          <input name="arrShapes" optional="Required" vartype="geometrical-string-array">An array of strings identifying one or more shape, or cross section, curves.
          <input name="arrStartPt" optional="Optional" vartype="single-xyz-array">The 3-D starting point of the surface.
          <input name="arrEndPt" optional="Optional" vartype="single-xyz-array">The 3-D ending point of the surface.
          <input name="blnClosed" optional="Optional" vartype="Boolean">If True, then create a closed surface, continuing the surface past the last curve around to the first curve. This option is only available after you select two cross-section curves. The default value is False.
          <input name="blnSimpleSweep" optional="Optional" vartype="Boolean">If True, then create surfaces using exact input. This option generates simpler surfaces in cases when the curves are perfectly set up. The default value is False.
          <input name="blnMaintainHeight" optional="Optional" vartype="Boolean">By default, shape curves normally scale in both the height and width dimensions. To remove the association between the height scaling from the width scaling, set this value to True. The default value is False.
          <input name="intSimplify" optional="Optional" vartype="Integer">Cross section curve options, where 0 = Do Not Simplify, 1 = Refit, and 2 = Rebuild. The default value is 0 = Do Not Simplify.
          <input name="vaSimplifyArg" optional="Optional" vartype="Variant">If intSimplify = 1 (Refit), then this argument is a number specifying the refit tolerance. If intSimplify = 2 (Rebuild), then this argument is a number specifying the number of control points to rebuild the shape curves.
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the new surface objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddThickPipe">
        <description>Creates a double-walled surface with a circular profile around a curve.</description>
        <OLE-syntax>Rhino.AddThickPipe (strCurve, arrParameters, arrRadii0, arrRadii1 [, intType [, intCap [, blnFit]]])<input name="strCurve" optional="Required" vartype="String">The identifier of the path curve object.
          <input name="arrParameters" optional="Required" vartype="geometrical-string-array">An array of one or more curve parameters where  changes in radius occur.
          <input name="arrRadii0" optional="Required" vartype="geometrical-string-array">An array of radii for the first wall; one at each curve parameter in arrParameters.
          <input name="arrRadii1" optional="Required" vartype="geometrical-string-array">An array of radii for the second wall; one at each curve parameter in arrParameters.
          <input name="intType " optional="Optional" vartype="integer">The type of shape blending, where:<input-subset name="0 (Default)" optional="Optional" vartype="integer">Local. The pipe radius stays  constant at the ends and changes more rapidly in the middle.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Global. The radius is linearly  blended from one end to the other, creating pipes that  taper from one radius to the other.</input-subset>
          
          <input name="intCap " optional="Optional" vartype="integer">The end cap mode, where:<input-subset name="0 (Default)" optional="Optional" vartype="integer">None.</input-subset>
            <input-subset name="1 (Default)" optional="Optional" vartype="integer">Flat. Capped with a planar  surface.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Round. Capped with hemispherical  surface.</input-subset>
          
          <input name="blnFit" optional="Optional" vartype="Boolean">If the curve is a polycurve of lines and  arcs, the curve is fit and a single surface is created; otherwise  the result is a polysurface with joined surfaces created from  the polycurve segments. The default is not to fit (False).
          <output name="missing" optional="Optional" vartype="Array">The identifier of the new objects if successful. If strCurve is a line segment, arrParameters contains two curve parameters, arrRadii0 and arrRadii1 contain two identical values, and intCap  is 1 (Flat), then an extrusion object will be returned. Otherwise,  a polysurface object will be returned. Note, it is possible  for more than one object to be returned (if intCap is 0 (None)  or when it is not possible to miter sharp corners, for example).</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddTorus">
        <description>Adds a torus-shaped revolved surface to the document.</description>
        <OLE-syntax>Rhino.AddTorus (arrBase, dblMajorRadius, dblMinorRadius [, arrDirection])<input name="arrBase" optional="Required" vartype="single-xyz-array">The 3-D origin point of the torus.
          <input name="arrPlane" optional="Required" vartype="geometrical-string-array">The base plane of the torus.
          <input name="dblMajorRadius" optional="Required" vartype="double">The major radius of the torus. The major radius must be larger than the minor radius.
          <input name="dblMinorRadius" optional="Required" vartype="double">The minor radius of the torus. The minor radius must be greater than zero.
          <input name="arrDirection" optional="Optional" vartype="single-xyz-array">A point that defines the direction of the torus. If omitted, a torus that is parallel to the world XY plane is created.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="AddTruncatedCone">
        <description>Adds a truncated cone-shaped polysurface to the document.</description>
        <OLE-syntax>Rhino.AddTruncatedCone (arrPoint, dblRadius1, dblHeight, dblRadius2 [, blnCap])<input name="arrPoint" optional="Required" vartype="unknown-type-array">The origin  of the truncated cone's base circle.
          <input name="arrPlane" optional="Required" vartype="single-xyz-array">The truncated  cone's base plane. The origin of the plane will be the center  point of the base circle.
          <input name="dblRadius1" optional="Required" vartype="double">The radius  of the truncated cone's base circle.
          <input name="dblHeight" optional="Required" vartype="double">The height  of the truncated cone.
          <input name="dblRadius2" optional="Required" vartype="double">The radius  at the top of the cone.
          <input name="blnCap" optional="Optional" vartype="Boolean">Cap the  truncated cone. The default is to cap the truncated cone  (True).
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="BooleanDifference">
        <description>Performs a Boolean difference operation on two sets of input surfaces and polysurfaces. For more details, see the BooleanDifference command in the Rhino help file.</description>
        <OLE-syntax>Rhino.BooleanDifference (arrInput0, arrInput1 [, blnDelete])<input name="arrInput0" optional="Required" vartype="geometrical-string-array">The identifiers of the surfaces or polysurfaces to subtract from.
          <input name="arrInput1" optional="Required" vartype="geometrical-string-array">The identifiers of the surfaces or polysurfaces to be subtracted.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete all input objects. The default is to delete all input objects (True).
          <output name="missing" optional="Optional" vartype="Array">An array containing the identifiers of the newly created objects, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="BooleanIntersection">
        <description>Performs a Boolean intersection operation on two sets of input surfaces and polysurfaces. For more details, see the BooleanIntersection command in the Rhino help file.</description>
        <OLE-syntax>Rhino.BooleanIntersection (arrInput0, arrInput1 [, blnDelete])<input name="arrInput0" optional="Required" vartype="geometrical-string-array">The identifiers of the surfaces or polysurfaces.
          <input name="arrInput1" optional="Required" vartype="geometrical-string-array">The identifiers of the surfaces or polysurfaces.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete all input objects. The default is to delete all input objects (True).
          <output name="missing" optional="Optional" vartype="Array">An array containing the identifiers of the newly created objects, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="BooleanUnion">
        <description>Performs a Boolean union operation on a set of input surfaces and polysurfaces. For more details, see the BooleanUnion command in the Rhino help file.</description>
        <OLE-syntax>Rhino.BooleanUnion (arrInput [, blnDelete])<input name="arrInput" optional="Required" vartype="geometrical-string-array">The identifiers of the surfaces or polysurfaces to union.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete all input objects. The default is to delete all input objects (True).
          <output name="missing" optional="Optional" vartype="Array">An array containing the identifiers of the newly created objects, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="BoxPoints">
        <description>Returns the corner points of a polysurface box. Points are returned in counter-clockwise order starting with the bottom rectangle of the box.</description>
        <OLE-syntax>Rhino.BoxPoints (strObject)<input name="arrCorners" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Array">An array of eight corner points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="BrepClosestPoint">
        <description>Returns the point on a surface or polysurface that is closest to a test point. This function works on both untrimmed and trimmed surfaces.</description>
        <OLE-syntax>Rhino.BrepClosestPoint (strObject, arrPoint [, blnFaces])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The test,  or sampling, point.
          <input name="blnFaces" optional="Optional" vartype="Boolean">If True,  then the closest point calculations will be restricted to faces.  Of omitted or False (Default), then all components will be used  in the calculation.
          <output name="missing" optional="Optional" vartype="Array">An array of closest point information if  successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array (X, Y, Z)">The 3-D point at the parameter  value of the closest point.</output>
          <output name="missing" optional="Optional" vartype="1">Array (U, V)</output>
          <output name="missing" optional="Optional" vartype="Parameter values of closest point.  Note, V is 0 if the component index type is Brep  edge or vertex.">2</output>
          <output name="missing" optional="Optional" vartype="Array (type, index)">The type and index of the Brep  component that contains the closest point. Possible types  are:</output>
          <output name="missing" optional="Optional" vartype="Types">Description</output>
          <output name="missing" optional="Optional" vartype="1">Brep vertex</output>
          <output name="missing" optional="Optional" vartype="2">Brep edge</output>
          <output name="missing" optional="Optional" vartype="3">Brep face</output>
          <output name="missing" optional="Optional" vartype="4">Brep trim</output>
          <output name="missing" optional="Optional" vartype="5">Brep loop</output>
          <output name="missing" optional="Optional" vartype="3">Array (X, Y, Z)</output>
          <output name="missing" optional="Optional" vartype="The normal to the Brep face, or  the tangent to the Brep edge. ">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="CapPlanarHoles">
        <description>Caps planar holes in a surface or polysurface. For more details, see the Cap command in the Rhino help file.</description>
        <OLE-syntax>Rhino.CapPlanarHoles (strSurface)<input name="strSurface" optional="Required" vartype="String">The identifier of the surface or polysurface to cap.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ConvertSurfaceToBezier">
        <description>Changes the structure of a NURBS surface to a B&#233;zier surface.</description>
        <OLE-syntax>Rhino.ConvertSurfaceToBezier (strObject [, blnDelete])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete the  original object. The default is to not delete the original  object (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly  created surface objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="CreateSolid">
        <description>Creates a closed polysurface from surfaces and polysurfaces that bound a region in space.</description>
        <OLE-syntax>Rhino.CreateSolid (arrObjects [,blnDelete])<input name="arrObjects  " optional="Required" vartype="geometrical-string-array">An array of  strings identifying two or more surfaces or polysurfaces objects  from which to create the solid.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input  objects. The default is not to delete objects (False).
          <output name="missing" optional="Optional" vartype="Array">The identifiers of one or more newly created  closed polysurface object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="DuplicateEdgeCurves">
        <description>Duplicates the edge curves of a surface or polysurface. For more information, see the Rhino help file for information on the DupEdge command.</description>
        <OLE-syntax>Rhino.DuplicateEdgeCurves (strObject [, blnSelect])<input name="strObject" optional="Required" vartype="String">The identifier of the surface or polysurface object.
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the duplicated edge curves. The default is not to select (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly created curve objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="DuplicateSurfaceBorder">
        <description>Creates a curve that duplicates a surface or polysurface border.</description>
        <OLE-syntax>Rhino.DuplicateSurfaceBorder (strObject [, intType])<input name="strObject" optional="Required" vartype="String">The identifier  of the surface or polysurface object.
          <input name="intType" optional="Optional" vartype="integer">The border  curves to return.The possible values are as follows:<input-subset name="0" optional="Optional" vartype="integer">Both exterior and interior border  curves.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Exterior border curves.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Interior border curves.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the new  curve objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="EvaluateSurface">
        <description>Evaluates a surface at a U,V parameter.</description>
        <OLE-syntax>Rhino.EvaluateSurface (strObject, arrParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrParameter" optional="Required" vartype="unknown-type-array">An array containing the U,V parameter to evaluate.
          <output name="missing" optional="Optional" vartype="Array">A 3-D point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ExplodePolysurfaces">
        <description>Explodes, or un-joins, one more polysurface objects. Polysurfaces will be exploded into separate surfaces.</description>
        <OLE-syntax>Rhino.ExplodePolysurfaces (strObject [, blnDelete])<input name="strObject" optional="Required" vartype="String">The identifier of the polysurface object to explode.
          <input name="arrObjects" optional="Required" vartype="unknown-string-array">An array of strings identifying the polysurface objects to explode.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input objects after exploding. The default is not to delete objects (False).
          <output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly created surface objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ExtendSurface">
        <description>Lengthens an untrimmed surface object by a factor value.</description>
        <OLE-syntax>Rhino.ExtendSurface (strObject, arrParameter, dblLength, blnSmooth)<output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ExtractIsoCurve">
        <description>Extracts isoparametric curves from a surface.</description>
        <OLE-syntax>Rhino.ExtractIsoCurve (strObject, arrParameter, intDir)<output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly  created curve objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.<input-subset name="Optional. Boolean. If True,  the faces are copied. If False (Default), the faces are extracted." optional="Optional" vartype="Null">blnSurface</input-subset>
          </output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ExtractSurface">
        <description>Separates or copies a surface (face) or a copy of a surface from a polysurface.</description>
        <OLE-syntax>Rhino.ExtractSurface (strObject, intFaceIndex [, blnCopy [, blnSurface]])<output name="missing" optional="Optional" vartype="String">If intFaceIndex is specified,  the identifier of the extracted surface object if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrFaceIndices is specified,  the identifiers of the extracted surface objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ExtrudeCurve">
        <description>Creates a surface by extruding a curve along a path curve.</description>
        <OLE-syntax>Rhino.ExtrudeCurve (strCurve, strPath)<output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ExtrudeCurveNormal">
        <description>Extrudes a curve, that lies on a surface, normal to the surface.This is functionally similar to the Fin command.</description>
        <OLE-syntax>Rhino.ExtrudeCurveNormal (strSurface, strCurve, dblDistance)<input name="strSurface" optional="Required" vartype="String">The identifier  of the base surface object.
          <input name="strCurve" optional="Required" vartype="String">The identifier  of the curve, that lies on the surface, to extrude.
          <input name="dblDistance" optional="Required" vartype="double">The distance  to extrude.
          <output name="missing" optional="Optional" vartype="String">The  identifier of the new surface object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ExtrudeCurvePoint">
        <description>Creates a surface by extruding a curve to a point.</description>
        <OLE-syntax>Rhino.ExtrudeCurvePoint (strCurve, arrPoint)<output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ExtrudeCurveStraight">
        <description>Creates a surface by extruding a curve straight along two points that define a line.</description>
        <OLE-syntax>Rhino.ExtrudeCurveStraight (strCurve, arrStartPoint, arrEndPoint)<output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.<input-subset name="Required. Array. A 3-D vector that specifies the extrusion direction." optional="Optional" vartype="Null">arrBasePoint</input-subset>
            <input-subset name="Required. Array. A 3-D point that specifies the base point of the extrusion." optional="Optional" vartype="Null">dblAngle</input-subset>
          </output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ExtrudeCurveTapered">
        <description>Creates a surface by extruding a curve to a taper. Unlike Lofts and Sweeps, the initial orientation of the profile curve is maintained through the extrusion.</description>
        <OLE-syntax>Rhino.ExtrudeCurveTapered (strCurve, dblDistance, arrDirection, arrBasePoint, dblAngle [, intCornerType])<output name="missing" optional="Optional" vartype="Array">An array of strings identifying the newly created surface objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ExtrudeSurface">
        <description>Creates a surface or solid by extruding a straight along a path curve.</description>
        <OLE-syntax>Rhino.ExtrudeSurface (strSurface, strCurve [, blnCap])<output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="FilletSurfaces">
        <description>Create constant radius rolling ball fillets between two surfaces. Note, this function does not trim the original surfaces to the fillets.</description>
        <OLE-syntax>Rhino.FilletSurfaces (strSurface0, strSurface1, dlbRadius [, arrParam0, arrParam1])<input name="strSurface0" optional="Required" vartype="String">The identifier  of the first surface object.
          <input name="strSurface1" optional="Required" vartype="String">The identifier  of the second surface object.
          <input name="dlbRadius" optional="Required" vartype="Number">A positive  fillet radius.
          <input name="arrParam0 " optional="Optional" vartype="geometrical-string-array">A u,v surface parameter of strSurface0 near  where the fillet is expected to hit the surface.
          <input name="arrParam1" optional="Optional" vartype="geometrical-string-array">A u,v surface parameter of strSurface1 near  where the fillet is expected to hit the surface.
          <output name="missing" optional="Optional" vartype="Array">The knot values of the surface if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
          <output name="missing" optional="Optional" vartype="Remarks">arrParam0 and arrParam1 determine the directions of the offsets. The surfaces will be offset towards the middle of the segment from strSurface0(arrParam0) to strSurface1(arrParam1).</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="FitSurface">
        <description>Reduces the number of surface control points while maintaining the surfaces' same general shape. Use this function for replacing surface with too many control points. For more information, see the Rhino help file for the FitSrf command.</description>
        <OLE-syntax>Rhino.FitSurface (strObject [, arrDegree [, dblTolerance]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrDegree" optional="Optional" vartype="number-array">An array of two numbers that identify the surface curve degree in both the U and the V directions. Each degree value must be greater than 1. The default is 3.
          <input name="dblTolerance" optional="Optional" vartype="double">The fitting tolerance. If dblTolerance is not specified or &lt;= 0.0, the document absolute tolerance is used.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="FlipSurface">
        <description>Returns or changes the normal direction of a surface. This feature can also be found in Rhino's Dir command.</description>
        <OLE-syntax>Rhino.FlipSurface (strObject [, blnFlip])<input name="strObject" optional="Required" vartype="String">The identifier of a surface object.
          <input name="blnFlip" optional="Optional" vartype="Boolean">The new normal orientation, either flipped (True) or not flipped (False). If omitted, the current normal orientation is returned.
          <output name="missing" optional="Optional" vartype="Boolean">If blnFlip is not specified, the current normal orientation if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnFlip is specified, the previous normal orientation if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="InsertSurfaceKnot">
        <description>Inserts a knot into a surface object.</description>
        <OLE-syntax>Rhino.InsertSurfaceKnot (strObject, arrParameter, intDirection [, blnSymmetrical)<input name="strObject" optional="Required" vartype="String">The identifier of the surface object.
          <input name="dblParameter" optional="Required" vartype="geometrical-string-array">An array containing a U,V parameter on the  surface.
          <input name="intDirection" optional="Required" vartype="integer">The direction for knot insertion, either 0  = U, 1 = V, or 2 = both.
          <input name="blnSymmetrical" optional="Optional" vartype="Boolean">If blnSymmetrical  = True, then knots are added on both sides of the center of the  surface. The default value is False.
          <output name="missing" optional="Optional" vartype="Boolean">True of False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IntersectBreps">
        <description>Intersects a surface or polysurface object with another surface or polysurface object. Note, unlike the SurfaceSurfaceIntersection function this function works on trimmed surfaces.</description>
        <OLE-syntax>Rhino.IntersectBreps (strObject1, strObject2 [, dblTolerance [, blnReturnBoolean]])<input name="strObject1" optional="Required" vartype="String">The first surface or polysurface object's  identifier.
          <input name="strObject2 " optional="Required" vartype="String">The second surface or polysurface object's  identifier.
          <input name="dblTolerance" optional="Optional" vartype="double">The intersection tolerance. If omitted,  the document's absolute tolerance is used.
          <input name="blnReturnBoolean" optional="Optional" vartype="Boolean">Returns a Boolean value, either True or False,  indicating whether or not the two objects intersected. In this  case, no geometry is created and added to the document. The default  value is False, which means that if the two objects intersect,  the function will create the intersection geometry and return  their object identifiers.
          <output name="missing" optional="Optional" vartype="Array">If blnReturnBoolean is omitted  or False, then an array of strings identifying the newly created  intersection curve and point objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnReturnBoolean is specified  and True, then True or False indicating whether or not the two  objects intersected if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IntersectSpheres">
        <description>Calculates the intersection of two spheres. </description>
        <OLE-syntax>Rhino.IntersectSpheres (arrSpherePlane0, dblSphereRadius0, arrSpherePlane1, dblSphereRadius1)<input name="arrSpherePlane0" optional="Required" vartype="single-xyz-array">An equatorial plane of the first sphere. The origin of the plane will be the center point of the sphere.
          <input name="dblSphereRadius0" optional="Required" vartype="double">The radius of the first sphere.
          <input name="arrSpherePlane1" optional="Required" vartype="single-xyz-array">An equatorial plane of the second sphere. The origin of the plane will be the center point of the sphere.
          <input name="dblSphereRadius1" optional="Required" vartype="double">The radius of the second sphere.
          <output name="missing" optional="Optional" vartype="Array">An array of intersection results, if successful. The results are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Number">The type of intersection, where 0 = point, 1 = circle, 2 = spheres are identical.</output>
          <output name="missing" optional="Optional" vartype="1">Array</output>
          <output name="missing" optional="Optional" vartype="If a point intersection, then an array identifying the 3-D intersection location.">If a circle intersection, then the circle's plane. The origin of the plane will be the center point of the circle.</output>
          <output name="missing" optional="Optional" vartype="2 (circle intersection only)">Number</output>
          <output name="missing" optional="Optional" vartype="If a circle intersection, then the radius of the circle.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsBox">
        <description>Verifies a polysurface object is a box.</description>
        <OLE-syntax>Rhino.IsBox (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsBrep">
        <description>Verifies an object is a Brep, or a boundary representation model, object.</description>
        <OLE-syntax>Rhino.IsBrep (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsBrepManifold">
        <description>Verifies a polysurface object is manifold. A polysurface for which every edge is shared by at most two faces is called a manifold. If a polysurface has at least one edge that is shared by more than two faces, then that polysurface is called non-manifold.</description>
        <OLE-syntax>Rhino.IsBrepManifold (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsCone">
        <description>Determines if a surface is a portion of a cone.</description>
        <OLE-syntax>Rhino.IsCone (strSurface [, blnTolerance])<input name="strSurface" optional="Required" vartype="String">The surface  object's identifier.
          <input name="blnTolerance" optional="Optional" vartype="Boolean">If False  (Default), then the document's absolute tolerance is used when  checking. If True, then Rhino's internal zero tolerance is used  when checking.
          <input name="dblTolerance" optional="Optional" vartype="double">The tolerance  to use when checking. If omitted, the document's absolute tolerance  is used.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsCylinder">
        <description>Determines if a surface is a portion of a cylinder.</description>
        <OLE-syntax>Rhino.IsCylinder (strSurface [, blnTolerance])<input name="strSurface" optional="Required" vartype="String">The surface  object's identifier.
          <input name="blnTolerance" optional="Optional" vartype="Boolean">If False  (Default), then the document's absolute tolerance is used when  checking. If True, then Rhino's internal zero tolerance is used  when checking.
          <input name="dblTolerance" optional="Optional" vartype="double">The tolerance  to use when checking. If omitted, the document's absolute tolerance  is used.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsExtrusion">
        <description>Verifies that an object is an extrusion object.</description>
        <OLE-syntax>Rhino.IsExtrusion (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsParameterOnSurface">
        <description>Verifies that a parameter space point is on a trimmed surface, or not on the trimmed portion of a surface.</description>
        <OLE-syntax>Rhino.IsParameterOnSurface (strObject, arrParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrParameter" optional="Required" vartype="unknown-type-array">An array containing the U,V parameter to evaluate.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsPlaneSurface">
        <description>Verifies an object is a plane surface. Plane surfaces can be created by the Plane command. Note, a plane surface is not a planar NURBS surface.</description>
        <OLE-syntax>Rhino.IsPlaneSurface (strObject)<input name="strObject" optional="Required" vartype="String">The identifier of the object to verify.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsPointInSurface">
        <description>Verifies that a point is inside a closed surface or polysurface.</description>
        <OLE-syntax>Rhino.IsPointInSurface (strObject, arrPoint [, blnStrictlyIn [, dblTolerance]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The test,  or sampling, point.
          <input name="blnStrictlyIn  " optional="Optional" vartype="Boolean">If False  (Default), then the test point is considered inside if it is truly  inside or within tolerance of boundary. If True, then the test  point must be inside by at least the tolerance.
          <input name="dblTolerance" optional="Optional" vartype="double">The distance  tolerance used for intersection and determining strict inclusion.  If omitted, then Rhino's internal tolerance is used.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsPointOnSurface">
        <description>Verifies that a point lies on a surface.</description>
        <OLE-syntax>Rhino.IsPointOnSurface (strObject, arrPoint [, dblTolerance])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The test, or sampling, point.
          <input name="dblTolerance" optional="Optional" vartype="double">A tolerance to test against. Of omitted, Rhino's  internal tolerance is used.
          <output name="missing" optional="Optional" vartype="Boolean">True  if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On  error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsPolysurface">
        <description>Verifies an object is a polysurface. Polysurfaces consists of two or more surfaces joined together. If the polysurface fully encloses a volume, it is considered a solid. In some other 3-D programs, this is called a "quilt."</description>
        <OLE-syntax>Rhino.IsPolysurface (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsPolysurfaceClosed">
        <description>Verifies a polysurface object is closed. If the polysurface fully encloses a volume, it is considered a solid.</description>
        <OLE-syntax>Rhino.IsPolysurfaceClosed (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsPolysurfacePlanar">
        <description>Verifies a polysurface object is planar.</description>
        <OLE-syntax>Rhino.IsPolysurfacePlanar (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsSphere">
        <description>Determines if a surface is a portion of a sphere.</description>
        <OLE-syntax>Rhino.IsSphere (strSurface [, blnTolerance])<input name="strSurface" optional="Required" vartype="String">The surface  object's identifier.
          <input name="blnTolerance" optional="Optional" vartype="Boolean">If False  (Default), then the document's absolute tolerance is used when  checking. If True, then Rhino's internal zero tolerance is used  when checking.
          <input name="dblTolerance" optional="Optional" vartype="double">The tolerance  to use when checking. If omitted, the document's absolute tolerance  is used.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsSurface">
        <description>Verifies an object is surface. Brep objects with only one face are also considered surfaces.</description>
        <OLE-syntax>Rhino.IsSurface (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsSurfaceClosed">
        <description>Verifies a surface object is closed in the specified direction. If the surface fully encloses a volume, it is considered a solid.</description>
        <OLE-syntax>Rhino.IsSurfaceClosed (strObject, intDirection)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intDirection" optional="Required" vartype="integer">The direction, either 0 = U, or 1 = V.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsSurfacePeriodic">
        <description>Verifies a surface object is periodic in the specified direction.</description>
        <OLE-syntax>Rhino.IsSurfacePeriodic (strObject, intDirection)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intDirection" optional="Required" vartype="integer">The direction, either 0 = U, or 1 = V.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsSurfacePlanar">
        <description>Verifies a surface object is planar.</description>
        <OLE-syntax>Rhino.IsSurfacePlanar (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblTolerance" optional="Optional" vartype="double">A tolerance to use when checking. The default is to use Rhino's current absolute tolerance.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsSurfaceRational">
        <description>Verifies a surface object is rational.</description>
        <OLE-syntax>Rhino.IsSurfaceRational (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsSurfaceSingular">
        <description>Verifies a surface object is singular in the specified direction. Surfaces are considered singular if a side collapses to a point.</description>
        <OLE-syntax>Rhino.IsSurfaceSingular (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intDirection" optional="Required" vartype="integer">The direction, either 0 = south, 1 = east, 2 = north, or 3 = west.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsSurfaceTrimmed">
        <description>Verifies a surface object has been trimmed.</description>
        <OLE-syntax>Rhino.IsSurfaceTrimmed (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsSurfaceUnrollable">
        <description>Verifies that a surface or polysurface can be unrolled (developed). For more information on developable surfaces, see the Rhino help file.</description>
        <OLE-syntax>Rhino.IsSurfaceUnrollable (strSurface)<input name="strSurface" optional="Required" vartype="String">The identifier  of the surface or polysurface to test.
          <output name="missing" optional="Optional" vartype="Boolean">True or False if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="IsTorus">
        <description>Determines if a surface is a portion of a torus.</description>
        <OLE-syntax>Rhino.IsTorus (strSurface [, blnTolerance])<input name="strSurface" optional="Required" vartype="String">The surface  object's identifier.
          <input name="blnTolerance" optional="Optional" vartype="Boolean">If False  (Default), then the document's absolute tolerance is used when  checking. If True, then Rhino's internal zero tolerance is used  when checking.
          <input name="dblTolerance" optional="Optional" vartype="double">The tolerance  to use when checking. If omitted, the document's absolute tolerance  is used.
          <output name="missing" optional="Optional" vartype="Boolean">True if successful, otherwise False.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="JoinSurfaces">
        <description>Joins two or more surface or polysurface object together to form one polysurface object.</description>
        <OLE-syntax>Rhino.JoinSurfaces (arrObjects [, blnDelete])<input name="arrObjects  " optional="Required" vartype="geometrical-string-array">An ordered  array of strings identifying the surfaces or polysurfaces objects  to join.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input  objects after joining. The default is not to delete objects  (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the newly created polysurface  object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="JoinSurfacesEx">
        <description>Joins two or more surface or polysurface object together.</description>
        <OLE-syntax>Rhino.JoinSurfacesEx (arrObjects [, blnDelete])<input name="arrObjects  " optional="Required" vartype="geometrical-string-array">An array of strings identifying the surfaces or polysurfaces objects to join. Unlike JoinSurfaces, the array  does not have to be ordered.
          <input name="strObject0" optional="Required" vartype="String">The first  surface or polysurface to join.
          <input name="strObject1  " optional="Required" vartype="String">The second  surface or polysurface to join.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input  objects after joining. The default is not to delete objects  (False).
          <output name="missing" optional="Optional" vartype="Array">If arrObjects  is specified, then the identifiers of the newly created polysurface  objects if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strObject0 and strObject1 is specified,  then the identifier of the newly created polysurface object if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="MakeSurfaceNonPeriodic">
        <description>Makes a periodic surface non-periodic. Non-periodic surfaces can develop kinks when deformed.</description>
        <OLE-syntax>Rhino.MakeSurfaceNonPeriodic (strObject, intDirection [, blnDelete])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intDirection" optional="Required" vartype="integer">The direction to make non-periodic, either 0 = U, or 1 = V.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input surface. If omitted, the input surface will not be deleted (False).
          <output name="missing" optional="Optional" vartype="String">If blnDelete is False, the identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If blnDelete is True, the identifier of the modified object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="MakeSurfacePeriodic">
        <description>Makes an existing surface a periodic NURBS surface.</description>
        <OLE-syntax>Rhino.MakeSurfacePeriodic (strObject, intDirection [, blnDelete [, blnSmooth]])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="intDirection" optional="Required" vartype="integer">The direction  to make periodic, either 0 = U, or 1 = V.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input  surface. If omitted, the input surface will not be deleted  (False).
          <input name="blnSmooth" optional="Optional" vartype="Boolean">Controls  kink removal. If true, smooths any kinks in the surface  and moves control points to make a smooth surface. If false,  control point locations are not changed or changed minimally (only  one point may move) and only the knot vector is altered.The  default is False.
          <output name="missing" optional="Optional" vartype="String">If blnDelete  is False, the identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If blnDelete  is True, the identifier of the modified object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="OffsetBrep">
        <description>Offsets a surface or a polysurface by a distance.</description>
        <OLE-syntax>Rhino.OffsetBrep (strObject, dblDistance [, dblTolerance [, blnBothSides [, blnCreateSolid]]])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="dblDistance" optional="Required" vartype="double">The distance  to offset. This is a signed distance value with respect to face  normals and flipped faces.
          <input name="blnCreateSolid" optional="Optional" vartype="Boolean">Makes a  closed solid from the input and offset surfaces by lofting a ruled  surface between all of the matching edges.The default is  False.
          <input name="blnExtend" optional="Optional" vartype="Boolean">If True,  then the function maintains the sharp corners when the original  surfaces have sharps corner. If False, then the function  creates fillets at sharp corners in the original surfaces. The  default is True.
          <input name="dblTolerance  " optional="Optional" vartype="double">The offset  tolerance.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the new objects if successful,  but unable to combine into a single polysurface.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="OffsetSurface">
        <description>Offsets a trimmed or untrimmed surface by a distance. The offset surface will be added to Rhino.</description>
        <OLE-syntax>Rhino.OffsetSurface (strObject, dblDistance [, dblTolerance [, blnBothSides [, blnCreateSolid]]])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="dblDistance" optional="Required" vartype="double">The distance  to offset.
          <input name="dblTolerance  " optional="Optional" vartype="double">The offset  tolerance. Use 0.0 to make a loose offset. Otherwise, the document's  absolute tolerance is usually sufficient.
          <input name="blnBothSides  " optional="Optional" vartype="Boolean">Offset to  both sides of the input surface. The default is False.
          <input name="bonCreateSolid" optional="Optional" vartype="Boolean">Make a solid  object.The default is False.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="PullCurve">
        <description>Pulls a curve object to a surface object. For more information, see the Rhino help file for information on the Pull command.</description>
        <OLE-syntax>Rhino.PullCurve (strSurface, strCurve [, blnDelete])<input name="strSurface" optional="Required" vartype="String">The identifier of the surface object that pulls.
          <input name="strCurve" optional="Required" vartype="String">The identifier of the curve object to pull.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input curve. If omitted, the input curve will not be deleted (False).
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the new curve objects if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="RebuildSurface">
        <description>Rebuilds a surface to given degree and control point count. For more information, see the Rhino help file for the Rebuild command.</description>
        <OLE-syntax>Rhino.RebuildSurface (strObject [, arrDegree [, arrPointCount]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrDegree" optional="Optional" vartype="number-array">An array of two numbers that identify the surface curve degree in both the U and the V directions. Each degree value must be greater than 1. The default is 3 in each direction.
          <input name="arrPointCount" optional="Optional" vartype="single-xyz-array">An array of two numbers that identify the surface point count in both the U and the V directions. The point count must be greater than the degree. The default value is 10 in each direction.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="RemoveSurfaceKnot">
        <description>Deletes a knot-line from a surface object.</description>
        <OLE-syntax>Rhino.RemoveSurfaceKnot (strObject, arrParameter, intDirection)<input name="strObject" optional="Required" vartype="String">The identifier of the surface object.
          <input name="dblParameter" optional="Required" vartype="geometrical-string-array">An array containing a U,V parameter on the surface. Note, if the parameter is not equal to one of the existing knots, then the knot closest to the specified parameter will be removed.
          <input name="intDirection" optional="Required" vartype="integer">The direction for knot insertion, either 0 = U, or 1 = V.
          <output name="missing" optional="Optional" vartype="Boolean">True of False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ReverseSurface">
        <description>Reverses the U and V directions of a surface object. This feature can also be found in Rhino's Dir command.</description>
        <OLE-syntax>Rhino.ReverseSurface (strObject, intDirection)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intDirection" optional="Required" vartype="integer">The direction to reverse. Values can be added together so as to reverse more than one direction.<input-subset name="1" optional="Required" vartype="integer">Reverse the surface in the U direction.</input-subset>
            <input-subset name="2" optional="Required" vartype="integer">Reverse the surface in the V direction.</input-subset>
            <input-subset name="4" optional="Required" vartype="integer">Swap, or transpose, the U and V directions of the surface.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ShootRay">
        <description>Shoots a ray at a collection of surfaces.</description>
        <OLE-syntax>Rhino.ShootRay (strSurface, arrPoint, arrDirection [, intReflections [, blnObjects]])<input name="strSurface" optional="Required" vartype="geometrical-string-array">The identifier  of a reflecting surface and polysurface object.
          <input name="arrSurfaces" optional="Required" vartype="geometrical-string-array">The identifiers  of one or more reflecting surface and polysurface objects.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">A 3-D point  identifying the starting point of the ray.
          <input name="arrDirection" optional="Required" vartype="geometrical-string-array">A 3-D vector  identifying the direction of the ray.
          <input name="intReflections" optional="Optional" vartype="integer">The maximum  number of times the ray will be reflected. The default is  10 reflections.
          <input name="blnObjects" optional="Optional" vartype="Boolean">If False (Default), then a one-dimensional array of 3-D points of reflection is returned if successful. In this case, the first element of the array is the starting point of the ray, or arrPoint. If True, then a two-dimensional array, with the first dimension containing the reflection point and the second dimension containing the identifier of the surface or polysurface that was hit at that point, is returned if successful. In this case, the first row of the array contains the starting point of the ray, or arrPoint, in the first  dimension, and a null value in the second dimension.
          <output name="missing" optional="Optional" vartype="Array">See the comments regarding blnObjects  above.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ShortPath">
        <description>Creates the shortest possible curve (geodesic) between two points on a surface. For more details, see the ShortPath command in the Rhino help file.</description>
        <OLE-syntax>Rhino.ShortPath (strSurface, arrStart, arrEnd)<input name="strSurface" optional="Required" vartype="String">The identifier of the surface object that pulls.
          <input name="arrStart" optional="Required" vartype="single-xyz-array">A 3-D surface point identifying the starting point of the short curve.
          <input name="arrEnd" optional="Required" vartype="single-xyz-array">A 3-D surface point identifying the ending point of the short curve.
          <output name="missing" optional="Optional" vartype="String">The identifier of the new curve object if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="ShrinkTrimmedSurface">
        <description>Shrinks the underlying untrimmed surfaces near to trimming boundaries. For more details, see the ShrinkTrimmedSrf command in the Rhino help file.</description>
        <OLE-syntax>Rhino.ShrinkTrimmedSurface (strSurface)<input name="strSurface" optional="Required" vartype="String">The identifier of the surface or polysurface to shrink.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SplitBrep">
        <description>Splits a brep. A brep can be either a surface with a single face or a polysurface.</description>
        <OLE-syntax>Rhino.SplitBrep (strBrep, strCutter [, blnDelete])<input name="strBrep" optional="Required" vartype="String">The identifier  of the brep object to split.
          <input name="strCutter" optional="Required" vartype="String">The identifier  of the brep object to split with.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input  brep. If omitted, the input brep will not be deleted (False).
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the new brep objects  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SplitSurface">
        <description>Splits, or divides, a surface into two parts at the specified parameter.</description>
        <OLE-syntax>Rhino.SplitSurface (strSurface, intDir, dblParameter [, blnDelete])<input name="strSurface" optional="Required" vartype="String">The identifier  of the surface object to split.
          <input name="intDir" optional="Required" vartype="integer">The direction  to split. If 0 (U), then the surface is split vertically. If 1  (V), then the surface is split horizontally.
          <input name="dblParameter  " optional="Required" vartype="double">The parameter, in the domain returned by SurfaceDomain(strSurface,  intDir), to split at.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input  surface. If omitted, the input surface will not be deleted  (False).
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the two new surfaces if successful. If intDir = 0, then Array(0) is the "west" part and Array(1) is the "east" part. If intDir  = 1, then Array(0) is the "north" part and Array(1)  is the "south" part.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceArea">
        <description>Calculates the area of a surface or polysurface object. The results are based on the current drawing units.</description>
        <OLE-syntax>Rhino.SurfaceArea (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Array">An array of area information if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Number">The area.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound for the area.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceAreaCentroid">
        <description>Calculates the area centroid of a surface or polysurface object.</description>
        <OLE-syntax>Rhino.SurfaceAreaCentroid (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Array">An array of area centroid information if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array (3-D Point)">The centroid point.</output>
          <output name="missing" optional="Optional" vartype="1">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound for the area centroid.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceAreaMoments">
        <description>Calculates the area moments of inertia of a surface or polysurface object. For more information, see the Rhino help file for "Mass Properties Calculation Details."</description>
        <OLE-syntax>Rhino.SurfaceAreaMoments (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Array">An array of area moments of inertia information  if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">First Moments.</output>
          <output name="missing" optional="Optional" vartype="1">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the First Moments.">2</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Second Moments.</output>
          <output name="missing" optional="Optional" vartype="3">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Second Moments.">4</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Product Moments.</output>
          <output name="missing" optional="Optional" vartype="5">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Product Moments.">6</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Area Moments of Inertia about the  World Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="7">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Area Moments of Inertia about World Coordinate  Axes.">8</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Area Radii of Gyration about the  World Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="9">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Area Radii of Gyration about World Coordinate  Axes.">10</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Area Moments of Inertia about the  Centroid Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="11">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Area Moments of Inertia about the Centroid Coordinate  Axes.">12</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Area Radii of Gyration about the  Centroid Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="13">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Area Radii of Gyration about the Centroid Coordinate  Axes.">14</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Area Principal Moments of Inertia  about Centroid and Principal Axes</output>
          <output name="missing" optional="Optional" vartype="15">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The X direction of the Area Principal  Moments of Inertia about Centroid and Principal Axes.">16</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">The Y direction of the Area Principal  Moments of Inertia about Centroid and Principal Axes.</output>
          <output name="missing" optional="Optional" vartype="17">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The Z direction of the Area Principal  Moments of Inertia about Centroid and Principal Axes.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceClosestPoint">
        <description>Returns the UV parameter of the point on a surface that is closest to a test point.</description>
        <OLE-syntax>Rhino.SurfaceClosestPoint (strObject, arrPoint [, blnTrimmed])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">The test,  or sampling, point.
          <input name="blnTrimmed" optional="Optional" vartype="Boolean">If False  (default) and the surface is trimmed, then the calculation is  based on the underlying untrimmed surface. If true and the surface  is trimmed, then the calculation is based on the trimmed face.
          <output name="missing" optional="Optional" vartype="Array">An array containing the U,V parameters  of the closest point on the surface if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceCone">
        <description>Returns the definition of a cone surface.</description>
        <OLE-syntax>Rhino.SurfaceCone (strSurface)<input name="strSurface" optional="Required" vartype="String">The surface object's identifier.
          <output name="missing" optional="Optional" vartype="Array">An array containing the definition of the cone if successful. The elements of the array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array">The plane of the cone. The apex of cone is at plane's origin and the axis of the cone is plane's z-axis.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The height of the cone.">2</output>
          <output name="missing" optional="Optional" vartype="Number">The radius of the cone.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceContourPoints">
        <description>Returns the vertices of the polyline curves generated by contouring a surface or polysurface object.</description>
        <OLE-syntax>Rhino.SurfaceContourPoints (strObject, arrStartPoint, arrEndPoint [, dblInterval [, dblAngle]])<input name="strObject" optional="Required" vartype="String">The identifier of a surface or polysurface object.
          <input name="arrStartPoint" optional="Required" vartype="single-xyz-array">The 3-D starting point of a center line.
          <input name="arrEndPoint" optional="Required" vartype="single-xyz-array">The 3-D ending point of a center line.
          <input name="dblInterval" optional="Optional" vartype="double">The distance between contour curves. If omitted, the interval will be equal to the diagonal distance of the object's bounding box divided by 50.
          <input name="dblAngle" optional="Optional" vartype="double">The maximum angle in degrees between unit tangents at adjacent vertices. If omitted, the maximum angle will be set to 5.0 degrees.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D point arrays, one for each contour, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceCount">
        <description>Returns the number of surfaces, or faces, in a polysurface.</description>
        <OLE-syntax>Rhino.SurfaceCount (strObject)<output name="missing" optional="Optional" vartype="Number">The  number of surfaces, or faces, in a polysurface if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceCurvature">
        <description>Returns the curvature of a surface at a U,V parameter. See the Rhino help file for details on surface curvature.</description>
        <OLE-syntax>Rhino.SurfaceCurvature (strObject, arrParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrParameter" optional="Required" vartype="unknown-type-array">An array containing the U,V parameter to evaluate.
          <output name="missing" optional="Optional" vartype="Array">An array of curvature information if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array (3-D Point)">3-D point at the specified U,V parameter.</output>
          <output name="missing" optional="Optional" vartype="1">Array (3-D Vector)</output>
          <output name="missing" optional="Optional" vartype="Normal direction (vector).">2</output>
          <output name="missing" optional="Optional" vartype="Number">Maximum principal curvature.</output>
          <output name="missing" optional="Optional" vartype="3">Array (3-D Vector)</output>
          <output name="missing" optional="Optional" vartype="Maximum principal curvature direction (vector).">4</output>
          <output name="missing" optional="Optional" vartype="Number">Minimum principal curvature.</output>
          <output name="missing" optional="Optional" vartype="5">Array (3-D Vector)</output>
          <output name="missing" optional="Optional" vartype="Minimum principal curvature direction (vector).">6</output>
          <output name="missing" optional="Optional" vartype="Number">Gaussian curvature.</output>
          <output name="missing" optional="Optional" vartype="7">Number</output>
          <output name="missing" optional="Optional" vartype="Mean curvature.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceCurvatureAnalysis">
        <description>Returns the curvature of a surface. See the Rhino help file for details on surface curvature analysis.</description>
        <OLE-syntax>Rhino.SurfaceCurvatureAnalysis (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Array">An array of curvature information if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array">An array containing three values: the min Gaussian curvature, the max Gaussian curvature, and the infinity status.</output>
          <output name="missing" optional="Optional" vartype="1">Array</output>
          <output name="missing" optional="Optional" vartype="An array containing three values: the min unsigned mean curvature, the max unsigned mean curvature, and the infinity comparison.">2</output>
          <output name="missing" optional="Optional" vartype="Array">An array containing three values: the min maximum unsigned radius of curvature, the max maximum unsigned radius of curvature, and the infinity comparison.</output>
          <output name="missing" optional="Optional" vartype="3">Array</output>
          <output name="missing" optional="Optional" vartype="An array containing three values: the min minimum unsigned radius of curvature, the max minimum unsigned radius of curvature, and the infinity comparison.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceCylinder">
        <description>Returns the definition of a cylinder surface.</description>
        <OLE-syntax>Rhino.SurfaceCylinder (strSurface)<input name="strSurface" optional="Required" vartype="String">The surface object's identifier.
          <output name="missing" optional="Optional" vartype="Array">An array containing the definition of the cylinder if successful. The elements of the array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array">The base plane of the cylinder.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The height of the cylinder.">2</output>
          <output name="missing" optional="Optional" vartype="Number">The radius of the cylinder.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceDegree">
        <description>Returns the degree of a surface object in the specified direction.</description>
        <OLE-syntax>Rhino.SurfaceDegree (strObject [, intDirection])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intDirection" optional="Optional" vartype="integer">The direction, either 0 = U, or 1 = V, or 2 = Both. Of omitted, both the degrees in the U and V directions are returned (2 = Both).
          <output name="missing" optional="Optional" vartype="Array">If intDirection is not specified, or intDirection is set to 2, then the degree in both the U and V directions is returned.</output>
          <output name="missing" optional="Optional" vartype="Number">If intDirection is specified, and intDirection is set to either 0 or 1, then the degree in either the U or V direction is returned.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceDomain">
        <description>Returns the domain of a surface object in the specified direction.</description>
        <OLE-syntax>Rhino.SurfaceDomain (strObject, intDirection)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intDirection" optional="Required" vartype="integer">The direction, either 0 = U, or 1 = V.
          <output name="missing" optional="Optional" vartype="Array">An array containing the domain interval in the specified direction if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceDraftAnglePoint">
        <description>Returns the surface draft angle and point at a parameter.</description>
        <OLE-syntax>Rhino.SurfaceDraftAnglePoint (strObject, arrParameter, dblAngle [, arrDirection])<input name="strObject" optional="Required" vartype="String">The surface  object's identifier.
          <input name="arrParameter  " optional="Required" vartype="geometrical-string-array">The u,v surface  parameter to evaluate.
          <input name="dblAngle" optional="Required" vartype="double">The angle  in degrees to test.
          <input name="arrDirection" optional="Optional" vartype="geometrical-string-array">The direction  vector. If omitted, world z-axis is used.
          <output name="missing" optional="Optional" vartype="Array">Array containing two elements: (0) the  draft angle point and (1) the angle, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceEditPoints">
        <description>Returns the edit, or Greville, points of a surface object. For each surface control point, there is a corresponding edit point.</description>
        <OLE-syntax>Rhino.SurfaceEditPoints (strObject [, blnReturnParameters [, blnReturnAll]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="blnReturnParameters" optional="Optional" vartype="Boolean">If False (default), edit points are returned as an array of 3-D points. If True, edit points are returned as an array U,V surface parameters.
          <input name="blnReturnAll" optional="Optional" vartype="Boolean">If True (default) all surface edit points are returned. If False, the function will returned surface edit points based on whether or not the surface is closed or periodic.
          <output name="missing" optional="Optional" vartype="Array">If blnReturnParameters is omitted or False, then an array of 3-D edit points if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If blnReturnParameters is True, then an array of U,V parameter values if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceEvaluate">
        <description>A general purpose surface evaluator.</description>
        <OLE-syntax>Rhino.SurfaceEvaluate (strObject, arrParameter, intDerivative)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrParameter" optional="Required" vartype="unknown-type-array">An array containing the U,V parameter to evaluate.
          <input name="intDerivative" optional="Required" vartype="integer">The number of derivatives to evaluate.
          <output name="missing" optional="Optional" vartype="Array">An array of length (intDerivative+1)*(intDerivative+2)/2 if successful. The array elements are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array">The 3-D point.</output>
          <output name="missing" optional="Optional" vartype="1">Array</output>
          <output name="missing" optional="Optional" vartype="The first derivative.">2</output>
          <output name="missing" optional="Optional" vartype="Array">The first derivative.</output>
          <output name="missing" optional="Optional" vartype="3">Array</output>
          <output name="missing" optional="Optional" vartype="The second derivative.">4</output>
          <output name="missing" optional="Optional" vartype="Array">The second derivative.</output>
          <output name="missing" optional="Optional" vartype="5">Array</output>
          <output name="missing" optional="Optional" vartype="The second derivative.">6</output>
          <output name="missing" optional="Optional" vartype="Array">etc...</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceFrame">
        <description>Returns a plane based on the normal, u, and v directions at a given surface U,V parameter.</description>
        <OLE-syntax>Rhino.SurfaceFrame (strObject, arrParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrParameter" optional="Required" vartype="unknown-type-array">An array containing the U,V parameter to evaluate.
          <output name="missing" optional="Optional" vartype="Array">The plane at the specified parameter if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceIsocurveDensity">
        <description>Returns or sets the isocurve density of a surface or polysurface object. An isoparametric curve is a curve of constant U or V value on a surface. Rhino uses isocurves and surface edge curves to visualize the shape of a NURBS surface.</description>
        <OLE-syntax>Rhino.SurfaceIsocurveDensity (strObject [, intDensity])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intDensity" optional="Optional" vartype="integer">The isocurve wireframe density. The possible values are as follows:<input-subset name="-1" optional="Optional" vartype="integer">Hides surface isocurves.</input-subset>
            <input-subset name="0 " optional="Optional" vartype="integer">Display boundary and knot wires.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Display boundary and knot wires and one interior wire if there are no interior knots.</input-subset>
            <input-subset name="&gt;= 2" optional="Optional" vartype="integer">Display boundary and knot wires and (N+1) interior wires.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">The intDensity is not specified, then the current isocurve density if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">The intDensity is specified, then the previous isocurve density if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceKnotCount">
        <description>Returns the knot count of a surface object.</description>
        <OLE-syntax>Rhino.SurfaceKnotCount (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Array">The number of knots in the U and V directions if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceKnots">
        <description>Returns the knots, or knot vector, of a surface object.</description>
        <OLE-syntax>Rhino.SurfaceKnots (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Array">The knot values of the surface if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceNormal">
        <description>Returns a 3-D vector that is the normal to a surface at a parameter.</description>
        <OLE-syntax>Rhino.SurfaceNormal (strObject, arrParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="arrParameter" optional="Required" vartype="unknown-type-array">An array containing the UV parameter to evaluate.
          <output name="missing" optional="Optional" vartype="Array">A 3-D vector if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceNormalizedParameter">
        <description>Converts a surface parameter to a normalized surface parameter; one that ranges between 0.0 and 1.0 in both the U and V directions.</description>
        <OLE-syntax>Rhino.SurfaceNormalizedParameter (strObject , arrParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblParameter" optional="Required" vartype="geometrical-string-array">The surface parameter to convert.
          <output name="missing" optional="Optional" vartype="Array">The normalized surface parameter if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceParameter">
        <description>Converts a normalized surface parameter to a surface parameter; one within the surface's domain.</description>
        <OLE-syntax>Rhino.SurfaceParameter (strObject , arrParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="dblParameter" optional="Required" vartype="geometrical-string-array">The normalized surface parameter to convert.
          <output name="missing" optional="Optional" vartype="Array">The surface parameter if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfacePointCount">
        <description>Returns the control points count of a surface object.</description>
        <OLE-syntax>Rhino.SurfacePointCount (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Array">The number of control points in the U and V directions if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfacePoints">
        <description>Returns the control points, or control vertices, of a surface object.</description>
        <OLE-syntax>Rhino.SurfacePoints (strObject [, blnReturnAll])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="blnReturnAll" optional="Optional" vartype="Boolean">If True (default) all surface edit points are returned. If False, the function will returned surface edit points based on whether or not the surface is closed or periodic.
          <output name="missing" optional="Optional" vartype="Array">The control points of the surface if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfacePrincipalCurvature">
        <description>Adds curvature curves at the evaluated point on a surface. For more information, see the Rhino help file for the Curvature command.</description>
        <OLE-syntax>Rhino.SurfacePrincipalCurvature (strObject, arrPoint)<input name="strObject" optional="Required" vartype="String">The curve's identifier.
          <input name="arrPoint" optional="Required" vartype="single-xyz-array">A point on the curve to evaluate.
          <output name="missing" optional="Optional" vartype="Array">An array of two strings that identify the Maximum and Minimum principal curvature curves, respectively, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceSeam">
        <description>Changes the seam of a closed surface. For more information, see the Rhino help file for the SrfSeam command.</description>
        <OLE-syntax>Rhino.SurfaceSeam (strObject, intDirection, dblParameter)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="intDirection" optional="Required" vartype="integer">The parameter direction, where 0 = U and 1 = V.
          <input name="dblParameter" optional="Required" vartype="double">The parameter at which to place the seam.
          <output name="missing" optional="Optional" vartype="Boolean">True of False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceSphere">
        <description>Returns the definition of a sphere surface.</description>
        <OLE-syntax>Rhino.SurfaceSphere (strSurface)<input name="strSurface" optional="Required" vartype="String">The surface object's identifier.
          <output name="missing" optional="Optional" vartype="Array">An array containing the definition of the sphere if successful. The elements of the array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array">The equatorial plane of the sphere. The origin of the plane will be the center point of the sphere.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The radius of the sphere.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceSurfaceIntersection">
        <description>Calculates the intersection of a surface object with another surface object. Note, this function works on untrimmed surfaces.</description>
        <OLE-syntax>Rhino.SurfaceSurfaceIntersection (strSurfaceA, strSurfaceB [, dblTolerance [, blnCreate]])<input name="strSurfaceA" optional="Required" vartype="String">The identifier of the first surface object.
          <input name="strSurfaceB" optional="Required" vartype="String">The identifier of the second surface object.
          <input name="dblTolerance" optional="Optional" vartype="double">The absolute tolerance in drawing units. If omitted, the document's current absolute tolerance is used.
          <input name="blnCreate" optional="Optional" vartype="Boolean">Create the intersection curves and points. If omitted, intersection geometry will not be created.
          <output name="missing" optional="Optional" vartype="Array">If blnCreate is not specified or is equal to False, an array numbers identifying the intersection event type if successful. The array will contain one or more of the following intersection event types:</output>
          <output name="missing" optional="Optional" vartype="Type">Description</output>
          <output name="missing" optional="Optional" vartype="1">Transverse surface-surface intersection curve.</output>
          <output name="missing" optional="Optional" vartype="2">Tangent surface-surface intersection curve.</output>
          <output name="missing" optional="Optional" vartype="3">Overlap surface-surface intersection curve.</output>
          <output name="missing" optional="Optional" vartype="4">Transverse surface-surface intersection point.</output>
          <output name="missing" optional="Optional" vartype="5">Tangent surface-surface intersection point.</output>
          <output name="missing" optional="Optional" vartype="Array">If blnCreate is specified and is equal to True, a two-dimensional array of intersection information if successful. The array will contain one or more of the following elements:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">(n, 0)</output>
          <output name="missing" optional="Optional" vartype="Number">The intersection event type. See the above table for details.</output>
          <output name="missing" optional="Optional" vartype="(n, 1)">String</output>
          <output name="missing" optional="Optional" vartype="The identifier of the intersection curve or point object that was created.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceTorus">
        <description>Returns the definition of a torus surface.</description>
        <OLE-syntax>Rhino.SurfaceTorus (strSurface)<input name="strSurface" optional="Required" vartype="String">The surface object's identifier.
          <output name="missing" optional="Optional" vartype="Array">An array containing the definition of the torus if successful. The elements of the array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array">The base plane of the torus.</output>
          <output name="missing" optional="Optional" vartype="1">Number</output>
          <output name="missing" optional="Optional" vartype="The major radius of the torus.">2</output>
          <output name="missing" optional="Optional" vartype="Number">The minor radius of the torus.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceVolume">
        <description>Calculates the volume of closed surface or polysurface objects.</description>
        <OLE-syntax>Rhino.SurfaceVolume (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Array">An array of volume information if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Number">The volume.</output>
          <output name="missing" optional="Optional" vartype="Number">The absolute (+/-) error bound for the volume.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceVolumeCentroid">
        <description>Calculates the volume centroid of closed surface or polysurface objects.</description>
        <OLE-syntax>Rhino.SurfaceVolumeCentroid (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Array">An array of volume centroid information if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array (3-D Point)">The centroid point.</output>
          <output name="missing" optional="Optional" vartype="1">Array (X,Y,X)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound for the volume centroid.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceVolumeMoments">
        <description>Calculates the volume moments of inertia of closed surface or polysurface objects. For more information, see the Rhino help file for "Mass Properties Calculation Details."</description>
        <OLE-syntax>Rhino.SurfaceVolumeMoments (strObject)<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <output name="missing" optional="Optional" vartype="Array">An array of volume moments of inertia information  if successful. The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">First Moments.</output>
          <output name="missing" optional="Optional" vartype="1">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the First Moments.">2</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Second Moments.</output>
          <output name="missing" optional="Optional" vartype="3">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Second Moments.">4</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Product Moments.</output>
          <output name="missing" optional="Optional" vartype="5">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Product Moments.">6</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Volume Moments of Inertia about  the World Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="7">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Volume Moments of Inertia about World Coordinate  Axes.">8</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Volume Radii of Gyration about  the World Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="9">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Volume Radii of Gyration about World Coordinate  Axes.">10</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Volume Moments of Inertia about  the Centroid Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="11">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Volume Moments of Inertia about the Centroid Coordinate  Axes.">12</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Volume Radii of Gyration about  the Centroid Coordinate Axes.</output>
          <output name="missing" optional="Optional" vartype="13">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The absolute (+/-) error bound  for the Volume Radii of Gyration about the Centroid Coordinate  Axes.">14</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">Volume Principal Moments of Inertia  about Centroid and Principal Axes</output>
          <output name="missing" optional="Optional" vartype="15">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The X direction of the Volume Principal  Moments of Inertia about Centroid and Principal Axes.">16</output>
          <output name="missing" optional="Optional" vartype="Array (X,Y,Z)">The Y direction of the Volume Principal  Moments of Inertia about Centroid and Principal Axes.</output>
          <output name="missing" optional="Optional" vartype="17">Array (X,Y,Z)</output>
          <output name="missing" optional="Optional" vartype="The Z direction of the Volume Principal  Moments of Inertia about Centroid and Principal Axes.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="SurfaceWeights">
        <description>Returns an array of weight values that are assigned to the control points of a surface. The number of weights returned will be equal to the number of control points in the U and V directions.</description>
        <OLE-syntax>Rhino.SurfaceWeights (strObject [, arrWeights])<input name="strObject" optional="Required" vartype="String">The object's  identifier.
          <input name="arrWeights" optional="Optional" vartype="geometrical-string-array">The new surface  weights.
          <output name="missing" optional="Optional" vartype="Array">The weight values of the surface if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="TrimBrep">
        <description>Trims a surface or polysurface using an oriented cutter. The cutter can be a surface, a polysurface, or a plane.</description>
        <OLE-syntax>Rhino.TrimBrep (strObject, strCutter, dblTolerance)<input name="strObject" optional="Required" vartype="String">The identifier  of the surface or polysurface object to trim.
          <input name="strCutter" optional="Required" vartype="String">he  identifier of the cutting surface or polysurface object.
          <input name="arrPlane" optional="Required" vartype="geometrical-string-array">The cutting  plane.
          <input name="dblTolerance" optional="Optional" vartype="double">The trimming  tolerance. If omitted, the document's absolute tolerance is used.
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the retained components  if successful. The identifier of the first element in the array  will match the identifier of the target surface or polysurface.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="TrimSurface">
        <description>Removes the portions of the surface outside of the specified interval.</description>
        <OLE-syntax>Rhino.TrimSurface (strSurface, intDir, arrInterval [, blnDelete])<input name="strSurface" optional="Required" vartype="String">The identifier  of the surface object to trim.
          <input name="intDir" optional="Required" vartype="integer">If 0 (U), then arrInterval specifies an sub-interval of SurfaceDomain(strSurface, 0). If 1 (V), then arrInterval specifies an sub-interval of SurfaceDomain(strSurface,  1).
          <input name="arrInterval" optional="Required" vartype="geometrical-string-array">The interval of the surface to keep. If intDir = 0, then the portions of the surface with parameters (s, t) satisfying s &lt; SurfaceDomain(strSurface, 0)(0) or s &gt; SurfaceDomain(strSurface, 0)(1) are trimmed away. If intDir = 1, then the portions of the surface with parameters (s, t) satisfying t &lt;SurfaceDomain(strSurface, 1)(0) or t &gt;SurfaceDomain(strSurface,  1)(1) are trimmed away.
          <input name="blnDelete" optional="Optional" vartype="Boolean">Delete input  surface. If omitted, the input surface will not be deleted  (False).
          <output name="missing" optional="Optional" vartype="String">The identifier of the new surface if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Surface_and_Polysurface_Methods" name="Rhino">
      <method name="UnrollSurface">
        <description>Flattens (develops) a surface or polysurface to a planar surface. For more information on developable surfaces, see the Rhino help file.</description>
        <OLE-syntax>Rhino.UnrollSurface (strSurface [, blnExplode])<input name="strSurface" optional="Required" vartype="String">The identifier  of the surface or polysurface to unroll.
          <input name="blnExplode" optional="Optional" vartype="Boolean">If True,  then resulting surfaces are not joined. If False (Default), then  resulting surfaces are joined along the same edges that were joined  in the original polysurface.
          <output name="missing" optional="Optional" vartype="Array">The identifiers of the flatten surfaces  or polysurfaces if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="AddToolbar">
        <description>Create new toolbar with one blank button.</description>
        <OLE-syntax>Rhino.AddToolbar (strName, strToolbar)<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <input name="strToolbar" optional="Required" vartype="String">The name of a toolbar in the collection to add.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="AddToolbarButton">
        <description>Add a new button to specified toolbar. The new button will be completely blank.</description>
        <OLE-syntax>Rhino.AddToolbarButton (strName, strToolbar)<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <input name="strToolbar" optional="Required" vartype="String">The name of a toolbar in the collection to add a button.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="AddToolbarCollection">
        <description>Create new toolbar collection file with no toolbars.</description>
        <OLE-syntax>Rhino.AddToolbarCollection (strFile)<input name="strFile" optional="Required" vartype="String">The filename of the toolbar collection to create.
          <output name="missing" optional="Optional" vartype="String">The name, or alias, of the newly created toolbar collection if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="CloseToolbarCollection">
        <description>Closes a currently open toolbar collection.</description>
        <OLE-syntax>Rhino.CloseToolbarCollection (strName [, blnPrompt])<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <input name="blnPrompt" optional="Optional" vartype="Boolean">If True, then the user will be prompted to save the collection file if it has been modified prior to closing. If False, then the collection file is closed without saving. The default value is False.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="DeleteToolbar">
        <description>Deletes a toolbar from an open toolbar collection.</description>
        <OLE-syntax>Rhino.DeleteToolbar (strName, strToolbar)<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <input name="strToolbar" optional="Required" vartype="String">The name of a toolbar in the collection to remove.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="HideToolBar">
        <OLE-syntax>Rhino.HideToolbar (strName, strToolbar)<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <input name="strToolbar" optional="Required" vartype="String">The name of a toolbar in the collection to hide.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="IsToolBar">
        <OLE-syntax>Rhino.IsToolbar (strName, strToolbar)<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <input name="strToolbar" optional="Required" vartype="String">The name of a toolbar in the collection to verify.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="IsToolbarCollection">
        <description>Verifies that a toolbar collection is open.</description>
        <OLE-syntax>Rhino.IsToolbarCollection (strFile)<input name="strFile" optional="Required" vartype="String">The full path to the toolbar collection file to verify.
          <output name="missing" optional="Optional" vartype="String">The Rhino-assigned name of the toolbar collection if successful..</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="IsToolbarDocked">
        <description>Verifies that a visible toolbar in a currently open toolbar collection is docked.</description>
        <OLE-syntax>Rhino.IsToolbarDocked (strName, strToolbar)<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <input name="strToolbar" optional="Required" vartype="String">The name of a toolbar in the collection to verify.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="IsToolBarVisible">
        <OLE-syntax>Rhino.IsToolbarVisible (strName, strToolbar)<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <input name="strToolbar" optional="Required" vartype="String">The name of a toolbar in the collection to verify.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="OpenToolbarCollection">
        <description>Opens an existing toolbar collection file.</description>
        <OLE-syntax>Rhino.OpenToolbarCollection (strFile)<input name="strFile" optional="Required" vartype="String">The full path to the toolbar collection file to open.
          <output name="missing" optional="Optional" vartype="String">The Rhino-assigned name of the toolbar collection if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="SaveToolbarCollection">
        <description>Saves an open toolbar collection to disk.</description>
        <OLE-syntax>Rhino.SaveToolbarCollection (strName)<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="SaveToolbarCollectionAs">
        <description>Saves an open toolbar collection to a different disk file.</description>
        <OLE-syntax>Rhino.SaveToolbarCollectionAs (strName)<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <input name="strFile" optional="Required" vartype="String">The full path to the toolbar collection file to create.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="ShowToolBar">
        <OLE-syntax>Rhino.ShowToolbar (strName, strToolbar)<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <input name="strToolbar" optional="Required" vartype="String">The name of a toolbar in the collection to show.
          <output name="missing" optional="Optional" vartype="Boolean">True or false indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="ToolbarCollectionCount">
        <description>Returns the number of currently open toolbar collections.</description>
        <OLE-syntax>Rhino.ToolbarCollectionCount ()<output name="missing" optional="Optional" vartype="Number">The number of currently open toolbar collections if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="ToolbarCollectionNames">
        <description>Returns the name of all currently open toolbar collections.</description>
        <OLE-syntax>Rhino.ToolbarCollectionNames ([blnPath])<output name="missing" optional="Optional" vartype="Array">The names of all currently open toolbar collections if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="ToolbarCollectionPath">
        <description>Returns the full path to a currently open toolbar collection file.</description>
        <OLE-syntax>Rhino.ToolbarCollectionPath (strName)<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <output name="missing" optional="Optional" vartype="String">The full path to the toolbar collection if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="ToolBarCount">
        <OLE-syntax>Rhino.ToolbarCount (strName)<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <output name="missing" optional="Optional" vartype="Number">The number of toolbars in the toolbar collection if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Toolbar_Methods" name="Rhino">
      <method name="ToolBarNames">
        <OLE-syntax>Rhino.ToolbarNames (strName)<input name="strName" optional="Required" vartype="String">The name of a currently open toolbar collection.
          <output name="missing" optional="Optional" vartype="Array">The names of all toolbars in the toolbar collection if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="IsXformIdentity">
        <description>Verifies that a matrix is the identity transformation.</description>
        <OLE-syntax>Rhino.IsXformIdentity (arrXform)<input name="arrXform" optional="Required" vartype="unknown-type-array">A 4x4 transformation matrix.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="IsXformSimilarity">
        <description>Verifies that a matrix is a similarity transformation. A similarity transformation can be broken into a sequence of dilations, translations, rotations, and reflections.</description>
        <OLE-syntax>Rhino.IsXformSimilarity (arrXform)<input name="arrXform" optional="Required" vartype="unknown-type-array">A 4x4 transformation  matrix.
          <output name="missing" optional="Optional" vartype="Number">The similarity, where:</output>
          <output name="missing" optional="Optional" vartype="Value">Description</output>
          <output name="missing" optional="Optional" vartype="-1">This transformation is an orientation  preserving similarity</output>
          <output name="missing" optional="Optional" vartype="0">This transformation is not a  similarity.</output>
          <output name="missing" optional="Optional" vartype="1">This transformation is an orientation  preserving similarity</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="IsXformSingular">
        <description>Verifies that a matrix is singular. Matrices that are not invertible is called singular, or degenerate, matrices. A matrix is singular if and only if its determinant is zero.</description>
        <OLE-syntax>Rhino.IsXformSingular (arrXform)<input name="arrXform" optional="Required" vartype="unknown-type-array">A 4x4 transformation  matrix.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating singular or non-singular.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="IsXformZero">
        <description>Verifies that a matrix is the zero transformation.</description>
        <OLE-syntax>Rhino.IsXformZero (arrXform)<input name="arrXform" optional="Required" vartype="unknown-type-array">A 4x4 transformation matrix.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformChangeBasis">
        <description>Returns a change of basis transformation matrix.</description>
        <OLE-syntax>Rhino.XformChangeBasis (arrPlane1, arrPlane2)<output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
          <output name="missing" optional="Optional" vartype="Notes">If you have points defined with respect to planes, the version of XformChangeBasis that takes two planes computes the transformation to change coordinates from one plane to another. The predefined world plane, WorldXYPlane, can be used as an argument.</output>
          <output name="missing" optional="Optional" vartype="The version of XformChangeBasis that takes six vectors maps (a0, b0, c0) to (a1, b1, c1) where a0*X0 + b0*Y0 + c0*Z0 = a1*X1 + b1*Y1 + c1*Z1.">The change of basis transformation is not the same as the rotation transformation that rotates one orthonormal frame to another. See XformRotation.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformCompare">
        <description>Compares two transformation matrices.</description>
        <OLE-syntax>Rhino.XformCompare (arrXform1, arrXform2)<input name="arrXform1" optional="Required" vartype="unknown-type-array">The first 4x4 transformation matrix to compare.
          <input name="arrXform2" optional="Required" vartype="unknown-type-array">The second 4x4 transformation matrix to compare.
          <output name="missing" optional="Optional" vartype="-1">If arrXform1 is less than arrXform2.</output>
          <output name="missing" optional="Optional" vartype="0">If arrXform1 is equal to arrXform2.</output>
          <output name="missing" optional="Optional" vartype="1">If arrXform1 is greater than arrXform2.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformCPlaneToWorld">
        <description>Transforms a point from construction plane coordinates to world coordinates.</description>
        <OLE-syntax>Rhino.XformCPlaneToWorld (arrPoint, arrPlane)<input name="arrPoint" optional="Required" vartype="single-xyz-array">A 3-D point in construction plane coordinates.
          <input name="arrPlane" optional="Required" vartype="geometrical-string-array">The construction plane. The elements of a plane array are as follows:<input-subset name="0" optional="Required" vartype="geometrical-string-array">Required. The construction plane's origin (3-D point).</input-subset>
            <input-subset name="1" optional="Required" vartype="geometrical-string-array">Required. The construction plane's X axis direction (3-D vector).</input-subset>
            <input-subset name="2" optional="Required" vartype="geometrical-string-array">Required. The construction plane's Y axis direction (3-D vector).</input-subset>
            <input-subset name="3" optional="Required" vartype="geometrical-string-array">Optional. The construction plane's Z axis direction (3-D vector).</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">A 3-D point in world coordinates if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformDeterminant">
        <description>Returns the determinant of a transformation matrix. If the determinant of a transformation matrix is 0, the matrix is said to be singular. Singular matrices do not have inverses.</description>
        <OLE-syntax>Rhino.XformDeterminant (arrXform)<input name="arrXform" optional="Required" vartype="unknown-type-array">A 4x4 transformation matrix.
          <output name="missing" optional="Optional" vartype="Number">The determinant if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformDiagonal">
        <description>Returns a diagonal transformation matrix. Diagonal matrices are 3x3 with the bottom row = 0,0,0,1.</description>
        <OLE-syntax>Rhino.XformDiagonal (dblValue)<input name="dblValue" optional="Required" vartype="number">The diagonal value.
          <output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformIdentity">
        <description>Returns the identity transformation matrix.</description>
        <OLE-syntax>Rhino.XformIdentity ()<output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformInverse">
        <description>Returns the inverse of a non-singular transformation matrix.</description>
        <OLE-syntax>Rhino.XformInverse (arrXform)<input name="arrXform" optional="Required" vartype="unknown-type-array">A 4x4 transformation matrix.
          <output name="missing" optional="Optional" vartype="Array">The inverted 4x4 transformation matrix if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If matrix is non-singular, On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformLayoutToWorld">
        <description>Returns the page layout to detail-world transformation.</description>
        <OLE-syntax>Rhino.XformLayoutToWorld (strLayout, strDetail)<input name="arrPoint" optional="Required" vartype="String">he title or identifier  of an existing page layout view.
          <input name="arrPlane" optional="Required" vartype="String">he title identifier  of an existing detail view in the layout view.
          <output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix if successful</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformMirror">
        <description>Creates a mirror transformation matrix.</description>
        <OLE-syntax>Rhino.XformMirror (arrPoint, arrNormal)<input name="arrPoint" optional="Required" vartype="single-xyz-array">A 3-D point on mirror plane.
          <input name="arrNormal" optional="Required" vartype="geometrical-string-array">A 3-D vector that is normal to mirror plane.
          <output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix is successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformMultiply">
        <description>Multiples two transformation matrices, where arrXform = arrXform1 * arrXform2.</description>
        <OLE-syntax>Rhino.XformMultiply (arrXform1, arrXform2)<input name="arrXform1" optional="Required" vartype="unknown-type-array">The first 4x4 transformation matrix to multiply.
          <input name="arrXform2" optional="Required" vartype="unknown-type-array">The second 4x4 transformation matrix to multiply.
          <output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformPlanarProjection">
        <description>Returns a transformation matrix that projects to a plane.</description>
        <OLE-syntax>Rhino.XformPlanarProjection (arrPlane)<input name="arrPlane" optional="Required" vartype="geometrical-string-array">The plane to project to.
          <output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformRotation">
        <description>Returns a rotation transformation matrix. The XformRotation provides several ways to compute a rotation transformation. A positive rotation angle indicates a counter-clockwise (right hand rule) rotation about the axis of rotation.</description>
        <OLE-syntax>Rhino.XformRotation (arrPlane1, arrPlane2)<input name="dblAngle" optional="Required" vartype="double">The rotation angle in degrees.
          <output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
          <output name="missing" optional="Optional" vartype="Notes">Option 1 creates a rotation transformation that maps arrPlane1 to arrPlane1. The planes should be right hand orthonormal planes. This transformations is not the same as the change of basis transformations. For more information, see XformChangeBasis.</output>
          <output name="missing" optional="Optional" vartype="Option 2 calculate the minimal transformation that rotates arrStartDir to arrEndDir while fixing arrPoint.">Option 4 required that frames should be right hand orthonormal frames. The resulting rotation fixes the origin (0,0,0), maps initial X to final X, initial Y to final Y, and initial Z to final Z.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformScale">
        <description>Returns a scale transformation matrix.</description>
        <OLE-syntax>Rhino.XformScale (arrPlane, dblXScale, dblYScale, dblZScale)<input name="dblXScale" optional="Required" vartype="double">The scale factor in the x-axis direction.
          <input name="dblYScale" optional="Required" vartype="double">The scale factor in the y-axis direction.
          <input name="dblZScale" optional="Required" vartype="double">The scale factor in the z-axis direction.
          <output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
          <output name="missing" optional="Optional" vartype="Notes">Option 1 creates a non-uniform scale transformation with the origin of arrPlane as the fixed point.</output>
          <output name="missing" optional="Optional" vartype="Option 2 creates a non-uniform scale transformation with the world origin as the fixed point.">Option 3 create non-uniform scale transformation. The diagonal is (arrVector.x, arrVector.y, arrVector.z, 1).</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformScreenToWorld">
        <description>Transforms either client-area coordinates of a specified view or screen coordinates to world coordinates. The resulting coordinates are represented as a 3-D point.</description>
        <OLE-syntax>Rhino.XformScreenToWorld (arrPoint [, strView [, blnConvert]])<input name="arrPoint" optional="Required" vartype="single-xyz-array">A 2-D point in either client-area coordinates of a specified view or screen coordinates.
          <input name="strView" optional="Optional" vartype="String">The title of the view. If omitted, the active view is used.
          <input name="blnConvert" optional="Optional" vartype="Boolean">If omitted or False, the function assumes arrPoint represents client-area coordinates. If True, then the function assumes arrPoint represents screen coordinates.
          <output name="missing" optional="Optional" vartype="Array">A 3-D point in world coordinates if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformShear">
        <description>Returns a shear transformation matrix.</description>
        <OLE-syntax>Rhino.XformShear (arrPlane, arrX1, arrY1, arrZ1)<output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformTranslation">
        <description>Creates a translation transformation matrix.</description>
        <OLE-syntax>Rhino.XformTranslation (arrVector)<input name="arrVector" optional="Required" vartype="geometrical-string-array">A 3-D translation vector.
          <output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix is successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformWorldToCPlane">
        <description>Transforms a point from world coordinates to construction plane coordinates.</description>
        <OLE-syntax>Rhino.XformWorldToCPlane (arrPoint, arrPlane)<input name="arrPoint" optional="Required" vartype="single-xyz-array">A 3-D point in world coordinates.
          <input name="arrPlane" optional="Required" vartype="geometrical-string-array">The construction plane. The elements of a plane array are as follows:<input-subset name="0" optional="Required" vartype="geometrical-string-array">Required. The construction plane's origin (3-D point).</input-subset>
            <input-subset name="1" optional="Required" vartype="geometrical-string-array">Required. The construction plane's X axis direction (3-D vector).</input-subset>
            <input-subset name="2" optional="Required" vartype="geometrical-string-array">Required. The construction plane's Y axis direction (3-D vector).</input-subset>
            <input-subset name="3" optional="Required" vartype="geometrical-string-array">Optional. The construction plane's Z axis direction (3-D vector).</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">A 3-D point in construction plane coordinates if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformWorldToLayout">
        <description>Returns the detail-world to page layout transformation.</description>
        <OLE-syntax>Rhino.XformWorldToLayout (strLayout, strDetail)<input name="arrPoint" optional="Required" vartype="String">he title or identifier  of an existing page layout view.
          <input name="arrPlane" optional="Required" vartype="String">he title identifier  of an existing detail view in the layout view.
          <output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix if successful</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformWorldToScreen">
        <description>Transforms a point from world coordinates to either client-area coordinates of the specified view or screen coordinates. The resulting coordinates are represented as a 2-D point.</description>
        <OLE-syntax>Rhino.XformWorldToScreen (arrPoint [, strView [, blnConvert]])<input name="arrPoint" optional="Required" vartype="single-xyz-array">A 3-D point in world coordinates.
          <input name="strView" optional="Optional" vartype="String">The title of the view. If omitted, the active view is used.
          <input name="blnConvert" optional="Optional" vartype="Boolean">If omitted or False, the function returns the results as client-area coordinates of the specified view. If True, then the results are returned as screen coordinates.
          <output name="missing" optional="Optional" vartype="Array">If blnConvert is omitted or False, a 2-D point in client-area coordinates if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If blnConvert is True, a 2-D point in screen coordinates if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Transformation_Methods" name="Rhino">
      <method name="XformZero">
        <description>Returns a zero transformation matrix.</description>
        <OLE-syntax>Rhino.XformZero ()<output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="AttributeDataCount">
        <description>Returns the number of RhinoScript user data items on an object's attributes.</description>
        <OLE-syntax>Rhino.AttributeDataCount (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Number">The number of RhinoScript object user data items if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="DeleteAttributeData">
        <description>Removes RhinoScript user data items from an object's attributes.</description>
        <OLE-syntax>Rhino.DeleteAttributeData (strObject [, strSection [, strEntry]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strSection" optional="Optional" vartype="String">The section name. If omitted, all sections and their corresponding entries are removed.
          <input name="strEntry" optional="Optional" vartype="String">The entry name. If omitted, all entries for strSection are removed.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="DeleteDocumentData">
        <description>Removes RhinoScript user data items from the current document.</description>
        <OLE-syntax>Rhino.DeleteDocumentData ([strSection [, strEntry]])<input name="strSection" optional="Optional" vartype="String">The section name. If omitted, all sections and their corresponding entries are removed.
          <input name="strEntry" optional="Optional" vartype="String">The entry name. If omitted, all entries for strSection are removed.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="DeleteObjectData">
        <description>Removes RhinoScript user data items from an object's geometry.</description>
        <OLE-syntax>Rhino.DeleteObjectData (strObject [, strSection [, strEntry]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strSection" optional="Optional" vartype="String">The section name. If omitted, all sections and their corresponding entries are removed.
          <input name="strEntry" optional="Optional" vartype="String">The entry name. If omitted, all entries for strSection are removed.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="DocumentDataCount">
        <description>Returns the number of RhinoScript user data items in the current document.</description>
        <OLE-syntax>Rhino.DocumentDataCount ()<output name="missing" optional="Optional" vartype="Number">The number of RhinoScript document user data items.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="GetAttributeData">
        <description>Returns a RhinoScript user data item from an object's attributes.</description>
        <OLE-syntax>Rhino.GetAttributeData (strObject [, strSection [, strEntry]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strSection" optional="Optional" vartype="String">The section name. If omitted, all section names are returned.
          <input name="strEntry" optional="Optional" vartype="String">The entry name. If omitted, all entry names for strSection are returned.
          <output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array of all section names if strSection is not specified.</output>
          <output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array of all entry names for strSection if strEntry is not specified.</output>
          <output name="missing" optional="Optional" vartype="String">The value of the entry if both strSection and strEntry are specified.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="GetDocumentData">
        <description>Returns a RhinoScript user data item from the current document.</description>
        <OLE-syntax>Rhino.GetDocumentData ([strSection [, strEntry]])<input name="strSection" optional="Optional" vartype="String">The section name. If omitted, all section names are returned.
          <input name="strEntry" optional="Optional" vartype="String">The entry name. If omitted, all entry names for strSection are returned.
          <output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array of all section names if strSection is not specified.</output>
          <output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array of all entry names for strSection if strEntry is not specified.</output>
          <output name="missing" optional="Optional" vartype="String">The value of the entry if both strSection and strEntry are specified.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="GetDocumentUserText">
        <description>Returns user text that is stored in the document. For more details on User Text, see the discussion found in the User Data Methods summary.</description>
        <OLE-syntax>Rhino.GetDocumentUserText ([strKey])<input name="strKey" optional="Optional" vartype="String">The key name.  If omitted or an empty string ("") is specified,  all key names for the object are returned.
          <output name="missing" optional="Optional" vartype="String">If strKey  is specified, then the associated value if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If strKey  is not specified, then an array of key names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="GetObjectData">
        <description>Returns a RhinoScript user data item from an object's geometry.</description>
        <OLE-syntax>Rhino.GetObjectData (strObject [, strSection [, strEntry]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strSection" optional="Optional" vartype="String">The section name. If omitted, all section names are returned.
          <input name="strEntry" optional="Optional" vartype="String">The entry name. If omitted, all entry names for strSection are returned.
          <output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array of all section names if strSection is not specified.</output>
          <output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array of all entry names for strSection if strEntry is not specified.</output>
          <output name="missing" optional="Optional" vartype="String">The value of the entry if both strSection and strEntry are specified.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="GetUserText">
        <description>Returns User Text that is stored on an object. For more details on User Text, see the discussion found in the User Data Methods summary.</description>
        <OLE-syntax>Rhino.GetUserText (strObject [, strKey [, blnAttachToGeometry]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strKey" optional="Optional" vartype="String">The key name. If omitted or an empty string ("") is specified, all key names for the object are returned.
          <input name="blnAttachToGeometry" optional="Optional" vartype="Boolean">The location on the object to retrieve the User Text.<input-subset name="True" optional="Optional" vartype="Boolean">Retrieve text information from the object geometry. If the information is closely associated with the geometry, attach it to the geometry. For example, a circle's radius should be attached to the geometry because the information will be invalid if the circle is control-point edited and changed into a NURBS curve.</input-subset>
            <input-subset name="False (Default)" optional="Optional" vartype="Boolean">Retrieve text information from the attributes of an object. If the information is higher-level attribute information, like color, then it should be attached to the object's attributes. Attribute information will persist when an object is control point edited, trimmed, copied, and so on.</input-subset>
          
          <output name="missing" optional="Optional" vartype="String">If strKey is specified, then the associated value if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If strKey is not specified, then an array of key names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="IsAttributeData">
        <description>Verifies that an object's attributes contains RhinoScript user data.</description>
        <OLE-syntax>Rhino.IsAttributeData (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating whether or not the object's attributes contains any RhinoScript user data if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="IsDocumentData">
        <description>Verifies that the current document contains RhinoScript user data.</description>
        <OLE-syntax>Rhino.IsDocumentData ()<output name="missing" optional="Optional" vartype="Boolean">True or False indicating whether or not the current document contains any RhinoScript document user data.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="IsDocumentUserText">
        <description>Verifies that the document contains user text. For more details on User Text, see the discussion found in the User Data Methods summary.</description>
        <OLE-syntax>Rhino.IsDocumentUserText ()<output name="missing" optional="Optional" vartype="Boolean">True if the document contains user text,  False otherwise.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="IsObjectData">
        <description>Verifies that an object's geometry contains RhinoScript user data.</description>
        <OLE-syntax>Rhino.IsObjectData (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating whether or not the object's geometry contains any RhinoScript user data if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="IsUserText">
        <description>Verifies that an object contains user text. For more details on User Text, see the discussion found in the User Data Methods summary.</description>
        <OLE-syntax>Rhino.IsUserText (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Number">0 = no user text; 1 = attribute user text; 2 = geometry user text; 3 = both attribute and geometry user text.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="ObjectDataCount">
        <description>Returns the number of RhinoScript user data items on an object's geometry.</description>
        <OLE-syntax>Rhino.ObjectDataCount (strObject)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <output name="missing" optional="Optional" vartype="Number">The number of RhinoScript object user data items if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="SetAttributeData">
        <description>Adds or sets a RhinoScript user data item to an object's attributes.</description>
        <OLE-syntax>Rhino.SetAttributeData (strObject, strSection, strEntry, strValue)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strSection" optional="Required" vartype="String">The application name.
          <input name="strEntry" optional="Required" vartype="String">The key name.
          <input name="strValue" optional="Required" vartype="String">The string value.
          <output name="missing" optional="Optional" vartype="String">The previous value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If no previous value exits, if not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="SetDocumentData">
        <description>Adds or sets a RhinoScript user data item to the current document.</description>
        <OLE-syntax>Rhino.SetDocumentData (strSection, strEntry, strValue)<input name="strSection" optional="Required" vartype="String">The section name.
          <input name="strEntry" optional="Required" vartype="String">The entry name.
          <input name="strValue" optional="Required" vartype="String">The string value.
          <output name="missing" optional="Optional" vartype="String">The previous value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If no previous value exits, if not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="SetDocumentUserText">
        <description>Sets or removes user text stored in the document. For more details on User Text, see the discussion found in the User Data Methods summary.</description>
        <OLE-syntax>Rhino.SetDocumentUserText (strKey [, strValue])<input name="strKey" optional="Required" vartype="String">The key name to set.
          <input name="strValue" optional="Optional" vartype="String">The string value to set. If omitted the key/value pair specified by strKey  will be deleted.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="SetObjectData">
        <description>Adds or sets a RhinoScript user data item to an object's geometry.</description>
        <OLE-syntax>Rhino.SetObjectData (strObject, strSection, strEntry, strValue)<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strSection" optional="Required" vartype="String">The application name.
          <input name="strEntry" optional="Required" vartype="String">The key name.
          <input name="strValue" optional="Required" vartype="String">The string value.
          <output name="missing" optional="Optional" vartype="String">The previous value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If no previous value exits, if not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Data_Methods" name="Rhino">
      <method name="SetUserText">
        <description>Sets or removes user text stored on an object. For more details on User Text, see the discussion found in the User Data Methods summary.</description>
        <OLE-syntax>Rhino.SetUserText (strObject, strKey [, strValue [, blnAttachToGeometry]])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strKey" optional="Required" vartype="String">The key name to set.
          <input name="strValue" optional="Optional" vartype="String">The string value to set. If omitted the key/value pair specified by strKey will be deleted.
          <input name="blnAttachToGeometry" optional="Optional" vartype="Boolean">The location on the object to store the User Text.<input-subset name="True" optional="Optional" vartype="Boolean">Attaches text information to the object geometry. If the information is closely associated with the geometry, attach it to the geometry. For example, a circle's radius should be attached to the geometry because the information will be invalid if the circle is control-point edited and changed into a NURBS curve.</input-subset>
            <input-subset name="False (Default)" optional="Optional" vartype="Boolean">Attaches text information to the attributes of an object. If the information is higher-level attribute information, like color, then it should be attached to the object's attributes. Attribute information will persist when an object is control point edited, trimmed, copied, and so on.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="BrowseForFolder">
        <description>Displays the Windows browse-for-folder dialog box allowing the user to select a folder.</description>
        <OLE-syntax>Rhino.BrowseForFolder ([strFolder [, strMessage [, strTitle]]])<input name="strFolder" optional="Optional" vartype="String">A default folder.
          <input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="strTitle" optional="Optional" vartype="String">A dialog box title.
          <output name="missing" optional="Optional" vartype="String">The selected folder if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="CheckListBox">
        <description>Displays a list of items in a checkable-style list box dialog.</description>
        <OLE-syntax>Rhino.CheckListBox (arrItems, arrValues [, strMessage [, strTitle [, strDefault]]])<input name="arrItems" optional="Required" vartype="unknown-string-array">A zero-based,  one-dimensional array of string items.
          <input name="arrValues" optional="Required" vartype="boolean-array">A zero-based,  one-dimensional array of boolean values indicating the checked  state of each item in the list.
          <input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="strTitle" optional="Optional" vartype="String">A dialog  box title.
          <input name="strDefault" optional="Optional" vartype="String">The selected  item in the list.
          <output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array of  boolean values indicating the new checked state of each item in  the list.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="ComboListBox">
        <description>Displays a list of items in a combo-style list box dialog.</description>
        <OLE-syntax>Rhino.ComboListBox (arrItems [, strMessage [, strTitle [, strDefault]]])<input name="arrItems" optional="Required" vartype="unknown-string-array">A zero-based,  one-dimensional array of string items.
          <input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="strTitle" optional="Optional" vartype="String">A dialog  box title.
          <input name="strDefault" optional="Optional" vartype="String">The selected  item in the list.
          <output name="missing" optional="Optional" vartype="String">The selected item if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="EditBox">
        <description>Displays a dialog box prompting the user to enter a string value. The string value may span multiple lines.</description>
        <OLE-syntax>Rhino.EditBox ([strString [, strMessage [, strTitle]]])<input name="strString" optional="Optional" vartype="String">A default string value.
          <input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="strTitle" optional="Optional" vartype="String">A dialog box title.
          <output name="missing" optional="Optional" vartype="String">Multiple lines that are separated by carriage return-linefeed combinations if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="EditListBox">
        <description>Displays a sizeable Windows dialog box with an editable list box. Items can be added or removed from the list, and the order of the list can be changed.</description>
        <OLE-syntax>Rhino.EditListBox (arrItems [, strMessage [, strTitle]])<input name="arrItems" optional="Required" vartype="unknown-string-array">An array of  strings.
          <input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="strTitle" optional="Optional" vartype="String">A dialog  box title.
          <output name="missing" optional="Optional" vartype="Array">The strings if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetAngle">
        <description>Pauses for user input of an angle.</description>
        <OLE-syntax>Rhino.GetAngle (arrPoint, arrReference, dblAngle, strMessage)<input name="arrPoint" optional="Optional" vartype="single-xyz-array">A zero-based, one-dimensional array containing  three numbers identifying the starting, or base, point.
          <input name="arrReference" optional="Optional" vartype="single-xyz-array">A zero-based, one-dimensional array containing  three numbers identifying a reference point. If specified,  the reference angle is calculated from it and the base point.
          <input name="dblAngle" optional="Optional" vartype="double">A default angle value specified in degrees.
          <input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <output name="missing" optional="Optional" vartype="Number">The angle in degrees if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetAngleEx">
        <description>Pauses for user input of an angle.</description>
        <OLE-syntax>Rhino.GetAngleEx ([strPrompt1 [, strPrompt2 [, strPrompt3 [, dblAngle]]]])<input name="strPrompt1  " optional="Optional" vartype="String">A prompt  or message for the first point, which is the center, or base,  point of the angle calculation.
          <input name="strPrompt2  " optional="Optional" vartype="String">A prompt  or message for the second point, which is the first reference  point of the angle calculation.
          <input name="strPrompt3" optional="Optional" vartype="String">A prompt  or message for the third point, which is the second reference  point of the angle calculation.
          <input name="dblAngle" optional="Optional" vartype="double">A default  angle value specified in degrees.
          <input name="arrPlane" optional="Required" vartype="single-xyz-array">The plane  on which the angle calculation will be made. Note, the origin  of the plane is the center, or base, point of the angle calculation.
          <input name="arrCenter" optional="Required" vartype="single-xyz-array">The center,  or base, point of the angle calculation.
          <input name="arrReference" optional="Required" vartype="single-xyz-array">The first  reference point of the angle calculation.
          <output name="missing" optional="Optional" vartype="Number">The  angle in degrees if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetBoolean">
        <description>Pauses for user input of one or more boolean values. Boolean values are displayed as click-able command-line option toggles.</description>
        <OLE-syntax>Rhino.GetBoolean (strMessage, arrItems, arrDefaults)<input name="strMessage" optional="Required" vartype="String">A prompt  or message.
          <input name="arrItems" optional="Required" vartype="geometrical-string-array">An array of  strings that describe the boolean items that will appear as command-line  option toggles. Each boolean item consists of three strings.<input-subset name="0" optional="Required" vartype="geometrical-string-array">A description of the boolean value.</input-subset>
            <input-subset name="1" optional="Required" vartype="geometrical-string-array">A string identifying the False  value.</input-subset>
            <input-subset name="2" optional="Required" vartype="geometrical-string-array">A string identifying the True value.</input-subset>
          
          <input name="arrDefaults" optional="Required" vartype="boolean-array">A array of  boolean values to be used as default, or starting values.
          <output name="missing" optional="Optional" vartype="Array">An array of boolean values that represent  the boolean items, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetBox">
        <description>Pauses for user input of a box.</description>
        <OLE-syntax>Rhino.GetBox ([intMode [, arrPoint [, strPrompt1 [, strPrompt2 [, strPrompt3]]]]])<input name="intMode" optional="Optional" vartype="integer">The box selection mode. If not specified, all modes (0) are available. The box selection modes are as follows:<input-subset name="0" optional="Optional" vartype="integer">All modes.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Corner. The base rectangle is created by picking two corner points.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">3-Point. The base rectangle is created by picking three points</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Vertical. The base vertical rectangle is created by picking three points.</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Center. The base rectangle is created by picking a center point and a corner point.</input-subset>
          
          <input name="arrPoint" optional="Optional" vartype="single-xyz-array">A 3-D base point.
          <input name="strPrompt1" optional="Optional" vartype="String">The first prompt or message.
          <input name="strPrompt2" optional="Optional" vartype="String">The second prompt or message.
          <input name="strPrompt3" optional="Optional" vartype="String">The third prompt or message. The third prompt used only with 3Point and Vertical modes.
          <output name="missing" optional="Optional" vartype="Array">An array of eight 3-D points that define the corners of the box if successful. Points are returned in counter-clockwise order starting with the bottom rectangle of the box. See the image below for details.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetCircle">
        <description>Pauses for user input of a circle.</description>
        <OLE-syntax>Rhino.GetCircle ([intMode [, arrPoint [, arrPlane [, strPrompt1 [, strPrompt2 [, strPrompt3]]]]])<input name="intMode" optional="Optional" vartype="integer">The box selection  mode. If not specified, all modes (0) are available. The  box selection modes are as follows:<input-subset name="0" optional="Optional" vartype="integer">All modes.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Center. The circle is created  by picking a center point and a radius point.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">2-Point. The circle is created  by picking two points.</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">3-Point. The circle is created  by picking three points.</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Tangent. The circle is created  tangent to curves..</input-subset>
            <input-subset name="5" optional="Optional" vartype="integer">Fit. The circle is created  by fitting to selected points.</input-subset>
          
          <input name="arrPoint" optional="Optional" vartype="single-xyz-array">A 3-D center point. Note, if intMode=1, then arrPoint is required.
          <input name="arrPlane" optional="Optional" vartype="geometrical-string-array">A circle's  base plane. Note, not all modes use this parameter.
          <input name="strPrompt1" optional="Optional" vartype="String">The first  prompt or message.
          <input name="strPrompt2" optional="Optional" vartype="String">The second  prompt or message.
          <input name="strPrompt3" optional="Optional" vartype="String">The third  prompt or message.
          <output name="missing" optional="Optional" vartype="Array">An array containing the definition of the  circle if successful. The elements of the array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Type</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Array">The base plane of the circle.</output>
          <output name="missing" optional="Optional" vartype="2">Number</output>
          <output name="missing" optional="Optional" vartype="The radius of the circle.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetColor">
        <description>Displays the Rhino color picker dialog box allowing the user to select an RGB color value.</description>
        <OLE-syntax>Rhino.GetColor ([lngColor])<input name="lngColor" optional="Optional" vartype="long">A default RGB color value. If omitted, the default color is black, or RGB(0,0,0).
          <output name="missing" optional="Optional" vartype="Number">The RGB color value selected by the user if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetCursorPos">
        <description>Retrieves the cursor's position.</description>
        <OLE-syntax>Rhino.GetCursorPos ()<output name="missing" optional="Optional" vartype="Array">An array containing the following information  if successful:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">Array. The cursor position  in world (3-D) coordinates. </output>
          <output name="missing" optional="Optional" vartype="1">Array. The cursor position  in screen (2-D) coordinates. </output>
          <output name="missing" optional="Optional" vartype="2">String. The identifier  of the currently active view.</output>
          <output name="missing" optional="Optional" vartype="3">Array. The cursor position  in client (2-D) coordinates.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetDistance">
        <description>Pauses for user input of a distance.</description>
        <OLE-syntax>Rhino.GetDistance ([arrPoint [, dblDistance [, strMessage1 [, strMessage2]]]])<input name="arrPoint" optional="Optional" vartype="single-xyz-array">A zero-based, one-dimensional array containing three numbers identifying the first distance point.
          <input name="dblDistance" optional="Optional" vartype="double">A default distance value.
          <input name="strMessage1" optional="Optional" vartype="String">A prompt or message for the first distance point.
          <input name="strMessage2" optional="Optional" vartype="String">A prompt or message for the second distance point.
          <output name="missing" optional="Optional" vartype="Number">The distance input by the user if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetEdgeCurves">
        <description>Prompts the user to pick one or more surface or polysurface edge curves to duplicate.</description>
        <OLE-syntax>Rhino.GetEdgeCurves ([strMessage [, intMinCount [, intMaxCount [, blnSelect]]]])<input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="intMinCount" optional="Optional" vartype="integer">The minimum  number of edges to select. The default number is 1.
          <input name="intMaxCount" optional="Optional" vartype="integer">The maximum number of edges to select. If intMaxCount is 0, then the user must press enter to finish selection. If intMaxCount is -1, then selection stops as soon as there are at least intMinCount edges selected. If intMinCount &gt; 0, then the picking stops when there are intMaxCount  edges. The default number is 0.
          <input name="blnSelect" optional="Optional" vartype="Boolean">Select the  duplicated edge curves. The default operation is not to  select duplicated edge curves (False).
          <output name="missing" optional="Optional" vartype="Array">An array that contains arrays of edge information  if successful. The array of edge information will contain  the following:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">String. The identifier of  the newly duplicated edge curve.</output>
          <output name="missing" optional="Optional" vartype="1">String. The identifier of  the parent surface or polysurface.</output>
          <output name="missing" optional="Optional" vartype="2">Array. The selection point.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetInteger">
        <description>Pauses for user input of a whole number.</description>
        <OLE-syntax>Rhino.GetInteger ([strMessage [, intNumber [, intMin [, intMax]]]])<input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="intNumber" optional="Optional" vartype="integer">A default whole number value.
          <input name="intMin" optional="Optional" vartype="integer">A minimum allowable value.
          <input name="intMax" optional="Optional" vartype="integer">A maximum allowable value.
          <output name="missing" optional="Optional" vartype="Number">The whole number input by the user if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetLayer">
        <description>Displays a dialog box prompting the user to select a layer.</description>
        <OLE-syntax>Rhino.GetLayer ([strTitle [, strLayer [, blnShowNewLayer [, blnShowSetCurrent]]]])<input name="strTitle" optional="Optional" vartype="String">A dialog  box title.
          <input name="strLayer" optional="Optional" vartype="String">The name  of a layer to pre-select. If omitted, the current layer will be  pre-selected.
          <input name="blnShowNewLayer" optional="Optional" vartype="Boolean">Display  the "New" layer button. If omitted, the button is not  displayed.
          <input name="blnShowSetCurrent" optional="Optional" vartype="Boolean">Display  the "Set layer current" check box. If omitted,  the check box is not displayed.
          <output name="missing" optional="Optional" vartype="String">The  name of the selected layer if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetLayers">
        <description>Displays a dialog box prompting the user to select one or more layers.</description>
        <OLE-syntax>Rhino.GetLayers ([strTitle [, blnShowNewLayer]])<input name="strTitle" optional="Optional" vartype="String">A dialog  box title.
          <input name="blnShowNewLayer" optional="Optional" vartype="Boolean">Display  the "New" layer button. If omitted, the button is not  displayed.
          <output name="missing" optional="Optional" vartype="Array">The  names of the selected layers if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetLine">
        <description>Prompts the user to pick points that define a line.</description>
        <OLE-syntax>Rhino.GetLine ([intMode [, arrPoint [, strMessage1 [, strMessage2 [, strMessage3 [, blnBothSides ]]]]]])<input name="intMode " optional="Optional" vartype="Integer">The line definition mode. The possible values  are as follows:<input-subset name="0 (Default)" optional="Optional" vartype="Integer">Show all modes, start in two-point  mode</input-subset>
            <input-subset name="1" optional="Optional" vartype="Integer">Two-point. Defines a line  from two points.</input-subset>
            <input-subset name="2" optional="Optional" vartype="Integer">Normal. Defines a line  normal to a location on a surface.</input-subset>
            <input-subset name="3" optional="Optional" vartype="Integer">Angled. Defines a line  at a specified angle from a reference line.</input-subset>
            <input-subset name="4" optional="Optional" vartype="Integer">Vertical. Defines a line  vertical to the construction plane.</input-subset>
            <input-subset name="5" optional="Optional" vartype="Integer">Four-point. Defines a line  using two points to establish direction and two points  to establish length.</input-subset>
            <input-subset name="6" optional="Optional" vartype="Integer">Bisector. Defines a line  that bisects a specified angle.</input-subset>
            <input-subset name="7" optional="Optional" vartype="Integer">Perpendicular. Defines  a line perpendicular to or from a curve</input-subset>
            <input-subset name="8" optional="Optional" vartype="Integer">Tangent. Defines a line  tangent from a curve.</input-subset>
            <input-subset name="9" optional="Optional" vartype="Integer">Extension. Defines a line  that extends from a curve.</input-subset>
          
          <input name="arrPoint " optional="Optional" vartype="single-xyz-array">An optional starting point. Of omitted, the  user will be prompted for the starting point.
          <input name="strMessage1 " optional="Optional" vartype="String">A prompt or message for the first point.
          <input name="strMessage2" optional="Optional" vartype="String">A prompt or message for the second point.
          <input name="strMessage3" optional="Optional" vartype="String">A prompt or message for the mid point.
          <input name="blnBothSides " optional="Optional" vartype="Boolean">If intMode  &gt; 0, then use this option to draw the line on both sides of  the start point, creating the object twice as long as you indicate.  The default value is False, or to draw the line on just one side  of the start point.
          <output name="missing" optional="Optional" vartype="Array">An  array of two 3-D points that define the line if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetLinetype">
        <description>Displays a dialog box prompting the user to select a linetype.</description>
        <OLE-syntax>Rhino.GetLinetype ([strLinetype])<input name="strLinetype" optional="Optional" vartype="String">The name of the linetype to select. If omitted, the current linetype will be selected.
          <output name="missing" optional="Optional" vartype="String">The name of the selected linetype if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetMeshFaces">
        <description>Prompts the user to pick, or select, one or more mesh faces.</description>
        <OLE-syntax>Rhino.GetMeshFaces (strObject [, strMessage [, intMinCount [, intMaxCount]]])<input name="strObject" optional="Required" vartype="String">The mesh object's identifier.
          <input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="intMinCount" optional="Optional" vartype="integer">The minimum number of faces to select. The default number is 1.
          <input name="intMaxCount" optional="Optional" vartype="integer">The maximum number of faces to select. If intMaxCount is 0, then the user must press enter to finish selection. If intMaxCount is -1, then selection stops as soon as there are at least intMinCount faces selected. If intMinCount &gt; 0, then the picking stops when there are intMaxCount faces. The default number is 0.
          <output name="missing" optional="Optional" vartype="Array">An array of mesh face indices if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetMeshVertices">
        <description>Prompts the user to pick, or select, one or more mesh vertices.</description>
        <OLE-syntax>Rhino.GetMeshVertices (strObject [, strMessage [, intMinCount [, intMaxCount]]])<input name="strObject" optional="Required" vartype="String">The mesh object's identifier.
          <input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="intMinCount" optional="Optional" vartype="integer">The minimum number of vertices to select. The default number is 1.
          <input name="intMaxCount" optional="Optional" vartype="integer">The maximum number of vertices to select. If intMaxCount is 0, then the user must press enter to finish selection. If intMaxCount is -1, then selection stops as soon as there are at least intMinCount vertices selected. If intMinCount &gt; 0, then the picking stops when there are intMaxCount vertices. The default number is 0.
          <output name="missing" optional="Optional" vartype="Array">An array of mesh vertex indices if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetOption">
        <description>Prompts the user for one or more command-line options.</description>
        <OLE-syntax>Rhino.GetOption (strPrompt, arrOptions)<input name="strPrompt" optional="Required" vartype="String">A prompt  or message.
          <input name="arrOptions" optional="Required" vartype="geometrical-string-array">An array containing  one or more command line option arrays.<input-subset name="0" optional="Required" vartype="geometrical-string-array">Single, or one, shot option. This option array will show a click-able single-shot option in the form of &lt;strName&gt; on the  command line. The default option value is always False. If clicked,  a True value will be returned indicating that it was clicked.  The array elements are as follows:</input-subset>
          
          <input name="strName" optional="Required" vartype="String">The  name of the command-line option, as it will appear on  the command-line.<input-subset name="1" optional="Required" vartype="String">Boolean option. This option array will show a click-able Boolean option in the form of &lt;strName=strFalse/strTrue&gt; on the  command line. The array elements are as follows:</input-subset>
          
          <input name="strName" optional="Required" vartype="String">The  name of the command-line option, as it will appear on  the command-line.<input-subset name="2" optional="Required" vartype="String">strFalse</input-subset>
            <input-subset name="Required. String. A  string identifying the False value." optional="Required" vartype="String">3</input-subset>
          
          <input name="strTrue" optional="Required" vartype="String">A  string identifying the True value.<input-subset name="4" optional="Required" vartype="String">blnValue</input-subset>
            <input-subset name="1" optional="Required" vartype="String">strName</input-subset>
          
          <input name="intValue" optional="Required" vartype="integer">The  default option value.<input-subset name="3" optional="Required" vartype="integer">strPrompt</input-subset>
          
          <input name="intLowerLimit" optional="Optional" vartype="integer">The  smallest allowable value.<input-subset name="5" optional="Optional" vartype="integer">intUpperLimit</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">strName</input-subset>
          
          <input name="dblValue" optional="Required" vartype="double">The  default option value.<input-subset name="3" optional="Required" vartype="double">strPrompt</input-subset>
          
          <input name="dblLowerLimit" optional="Optional" vartype="double">The  smallest allowable value.<input-subset name="5" optional="Optional" vartype="double">dblUpperLimit</input-subset>
            <input-subset name="1" optional="Optional" vartype="double">strName</input-subset>
          
          <input name="arrList" optional="Required" vartype="geometrical-string-array">An  array of strings that will appear on the command-line  when the option is clicked.<input-subset name="3" optional="Required" vartype="geometrical-string-array">intIndex</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An  array of command-line option values, updated by the user, in the  order in which they were passed to the function, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetPoint">
        <description>Pauses for user input of a point.</description>
        <OLE-syntax>Rhino.GetPoint ([strMessage [, arrPoint [, dblDistance [, blnPlane [, blnSnapObject]]]]])<input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="arrPoint" optional="Optional" vartype="single-xyz-array">A starting,  or base, point.
          <input name="dblDistance" optional="Optional" vartype="double">If arrPoint is specified, then dblDistance is distance  from the base point to which point picking is constrained.
          <input name="arrEndPoint" optional="Optional" vartype="single-xyz-array">If arrPoint is specified, then arrEndPoint  is the end point of the line, between the two points, to which  point picking is constrained.
          <input name="blnPlane" optional="Optional" vartype="Boolean">Constrain  the point selection to the active construction plane.
          <input name="blnSnapObject" optional="Optional" vartype="Boolean">If specified,  then both the picked point and the identifier of the object that  the point was snapped to is returned. If no object was snapped  to, then Null is returned.
          <output name="missing" optional="Optional" vartype="Array">If blnSnapObject  was not specified or false, then the 3-D point input by the user,  if successful.</output>
          <output name="missing" optional="Optional" vartype="If blnSpapObject  was specified and true, then an array containing the following,  if successful:">Element</output>
          <output name="missing" optional="Optional" vartype="Type">Description</output>
          <output name="missing" optional="Optional" vartype="0">Array</output>
          <output name="missing" optional="Optional" vartype="The 3-D point input by the user.">1</output>
          <output name="missing" optional="Optional" vartype="String">The identifier of the object  that the point was snapped to. If no object was snapped  to, then this element will be Null.</output>
          <output name="missing" optional="Optional" vartype="2">String</output>
          <output name="missing" optional="Optional" vartype="The identifier of the viewport  or layout in which the point was input.">3</output>
          <output name="missing" optional="Optional" vartype="String">If the point was input in a  detail view, then the identifier of the active detail  view is returned. Otherwise, this element will be Null.</output>
          <output name="missing" optional="Optional" vartype="4">String</output>
          <output name="missing" optional="Optional" vartype="If the object was snapped to  in an inactive detail view, then the identifier of the  inactive detail view is returned. Otherwise, this element  will be Null.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetPointOnCurve">
        <description>Pauses for user input of a point constrained to a curve object.</description>
        <OLE-syntax>Rhino.GetPointOnCurve (strObject [, strMessage])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <output name="missing" optional="Optional" vartype="Array">The 3-D point selected by the user if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetPointOnLine">
        <description>Pauses for user input of a point constrained to an infinite line.</description>
        <OLE-syntax>Rhino.GetPointOnLine (strMessage, arrStart, arrEnd [, blnTrack])<input name="strMessage" optional="Required" vartype="String">A prompt or message.
          <input name="arrStart" optional="Required" vartype="single-xyz-array">The starting point of the line.
          <input name="arrEnd" optional="Required" vartype="single-xyz-array">The ending point of the line.
          <input name="blnTrack" optional="Optional" vartype="Boolean">Draw a tracking line from arrStart. If omitted, a tracking line is drawn (True).
          <output name="missing" optional="Optional" vartype="Array">The 3-D point selected by the user if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetPointOnMesh">
        <description>Pauses for user input of a point constrained to a mesh object.</description>
        <OLE-syntax>Rhino.GetPointOnMesh (strObject [, strMessage])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <output name="missing" optional="Optional" vartype="Array">The 3-D point selected by the user successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetPointOnPlane">
        <description>Pauses for user input of a point constrained to a plane.</description>
        <OLE-syntax>Rhino.GetPointOnPlane (strMessage, arrPlane [, arrPoint])<input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="arrPlane" optional="Optional" vartype="single-xyz-array">The plane to constrain the point to.
          <input name="arrPoint" optional="Optional" vartype="single-xyz-array">A 3-D point from with to draw a tracking line. If omitted, a tracking line will not be drawn.
          <output name="missing" optional="Optional" vartype="Array">The 3-D point selected by the user if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetPointOnSurface">
        <description>Pauses for user input of a point constrained to a surface or polysurface object.</description>
        <OLE-syntax>Rhino.GetPointOnSurface (strObject [, strMessage])<input name="strObject" optional="Required" vartype="String">The object's identifier.
          <input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <output name="missing" optional="Optional" vartype="Array">The 3-D point selected by the user successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetPoints">
        <description>Pauses for user input of one or more points.</description>
        <OLE-syntax>Rhino.GetPoints ([blnDraw [, blnPlane [, strMessage1 [, strMessage2 [, intMaxPoints [, arrBasePoint]]]]]])<input name="blnDraw" optional="Optional" vartype="Boolean">Draw lines between points. The default is not to draw lines between points (False).
          <input name="blnPlane" optional="Optional" vartype="Boolean">Constrain the point selection to the active construction plane. The default is not to constrain points to the active construction plane (False).
          <input name="strMessage1" optional="Optional" vartype="String">A prompt or message for the first point.
          <input name="strMessage2" optional="Optional" vartype="String">A prompt or message for the next points.
          <input name="intMaxPoints" optional="Optional" vartype="integer">The maximum number of points to pick. If not specified, an unlimited number of points can be picked.
          <input name="arrBasePoint" optional="Optional" vartype="single-xyz-array">A starting, or base, point.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetPolyline">
        <description>Prompts the user to pick points that define a polyline.</description>
        <OLE-syntax>Rhino.GetPolyline ([intFlags [, strMessage1 [, strMessage2 [, strMessage3[, strMessage4[, intMin[, intMax]]]]]]])<input name="intFlags " optional="Optional" vartype="Integer">The options,  or flags. Values can be added together to specify more than one  option. The default is 3.<input-subset name="1" optional="Optional" vartype="Integer">Permit close option. If specified,  then after 3 points have been picked, the user can type  "Close" and a closed polyline will be returned.</input-subset>
            <input-subset name="2" optional="Optional" vartype="Integer">Permit close snap. If specified,  then after 3 points have been picked, the user can pick  near the start point and a closed polyline will be returned.</input-subset>
            <input-subset name="4" optional="Optional" vartype="Integer">Force close. If specified, then the returned polyline is always closed. If specified, then intMax must  be 0 or &gt;= 4.</input-subset>
            <input-subset name="Note, the default is 3, or &quot;Permit close  option = True&quot;, &quot;Permit close snap = True&quot;, and  &quot;Force close = False&quot;." optional="Optional" vartype="Integer">strMessage1  </input-subset>
            <input-subset name="Optional. Number. The minimum  number of points to require. The default is 2." optional="Optional" vartype="Integer">intMax</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An  array of 3-D points that define the polyline if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetPrintWidth">
        <description>Displays a dialog box prompting the user to select a print width.</description>
        <OLE-syntax>Rhino.GetPrintWidth ([dblPrintWidth])<input name="dblPrintWidth" optional="Optional" vartype="double">The print width to select. If omitted, the default print width will be selected.
          <output name="missing" optional="Optional" vartype="Number">The value of the selected print width if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetReal">
        <description>Pauses for user input of a number.</description>
        <OLE-syntax>Rhino.GetReal ([strMessage [, dblNumber [, dblMin [, dblMax]]]])<input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="dblNumber" optional="Optional" vartype="double">A default number value.
          <input name="dblMin" optional="Optional" vartype="double">A minimum allowable value.
          <input name="dblMax" optional="Optional" vartype="double">A maximum allowable value.
          <output name="missing" optional="Optional" vartype="Number">The number input by the user if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetRectangle">
        <description>Pauses for user input of a rectangle.</description>
        <OLE-syntax>Rhino.GetRectangle ([intMode [, arrPoint [, strPrompt1 [, strPrompt2 [, strPrompt3]]]]])<input name="intMode" optional="Optional" vartype="integer">The rectangle selection mode. If not specified, all modes (0) are available. The rectangle selection modes are as follows:<input-subset name="0" optional="Optional" vartype="integer">All modes.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Corner. A rectangle is created by picking two corner points.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">3-Point. A rectangle is created by picking three points</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Vertical. A vertical rectangle is created by picking three points.</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Center. A rectangle is created by picking a center point and a corner point.</input-subset>
          
          <input name="arrPoint" optional="Optional" vartype="single-xyz-array">A 3-D base point.
          <input name="strPrompt1" optional="Optional" vartype="String">The first prompt or message.
          <input name="strPrompt2" optional="Optional" vartype="String">The second prompt or message.
          <input name="strPrompt3" optional="Optional" vartype="String">The third prompt or message. The third prompt used only with 3Point and Vertical modes.
          <output name="missing" optional="Optional" vartype="Array">An array of four 3-D points that define the corners of the rectangle if successful. Points are returned in counter-clockwise order. See the image below for details.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetString">
        <description>Pauses for user input of string value.</description>
        <OLE-syntax>Rhino.GetString ([strMessage [, strString [, arrStrings]]])<input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="strString" optional="Optional" vartype="String">A default  value.
          <input name="arrStrings" optional="Optional" vartype="unknown-string-array">A array of  strings to be displayed as click-able command options. Note, strings  cannot begin with a numeric character and they cannot contain  any white space.
          <output name="missing" optional="Optional" vartype="String">The string either input or selected by  the user if successful. If the user presses the Enter key  without typing in a string, an empty string "" is returned.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="GetSurfaceIsoParamPoint">
        <description>Pauses for user input of a point constrained to a surface object.</description>
        <OLE-syntax>Rhino.GetSurfaceIsoParamPoint (strObject [, strMessage])<input name="strObject" optional="Required" vartype="String">The surface object's identifier.
          <input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <output name="missing" optional="Optional" vartype="Array">An array of selection information if successful. The elements of the array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">The selected surface parameter in the U direction.</output>
          <output name="missing" optional="Optional" vartype="1">The selected surface parameter in the V direction.</output>
          <output name="missing" optional="Optional" vartype="2">The direction selected by the user: 0=U, 1=V, 2 = Both.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="HtmlBox">
        <description>Displays a custom, modal HTML dialog page. A modal dialog box retains the input focus while open. The user cannot switch windows until the dialog box is closed.</description>
        <OLE-syntax>Rhino.HtmlBox (strFileName [, arrArguments [, strOptions [, blnModal]]])<input name="strFileName" optional="Required" vartype="String">The filename the HTML dialog page to display.
          <input name="vaArguments" optional="Optional" vartype="Variant">An argument, or a zero-based, one-dimensional array of arguments, to pass to the HTML-dialog page.
          <input name="strOptions" optional="Optional" vartype="String">The window ornaments for the dialog box, using one or more of the following semicolon-delimited values:<input-subset name="center:{ yes | no | 1 | 0 | on | off }" optional="Optional" vartype="String">Specifies whether to center the dialog window within the desktop. The default is yes.</input-subset>
            <input-subset name="dialogHide:{ yes | no | 1 | 0 | on | off }" optional="Optional" vartype="String">Specifies whether the dialog window is hidden when printing or using print preview. This feature is only available when a dialog box is opened from a trusted application. The default is no.</input-subset>
            <input-subset name="help:{ yes | no | 1 | 0 | on | off }" optional="Optional" vartype="String">Specifies whether the dialog window displays the context-sensitive Help icon. The default is yes.</input-subset>
            <input-subset name="resizable:{ yes | no | 1 | 0 | on | off }" optional="Optional" vartype="String">Specifies whether the dialog window has fixed dimensions. The default is no.</input-subset>
            <input-subset name="scroll:{ yes | no | 1 | 0 | on | off }" optional="Optional" vartype="String">Specifies whether the dialog window displays scrollbars. The default is yes.</input-subset>
            <input-subset name="status:{ yes | no | 1 | 0 | on | off }" optional="Optional" vartype="String">Specifies whether the dialog window displays a status bar. The default is yes for untrusted dialog windows and no for trusted dialog windows.</input-subset>
            <input-subset name="unadorned:{ yes | no | 1 | 0 | on | off }" optional="Optional" vartype="String">Specifies whether the dialog window displays the border window chrome. This feature is only available when a dialog box is opened from a trusted application. The default is no.</input-subset>
          
          <input name="blnModal" optional="Optional" vartype="Boolean">If omitted or True, a modal dialog will be displayed. If False, a modeless dialog box will be displayed.
          <output name="missing" optional="Optional" vartype="Variant">If blnModal is not specified or is False, then if successful, the return value of the method will be dependant on the developer's implementation of the custom HTML dialog page.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnModal is specified and is True, then True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
          <output name="missing" optional="Optional" vartype="Notes">You can also eliminate scroll bars on dialog boxes by setting the SCROLL attribute to false in the body element for the dialog window, or call the modal dialog box from a trusted application.</output>
          <output name="missing" optional="Optional" vartype="You can set the default font settings the same way you set Cascading Style Sheets (CSS) attributes (for example, &quot;font:3;font-size:4&quot;). To define multiple font values, use multiple font attributes.">The default unit of measure for dialogHeight and dialogWidth in Internet Explorer 4.0 is the pixel; in Internet Explorer 5 it is the em. The value can be an integer or floating-point number, followed by an absolute units designator (cm, mm, in, pt, or pc) or a relative units designator (em, ex, or px). For consistent results, specify the dialogHeight and dialogWidth in pixels when designing modal dialog boxes.</output>
          <output name="missing" optional="Optional" vartype="Although a user can manually adjust the height of a dialog box to a smaller value - provided the dialog box is resizable - the minimum dialogHeight you can specify is 100 pixels.">To override center, even though the default for center is yes, you can specify either dialogLeft and/or dialogTop.</output>
          <output name="missing" optional="Optional" vartype="Unlike a modal dialog, where the script code is halted until the dialog is dismissed, when a modeless dialog is displayed, the script code will continue.">It is possible to pass the RhinoScript object to a dialog, as vaArguments, using the GetPlugInObject method.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="IntegerBox">
        <description>Displays a dialog box prompting the user to enter a whole number.</description>
        <OLE-syntax>Rhino.IntegerBox ([strMessage [, intNumber [, strTitle [, intMin [, intMax]]]]])<input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="intNumber" optional="Optional" vartype="integer">A default  whole number.
          <input name="strTitle" optional="Optional" vartype="String">A dialog  box title.
          <input name="intMin" optional="Optional" vartype="integer">A minimum  allowable value.
          <input name="intMax" optional="Optional" vartype="integer">A maximum  allowable value.
          <output name="missing" optional="Optional" vartype="Number">The whole number if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="ListBox">
        <description>Displays a list of items in a list box dialog.</description>
        <OLE-syntax>Rhino.ListBox (arrItems [, strMessage [, strTitle [, strDefault]]])<input name="arrItems" optional="Required" vartype="unknown-string-array">A zero-based,  one-dimensional array of string items.
          <input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="strTitle" optional="Optional" vartype="String">A dialog  box title.
          <input name="strDefault" optional="Optional" vartype="String">The selected  item in the list.
          <output name="missing" optional="Optional" vartype="String">The selected item if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="MessageBeep">
        <description>Plays a system waveform sound.</description>
        <OLE-syntax>Rhino.MessageBeep ([intBeep])<input name="intBeep" optional="Optional" vartype="integer">A sound type. If omitted, a simple beep (0) is played:<input-subset name="0" optional="Optional" vartype="integer">Simple beep.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">System asterisk.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">System exclamation.</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">System hand.</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">System question.</input-subset>
            <input-subset name="5" optional="Optional" vartype="integer">System default.</input-subset>
          
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="MessageBox">
        <description>Displays a Windows message box. A message box contains an application-defined message and title, plus any combination of predefined icons and push buttons.</description>
        <OLE-syntax>Rhino.MessageBox (strMessage [, intButtons [, strTitle]])<input name="strMessage" optional="Required" vartype="String">A prompt or message.
          <input name="intButtons" optional="Optional" vartype="integer">The buttons and icon to display. This parameter can be a combination of the following flags. If omitted, an OK button and no icon is displayed.<input-subset name="0" optional="Optional" vartype="integer">Display OK button only.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Display OK and Cancel buttons.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Display Abort, Retry, and Ignore buttons.</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Display Yes, No, and Cancel buttons.</input-subset>
            <input-subset name="4" optional="Optional" vartype="integer">Display Yes and No buttons.</input-subset>
            <input-subset name="5" optional="Optional" vartype="integer">Display Retry and Cancel buttons.</input-subset>
            <input-subset name="16" optional="Optional" vartype="integer">Display Critical Message icon.</input-subset>
            <input-subset name="32" optional="Optional" vartype="integer">Display Warning Query icon.</input-subset>
            <input-subset name="48" optional="Optional" vartype="integer">Display Warning Message icon.</input-subset>
            <input-subset name="64" optional="Optional" vartype="integer">Display Information Message icon.</input-subset>
            <input-subset name="0" optional="Optional" vartype="integer">First button is the default.</input-subset>
            <input-subset name="256" optional="Optional" vartype="integer">Second button is the default.</input-subset>
            <input-subset name="512" optional="Optional" vartype="integer">Third button is the default.</input-subset>
            <input-subset name="768" optional="Optional" vartype="integer">Fourth button is the default.</input-subset>
            <input-subset name="0" optional="Optional" vartype="integer">Application modal. The user must respond to the message box before continuing work in the current application.</input-subset>
            <input-subset name="4096" optional="Optional" vartype="integer">System modal. The user must respond to the message box before continuing work in any application.</input-subset>
          
          <input name="strTitle" optional="Optional" vartype="String">A dialog box title.
          <output name="missing" optional="Optional" vartype="Number">An number indicating which button was clicked:</output>
          <output name="missing" optional="Optional" vartype="Value">Description</output>
          <output name="missing" optional="Optional" vartype="1">OK button was clicked.</output>
          <output name="missing" optional="Optional" vartype="2">Cancel button was clicked.</output>
          <output name="missing" optional="Optional" vartype="3">Abort button was clicked.</output>
          <output name="missing" optional="Optional" vartype="4">Retry button was clicked.</output>
          <output name="missing" optional="Optional" vartype="5">Ignore button was clicked.</output>
          <output name="missing" optional="Optional" vartype="6">Yes button was clicked.</output>
          <output name="missing" optional="Optional" vartype="7">No button was clicked.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="MultiListBox">
        <description>Displays a list of items in a multiple-selection list box dialog.</description>
        <OLE-syntax>Rhino.MultiListBox (arrItems [, strMessage [, strTitle [, strDefault]]])<input name="arrItems" optional="Required" vartype="unknown-string-array">A zero-based,  one-dimensional array of string items.
          <input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="strTitle" optional="Optional" vartype="String">A dialog  box title.
          <input name="strDefault" optional="Optional" vartype="String">The selected  item in the list.
          <input name="arrDefault" optional="Optional" vartype="unknown-type-array">The selected  items in the list.
          <output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array containing  the selected item if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="OpenFileName">
        <description>Displays a Windows file open dialog box allowing the user to select a file name. Note, this function does not open the file.</description>
        <OLE-syntax>Rhino.OpenFileName ([strTitle [, strFilter [, strFolder [, strFilename [, strExtension]]]]])<input name="strTitle" optional="Optional" vartype="String">A dialog box title.
          <input name="strFilter" optional="Optional" vartype="String">A series of string pairs that specify filters  you can apply to the file. If you specify file filters, only files  that match filter criteria will appear in the Files list. The  first string in the string pair describes the filter; the second  string indicates the file name extension to use. Multiple  extensions may be specified by using a semicolon (the ';' character)  as the delimiter. The string ends with two '|' characters. For  example, the string "Text Files (*.txt)|*.txt|All Files (*.*)|*.*||"  will add two filters to the Files list.
          <input name="strFolder" optional="Optional" vartype="String">The initial folder.
          <input name="strFilename" optional="Optional" vartype="String">The initial file name that appears in the  Filename box. If not specified, no initial file name appears.
          <input name="strExtension" optional="Optional" vartype="String">The default file name extension. If the user  does not include an extension in the Filename box, the specified  extension is automatically appended to the file name. If this  parameter is not specified, no extension is appended.
          <output name="missing" optional="Optional" vartype="String">The file name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="OpenFileNames">
        <description>Displays a Windows file open dialog box allowing the user to select one or more file names. Note, this function does not open files.</description>
        <OLE-syntax>Rhino.OpenFileNames ([strTitle [, strFilter [, strFolder [, strFilename [, strExtension]]]]])<input name="strTitle" optional="Optional" vartype="String">A dialog box title.
          <input name="strFilter" optional="Optional" vartype="String">A filter string. The filter string must be in the following form: "Description1|Filter1|Description2|Filter2||", where "||" terminates filter string. If omitted, the filter (*.*) is used.
          <input name="strFolder" optional="Optional" vartype="String">A default folder.
          <input name="strFilename" optional="Optional" vartype="String">A default file name.
          <input name="strExtension" optional="Optional" vartype="String">A default file extension.
          <output name="missing" optional="Optional" vartype="Array">An array of file names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="OrderListBox">
        <description>Displays a sizeable Windows dialog box with an orderable list box. Items can be moved by dragging, or by using the move buttons.</description>
        <OLE-syntax>Rhino.OrderListBox (arrItems [, strMessage [, strTitle [, blnReturnStrings]]])<input name="arrItems" optional="Required" vartype="unknown-string-array">An array of  strings.
          <input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="strTitle" optional="Optional" vartype="String">A dialog  box title.
          <input name="blnReturnStrings" optional="Optional" vartype="Boolean">If not specified  or True, then the ordered list of strings. If False, then the  sort order is returned.
          <output name="missing" optional="Optional" vartype="Array">If blnReturnStrings is True, then the ordered strings if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If blnReturnStrings is True, then a zero-based array of sort indices if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="PopupMenu">
        <description>Displays a user-defined, context-style popup menu. The popup menu can appear almost anywhere. And, it can be dismissed by either clicking the left or right mouse buttons.</description>
        <OLE-syntax>Rhino.PopupMenu (arrItems, arrModes, arrPoint, strView)<input name="arrrItems" optional="Required" vartype="unknown-string-array">An array of string representing the menu items. An empty string, or "", will create a menu separator item.
          <input name="arrModes" optional="Optional" vartype="number-array">A array if numbers identifying the display mode of the corresponding menu items. If omitted, all menu items are enabled. Note, display modes are ignored for menu separators. The display modes are a follows:<input-subset name="0" optional="Optional" vartype="number-array">The menu item is enabled.</input-subset>
            <input-subset name="1" optional="Optional" vartype="number-array">The menu item is disabled.</input-subset>
            <input-subset name="2" optional="Optional" vartype="number-array">The menu item is checked.</input-subset>
            <input-subset name="3" optional="Optional" vartype="number-array">The menu item is disabled and checked.</input-subset>
          
          <input name="arrPoint" optional="Optional" vartype="single-xyz-array">A 3-D point where the menu item is to appear. If omitted, the menu item will appear at the current cursor position.
          <input name="strView" optional="Optional" vartype="String">If arrPoint is specified, the strView is the view in which the menu is to appear. If arrPoint is specified but strView is omitted, then the menu will be displayed in the active view.
          <output name="missing" optional="Optional" vartype="Number">The index of the menu item that was picked.</output>
          <output name="missing" optional="Optional" vartype="Number">-1 if no menu item is picked.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="PropertyListBox">
        <description>Displays a list of items and their values in a property-style list box dialog.</description>
        <OLE-syntax>Rhino.PropertyListBox (arrItems, arrValues [, strMessage [, strTitle]])<input name="arrItems" optional="Required" vartype="unknown-string-array">A zero-based, one-dimensional array of string items.
          <input name="arrValues" optional="Required" vartype="unknown-string-array">A zero-based, one-dimensional array of strings indicating the value of each item in the list.
          <input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="strTitle" optional="Optional" vartype="String">A dialog box title.
          <output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array of strings indicating the new value of each item in the list.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="RealBox">
        <description>Displays a dialog box prompting the user to enter a number.</description>
        <OLE-syntax>Rhino.RealBox ([strMessage [, intNumber [, strTitle [, intMin [, intMax]]]]])<input name="strMessage" optional="Optional" vartype="String">A prompt  or message.
          <input name="dblNumber" optional="Optional" vartype="double">A default  number..
          <input name="strTitle" optional="Optional" vartype="String">A dialog  box title.
          <input name="intMin" optional="Optional" vartype="integer">A minimum  allowable value.
          <input name="intMax" optional="Optional" vartype="integer">A maximum  allowable value.
          <output name="missing" optional="Optional" vartype="Number">The number if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="SaveFileName">
        <description>Displays a Windows file save dialog box allowing the user to enter a file name. Note, this function does not save the file.</description>
        <OLE-syntax>Rhino.SaveFileName ([strTitle [, strFilter [, strFolder [, strFilename [, strExtension]]]]])<input name="strTitle" optional="Optional" vartype="String">A dialog box title.
          <input name="strFilter" optional="Optional" vartype="String">A series of string pairs that specify filters  you can apply to the file. If you specify file filters, only files  that match filter criteria will appear in the Files list. The  first string in the string pair describes the filter; the second  string indicates the file name extension to use. Multiple  extensions may be specified by using a semicolon (the ';' character)  as the delimiter. The string ends with two '|' characters. For  example, the string "Text Files (*.txt)|*.txt|All Files (*.*)|*.*||"  will add two filters to the Files list.
          <input name="strFolder" optional="Optional" vartype="String">The initial folder.
          <input name="strFilename" optional="Optional" vartype="String">The initial file name that appears in the  Filename box. If not specified, no initial file name appears.
          <input name="strExtension" optional="Optional" vartype="String">The default file name extension. If the user  does not include an extension in the Filename box, the specified  extension is automatically appended to the file name. If this  parameter is not specified, no extension is appended.
          <output name="missing" optional="Optional" vartype="String">The file name if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="User_Interface_Methods" name="Rhino">
      <method name="StringBox">
        <description>Displays a dialog box prompting the user to enter a string value.</description>
        <OLE-syntax>Rhino.StringBox ([strMessage [, strString [, strTitle]]])<input name="strMessage" optional="Optional" vartype="String">A prompt or message.
          <input name="strString" optional="Optional" vartype="String">A default string value.
          <input name="strTitle" optional="Optional" vartype="String">A dialog box title.
          <output name="missing" optional="Optional" vartype="String">The string value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="AllProcedures">
        <description>Returns the names of the user-defined subroutines and functions resident in RhinoScript's VBScript engine.</description>
        <OLE-syntax>Rhino.AllProcedures ([blnAll])<input name="blnAll" optional="Optional" vartype="Boolean">If True (default) the names of all user-defined subroutines and functions are returned. If False, only top-level subroutines are returned. Top level subroutines are subroutines that can be passed to the RunScript command.
          <output name="missing" optional="Optional" vartype="Array">An array of string identifying the names of user-defined procedures.</output>
          <output name="missing" optional="Optional" vartype="Null">If no user-defined procedures are found.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="ClipboardText">
        <description>Returns or sets a text string to the Windows clipboard.</description>
        <OLE-syntax>Rhino.ClipboardText (strText)<input name="strText" optional="Optional" vartype="String">A text string.
          <output name="missing" optional="Optional" vartype="String">If strText is not specified, the current text string from the Windows clipboard if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strText is specified, the previous text string from the Windows clipboard if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="ColorAdjustLuma">
        <description>Changes the luminance of a red-green-blue (RGB) value. Hue and saturation are not affected.</description>
        <OLE-syntax>Rhino.ColorAdjustLuma (lngRGB, intLuma [, bScale])<input name="lngRGB" optional="Required" vartype="long">The initial RGB color value.
          <input name="intLuma" optional="Required" vartype="integer">The luminance in units of 0.1 percent of the total range. For example, a value of intLuma = 50 corresponds to 5 percent of the maximum luminance.
          <input name="bScale" optional="Optional" vartype="Boolean">If bScale is set to True, intLuma specifies how much to increment or decrement the current luminance. If bScale is set to FALSE, intLuma specifies the absolute luminance. The default value is False.<input-subset name="If bScale is set to TRUE, intLuma can range from -1000 to +1000." optional="Optional" vartype="Boolean">If bScale is set to FALSE, intLuma can range from 0 to 1000. Available luminance values range from 0 to a maximum. If the requested value is negative or exceeds the maximum, the luminance will be set to either zero or the maximum value, respectively.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">The modified RGB color value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="ColorBlueValue">
        <description>Retrieves an intensity value for the blue component of a red-green-blue (RGB) value.</description>
        <OLE-syntax>Rhino.ColorBlueValue (lngRGB)<input name="lngRGB" optional="Required" vartype="long">The RGB color value.
          <output name="missing" optional="Optional" vartype="Number">The blue component if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="ColorGreenValue">
        <description>Retrieves an intensity value for the green component of a red-green-blue (RGB) value.</description>
        <OLE-syntax>Rhino.ColorGreenValue (lngRGB)<input name="lngRGB" optional="Required" vartype="long">The RGB color value.
          <output name="missing" optional="Optional" vartype="Number">The green component if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="ColorHLSToRGB">
        <description>Converts a color from hue-luminance-saturation (HLS) to red-green-blue (RGB) format.</description>
        <OLE-syntax>Rhino.ColorHLSToRGB (arrHSL)<input name="arrHSL" optional="Required" vartype="unknown-type-array">The HLS color  value.
          <output name="missing" optional="Optional" vartype="Number">The RGB color value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="ColorHSVToRGB">
        <description>Converts a color from hue-saturation-value (HSV) to red-green-blue (RGB) format.</description>
        <OLE-syntax>Rhino.ColorHSVToRGB (arrHSV)<input name="arrHSV" optional="Required" vartype="unknown-type-array">The HSV color  value.
          <output name="missing" optional="Optional" vartype="Number">The RGB color value if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="ColorRedValue">
        <description>Retrieves an intensity value for the red component of a red-green-blue (RGB) value.</description>
        <OLE-syntax>Rhino.ColorRedValue (lngRGB)<input name="lngRGB" optional="Required" vartype="long">The RGB color value.
          <output name="missing" optional="Optional" vartype="Number">The red component if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="ColorRGBToHLS">
        <description>Converts a color from red-green-blue (RGB) to hue-luminance-saturation (HLS) format.</description>
        <OLE-syntax>Rhino.ColorRGBToHLS (lngRGB)<input name="lngRGB" optional="Required" vartype="long">The RGB color  value.
          <output name="missing" optional="Optional" vartype="Array">An array containing the hue, luminance,  and saturation values if successful. HLS values are constrained  to the range [0, 240]. </output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="ColorRGBToHSV">
        <description>Converts a color from red-green-blue (RGB) to hue-saturation-value (HSV) format.</description>
        <OLE-syntax>Rhino.ColorRGBToHSV (lngRGB)<input name="lngRGB" optional="Required" vartype="long">The RGB color  value.
          <output name="missing" optional="Optional" vartype="Array">An array containing the hue, saturation,  and brightness values if successful, where:</output>
          <output name="missing" optional="Optional" vartype="Element">Value</output>
          <output name="missing" optional="Optional" vartype="Description">0</output>
          <output name="missing" optional="Optional" vartype="Hue">An angle value between 0.0 and  360.0 degrees.</output>
          <output name="missing" optional="Optional" vartype="1">Saturation</output>
          <output name="missing" optional="Optional" vartype="A value between 0.0 (gray) and  1.0 (saturated).">2</output>
          <output name="missing" optional="Optional" vartype="Value">A value between 0.0 (black) and  1.0 (white).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="CullDuplicateNumbers">
        <description>Removes duplicates from an array of numbers.</description>
        <OLE-syntax>Rhino.CullDuplicateNumbers (arrNumbers [, dblTolerance])<input name="arrNumbers" optional="Required" vartype="number-array">An array of numbers.
          <input name="dblTolerance" optional="Optional" vartype="double">The minimum distance between numbers. Numbers that fall within this tolerance will be discarded. If omitted, Rhino's internal zero tolerance is used.
          <output name="missing" optional="Optional" vartype="Array">An array of numbers with duplicates removed if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="CullDuplicatePoints">
        <description>Removes duplicates from an array of 3-D points.</description>
        <OLE-syntax>Rhino.CullDuplicatePoints (arrPoints [, dblTolerance)<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D points.
          <input name="dblTolerance" optional="Optional" vartype="double">The minimum distance between points. Points that fall within this tolerance will be discarded. If omitted, Rhino's internal zero tolerance is used.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points with duplicates removed if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="CullDuplicateStrings">
        <description>Removes duplicates from an array of strings.</description>
        <OLE-syntax>Rhino.CullDuplicateStrings (arrStrings [, blnCaseSensitive)<input name="arrStrings" optional="Required" vartype="unknown-string-array">An array of  strings.
          <input name="blnCaseSensitive" optional="Optional" vartype="Boolean">Use case  sensitivity when culling. The default is to cull with case  sensitivity (True).
          <output name="missing" optional="Optional" vartype="Array">An array of strings with duplicates removed  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="CurrentPrinter">
        <description>Returns or changes the current Windows printer.</description>
        <OLE-syntax>Rhino.CurrentPrinter ([strPrinter])<input name="strPrinter" optional="Optional" vartype="String">The name of a Windows printer as returned by this method or by the PrinterNames method.
          <output name="missing" optional="Optional" vartype="String">If strPrinter is not specified, the name of the current Windows printer if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strPrinter is specified, the name of the previously current Windows printer if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="FindDuplicateNumbers">
        <description>Finds duplicates in an array of numbers.</description>
        <OLE-syntax>Rhino.FindDuplicateNumbers (arrNumbers [, dblTolerance])<input name="arrNumbers" optional="Required" vartype="number-array">An array of  numbers.
          <input name="dblTolerance" optional="Optional" vartype="double">The minimum  distance between numbers. Numbers that fall within this  tolerance will be discarded. If omitted, Rhino's internal  zero tolerance is used.
          <output name="missing" optional="Optional" vartype="Array">An array of one or more sets, or arrays,  of indices that identify the locations of the duplicate numbers  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="FindDuplicatePoints">
        <description>Finds duplicates 3-D points in an array of 3-D points.</description>
        <OLE-syntax>Rhino.FindDuplicatePoints (arrPoints[, dblTolerance])<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of  3-D points.
          <input name="dblTolerance" optional="Optional" vartype="double">The minimum  distance between points. Points that fall within this tolerance  will be discarded. If omitted, Rhino's internal zero tolerance  is used.
          <output name="missing" optional="Optional" vartype="Array">An array of one or more sets, or arrays,  of indices that identify the locations of the duplicate points  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="FindDuplicateStrings">
        <description>Finds duplicates in an array of strings.</description>
        <OLE-syntax>Rhino.FindDuplicateStrings (arrStrings [, blnCaseSensitive])<input name="arrStrings  " optional="Required" vartype="unknown-string-array">An array of  strings.
          <input name="dblTolerance" optional="Optional" vartype="Boolean">Use case  sensitivity when searching. The default is to search with  case sensitivity (True).
          <output name="missing" optional="Optional" vartype="Array">An array of one or more sets, or arrays,  of indices that identify the locations of the duplicate strings  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="GetSettings">
        <description>Returns a string from a specified section in a Windows-style initialization file. The initialization file must have the following form:</description>
        <OLE-syntax>Rhino.GetSettings (strFilename [, strAppName [, strKeyName]])<input name="strFilename" optional="Required" vartype="String">The name of the initialization file. If this  parameter does not contain a full path to the file, the system  searches for the file in the Windows directory.
          <input name="strAppName " optional="Optional" vartype="String">The name of the section containing the key  name. If omitted, all section names in the file are returned.
          <input name="strKeyName" optional="Optional" vartype="String">The name of the key whose associated string is to be retrieved. If omitted, all key names in the section specified by strAppName  are returned.
          <output name="missing" optional="Optional" vartype="Array">If strAppName is not specified,  an array containing all section names in the file if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If strKeyName is not specified, an array containing all key names in the section specified by strAppName if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strAppName and strKeyName are specified, the value of strKeyName if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="ImageInfo">
        <description>Returns information about a image file. This method works in conjunction with AddPictureFrame.</description>
        <OLE-syntax>Rhino.ImageInfo (strFileName)<input name="strFileName" optional="Required" vartype="String">The name of the image file to query. The  supported image types are as follows:
          <output name="missing" optional="Optional" vartype="Array">An array of image information if successful.  The array will contain the following information:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">Number. The width of the  image in pixels.</output>
          <output name="missing" optional="Optional" vartype="1">Number. The height of the  image in pixels.</output>
          <output name="missing" optional="Optional" vartype="2">Number. The horizontal resolution  of the image in dots-per-inch (dpi).</output>
          <output name="missing" optional="Optional" vartype="3">Number. The vertical resolution  of the image in dots-per-inch (dpi).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="IsProcedure">
        <description>Verifies that a user-defined subroutine or function is resident in RhinoScript's VBScript engine.</description>
        <OLE-syntax>Rhino.IsProcedure (strSubName)<input name="strSubName" optional="Required" vartype="String">The name of a user-defined subroutine of function.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="JoinArrays">
        <description>Joins two one-dimensional arrays in to a single one-dimensional array.</description>
        <OLE-syntax>Rhino.JoinArrays (arr1, arr2)<input name="arr1" optional="Required" vartype="unknown-type-array">The first one-dimensional array.
          <input name="arr2" optional="Required" vartype="unknown-type-array">The second one-dimensional array.
          <output name="missing" optional="Optional" vartype="Array">A one-dimensional array containing the elements of both input arrays if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="MakeArray">
        <description>Creates a new, initialized one-dimensional array of a user-specified bounds.</description>
        <OLE-syntax>Rhino.MakeArray (nUpperBound [, vVariant)<input name="nUpperBound" optional="Required" vartype="Number">The upper bounds of the new array.
          <input name="vVariant" optional="Optional" vartype="Variant">The value to initialize every array element. If omitted, every array element will be initialized as Empty. Note, the Empty VBScript keyword is used to indicate an uninitialized variable value. This is not the same thing as Null.
          <output name="missing" optional="Optional" vartype="Array">The one-dimensional array if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="OnCancelScript">
        <description>This method is not one provided by RhinoScript. Rather, this is user-definable subroutine that can be used to override RhinoScript's default script cancelling behavior.</description>
        <OLE-syntax>OnCancelScript</OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="PrinterNames">
        <description>Returns the name of all installed Windows printer.</description>
        <OLE-syntax>Rhino.PrinterNames ()<output name="missing" optional="Optional" vartype="Array">An array of Windows printer names if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="Pt2Str">
        <description>Converts a 3-D point value to a string. Useful for display point values as output, or passing point values to Rhino commands.</description>
        <OLE-syntax>Rhino.Pt2Str (arrPoint [, intPrecision [, blnSpace]])<input name="arrPoint" optional="Required" vartype="single-xyz-array">A 3-D point.  
          <input name="intPrecision" optional="Optional" vartype="integer">The display precision of the point coordinates, which is an integer value between 0 and 16. The default is to display the precision defined by the display precision setting that is found on the Units page of the DocumentProperties  command.
          <input name="blnSpace" optional="Optional" vartype="Boolean">Append an  additional trailing space after the point string. The default  value is not to append the additional space (False).
          <output name="missing" optional="Optional" vartype="String">The formatted string if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="ReadDelimitedFile">
        <description>Reads a delimited text file from disk. A delimited file is a specially formatted text file which stores spreadsheet or database-style information in a very simple format, with one row/record on each line, and each column/ field within that row/record separated by a delimiter character. </description>
        <OLE-syntax>Rhino.ReadDelimitedFile (strFileName [, strDelimiter [, blnIgnoreEmptyRows [, blnTrimSpaces]]])<input name="strFileName" optional="Required" vartype="String">The name of an existing delimited text file  to read. 
          <input name="strDelimiter" optional="Optional" vartype="String">The file's delimiter character. If omitted,  a comma character will be used.
          <input name="blnIgnoreEmptyRows " optional="Optional" vartype="Boolean">If omitted or False (Default), then if an  empty row is encountered in the file, then an empty element (vbEmpty)  for each column will be added to the array. If True, then empty  line will be skipped.
          <input name="blnTrimSpaces" optional="Optional" vartype="Boolean">If omitted or False (Default), then leading  and trailing spaces for string elements in the will not be trimmed.  If True, then leading and trailing spaces will be trimmed.
          <output name="missing" optional="Optional" vartype="Array">Either  a one or two dimensional array, depending in the input delimited  file, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On  error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="ReadTextFile">
        <description>Reads a text file from disk and returns the text as an array of strings. ANSI, UTF-8 and Unicode encoded text files are supported.</description>
        <OLE-syntax>Rhino.ReadTextFile (strFileName [, blnIgnoreEmptyRows [, blnTrimSpaces]])<input name="strFileName" optional="Required" vartype="String">The name  of an existing text file to read. 
          <input name="blnIgnoreEmptyRows" optional="Optional" vartype="Boolean">If omitted  or False (Default), then if an empty line is encountered in the  text file, an empty element (vbEmpty) will be added to the string  array. If True, then empty line will be skipped.
          <input name="blnTrimSpaces" optional="Optional" vartype="Boolean">If omitted  or False (Default), then leading and trailing spaces, for each  line of text that is read, will not be trimmed. If True,  then leading and trailing spaces will be trimmed.
          <output name="missing" optional="Optional" vartype="Array">An  array of strings, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On  error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="SaveSettings">
        <description>Saves a string to a specified section in a Windows-style initialization file. The initialization file must have the following form:</description>
        <OLE-syntax>Rhino.SaveSettings (strFilename [, strAppName [, strKeyName [, strString]]])<input name="strFilename" optional="Required" vartype="String">The name of the initialization file. If strFilename contains a full path and file name and the file does not exist, then a new file will be created. The specified directory must already exist. If strFilename does not contain a full path and file name for the file,  then the Windows directory is searched. If the file does  not exist, this function creates the file in the Windows directory.
          <input name="strAppName " optional="Optional" vartype="String">The name of the section to which the string  will be copied. If the section does not exist, it is created.  The name of the section is case-independent; the string  can be any combination of uppercase and lowercase letters.
          <input name="strKeyName " optional="Optional" vartype="String">The name of the key to be associated with  a string. If the key does not exist in the specified section,  it is created. If this parameter is omitted, the entire  section, including all entries within the section, is deleted.
          <input name="strString" optional="Optional" vartype="String">A string to be written to the file. If this parameter is omitted, the key pointed to by the strKeyName parameter is deleted. 
          <output name="missing" optional="Optional" vartype="Boolean">True  or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On  error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="SimplifyArray">
        <description>Flattens an array of 3-D points into a one-dimensional array of real number. For example, if you had an array containing three 3-D points, this method would return a one-dimensional array containing nine real numbers.</description>
        <OLE-syntax>Rhino.SimplifyArray (arrPoints)<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D points.
          <output name="missing" optional="Optional" vartype="Array">A one-dimensional array containing real numbers, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="Sleep">
        <description>Suspends the execution of a running script for the specified interval.</description>
        <OLE-syntax>Rhino.Sleep (lngMilliseconds)<input name="lngMilliseconds" optional="Required" vartype="long">The duration in milliseconds.
          <output name="missing" optional="Optional" vartype="Null">If successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="SortStrings">
        <description>Sorts an array of strings.</description>
        <OLE-syntax>Rhino.SortStrings ( arrStrings [, blnAscending [, blnNoCase [, blnLogical]]])<input name="arrStrings" optional="Required" vartype="unknown-string-array">An array of  string values.
          <input name="blnAscending" optional="Optional" vartype="Boolean">The sorting  mode, either ascending or descending. If omitted or True,  the strings are sorted ascending. If False, the strings  are sorted descending.
          <input name="blnNoCase" optional="Optional" vartype="Boolean">The case  sensitivity mode. If omitted or True, a case insensitive  sorting is performed. If False, a case sensitive sorting  is performed.
          <input name="blnLogical" optional="Optional" vartype="Boolean">Compares  strings logically, or naturally. Digits in the strings are  considered as numerical content rather than text. This test  is not case-sensitive.
          <output name="missing" optional="Optional" vartype="Array">An array sorted strings if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="SortNumbers">
        <description>Sorts an array of numbers.</description>
        <OLE-syntax>Rhino.SortNumbers (arrNumbers [, blnAscending])<input name="arrNumbers" optional="Required" vartype="unknown-type-array">An array of numeric values.
          <input name="blnAscending" optional="Optional" vartype="Boolean">The sorting mode, either ascending or descending. If omitted, the numbers are sorted ascending.
          <output name="missing" optional="Optional" vartype="Array">An array of sorted numbers if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="SortPointList">
        <description>Sorts an array of 3-D points so they will be connected in "reasonable" polyline order.</description>
        <OLE-syntax>Rhino.SortPointList (arrPoints [, dblTolerance])<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D points.
          <input name="dblTolerance" optional="Optional" vartype="double">The minimum distance between points. Points that fall within this tolerance will be discarded. If omitted, Rhino's internal zero tolerance is used.
          <output name="missing" optional="Optional" vartype="Array">An array of sorted 3-D points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="SortPoints">
        <description>Sorts an array of 3-D points.</description>
        <OLE-syntax>Rhino.SortPoints (arrPoints [, blnAscending [, blnOrder]])<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of 3-D points.
          <input name="blnAscending" optional="Optional" vartype="Boolean">The sorting mode, either ascending or descending. If omitted, the points are sorted ascending (True).
          <input name="blnOrder" optional="Optional" vartype="boolean">The component sort order, where:<input-subset name="0 (default)" optional="Optional" vartype="boolean">X, Y, Z</input-subset>
            <input-subset name="1" optional="Optional" vartype="boolean">X, Z, Y</input-subset>
            <input-subset name="2" optional="Optional" vartype="boolean">Y, X, Z</input-subset>
            <input-subset name="3" optional="Optional" vartype="boolean">Y, Z, X</input-subset>
            <input-subset name="4" optional="Optional" vartype="boolean">Z, X, Y</input-subset>
            <input-subset name="5" optional="Optional" vartype="boolean">Z, Y, X</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An array of sorted 3-D points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="SortPointsByDistance">
        <description>Sorts an array of 3-D point based on the distance from a reference point. Points will be sorted from closest to farthest from the reference point.</description>
        <OLE-syntax>Rhino.SortPointsByDistance (arrPoints, arrRefPt [, blnReturnPoints])<input name="arrPoints" optional="Required" vartype="multiple-xyz-array">An array of  3-D points.
          <input name="arrRefPt" optional="Required" vartype="single-xyz-array">The reference  point.
          <input name="blnReturnPoints" optional="Optional" vartype="Boolean">If True (Default), then an array of 3-D points, sorted by distance, is return. If False, then an array of indices that identify the sort order of arrPoints is returned.
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points, sorted by distance,  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="SpoolToPrinter">
        <description>Spools, or sends, a text file or a print/plot file to a Windows printer.</description>
        <OLE-syntax>Rhino.SpoolToPrinter (strFile, strPrinter)<input name="strFile" optional="Required" vartype="String">The full path to the file to spool
          <input name="strPrinter" optional="Required" vartype="String">The name of a Windows printer as returned by either the CurrentPrinter or by the PrinterNames method.
          <output name="missing" optional="Optional" vartype="String">The name of the spooled file if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="Str2Pt">
        <description>Converts a formatted string value into a 3-D point value.</description>
        <OLE-syntax>Rhino.Str2Pt (strPoint)<input name="arrPoint" optional="Required" vartype="String">A string that contains a delimited point like "1,2,3".
          <output name="missing" optional="Optional" vartype="Array">A 3-D point if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="Str2PtArray">
        <description>Converts a formatted string value into an array of 3-D point value.</description>
        <OLE-syntax>Rhino.Str2PtArray (strPoints)<input name="strPoints" optional="Required" vartype="String">A string that contains an unknown number of space delimited points like "1,2,3 4,5,6 7,8,9".
          <output name="missing" optional="Optional" vartype="Array">An array of 3-D points if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="Strtok">
        <description>Returns the tokens in a string. Use this method as an alternative to the VBScript's Split function.</description>
        <OLE-syntax>Rhino.Strtok (strText [, strDelimiters])<input name="strText" optional="Required" vartype="String">A string containing token(s).
          <input name="strDelimiters" optional="Optional" vartype="String">A set of delimiter characters. If omitted, a space character (" ") is used.
          <output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array containing the string tokens if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="TextOut">
        <description>Displays a text output window.</description>
        <OLE-syntax>Rhino.TextOut (strText [, strTitle]])<input name="strText" optional="Required" vartype="String">A text string to display.
          <input name="strTitle" optional="Optional" vartype="String">A dialog box title.
          <output name="missing" optional="Optional" vartype="Null">If successful or on failure.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="Version">
        <description>Returns the version of RhinoScript.</description>
        <OLE-syntax>Rhino.Version<output name="missing" optional="Optional" vartype="Number">The version number.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="Utility_Methods" name="Rhino">
      <method name="WriteTextFile">
        <description>Writes an array of strings to a text file. ANSI, UTF-8 and Unicode encoded text files are supported.</description>
        <OLE-syntax>Rhino.WriteTextFile (strFileName, arrStrings [, blnAppend [, intEncoding]])<input name="strFileName" optional="Required" vartype="String">The name  of an existing text file to write. 
          <input name="arrStrings  " optional="Required" vartype="nongeometrical-string-array">The array  of strings to write to the text file.
          <input name="blnAppend " optional="Optional" vartype="Boolean">If omitted  or False (Default), the file will be overwritten if it already  exists. If True, then the will be appended to if it already exists.
          <input name="intEncoding" optional="Optional" vartype="integer">The text  file encoding, where:<input-subset name="0" optional="Optional" vartype="integer">ANSI Encoding</input-subset>
            <input-subset name="1 (Default)" optional="Optional" vartype="integer">UTF-8 Encoding</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">UTF-16 Encoding</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">An  array of strings, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On  error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="AddNamedCPlane">
        <description>Adds a new named construction plane to the document.</description>
        <OLE-syntax>Rhino.AddNamedCPlane (strName [, strView [, arrPlane]])<input name="strName" optional="Required" vartype="String">The name of the new named construction plane.
          <input name="strView" optional="Optional" vartype="String">The title or identifier of the view from which  to save the construction plane. If omitted, the current  active view is used.
          <input name="arrPlane" optional="Optional" vartype="geometrical-string-array">A custom construction plane. Specify  this option is you want to save a construction plane different  than that of the specified view's construction plane. The  elements of a plane array are as follows:<input-subset name="0" optional="Optional" vartype="geometrical-string-array">Required. The construction  plane's origin (3-D point).</input-subset>
            <input-subset name="1" optional="Optional" vartype="geometrical-string-array">Required. The construction  plane's X axis direction (3-D vector).</input-subset>
            <input-subset name="2" optional="Optional" vartype="geometrical-string-array">Required. The construction  plane's Y axis direction (3-D vector).</input-subset>
            <input-subset name="3" optional="Optional" vartype="geometrical-string-array">Optional. The construction  plane's Z axis direction (3-D vector).</input-subset>
          
          <output name="missing" optional="Optional" vartype="Parameters">String</output>
          <output name="missing" optional="Optional" vartype="The name of the newly created named construction  plane if successful.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="AddNamedView">
        <description>Adds a new named view to the document.</description>
        <OLE-syntax>Rhino.AddNamedView (strName [, strView])<input name="strName" optional="Required" vartype="String">The name of the new named view.
          <input name="strView" optional="Optional" vartype="String">The title or identifier of the view to save. If omitted, the current active view is saved.
          <output name="missing" optional="Optional" vartype="String">The name of the newly created named view if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="BackgroundBitmap">
        <description>Returns or sets the background bitmap of the specified view. To remove a wallpaper bitmap, pass an empty string, or "", as the filename to display.</description>
        <OLE-syntax>Rhino.BackgroundBitmap ([strView [, strFileName [, arrPoint [, dblWidth]]]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.<input-subset name="Truevision Targa" optional="Optional" vartype="String">jpg, jpeg</input-subset>
            <input-subset name="Optional. Array. A 3-D point the lower left corner of the background bitmap. If omitted, the background bitmap's lower left corner will be located at the world origin, or (0,0,0)." optional="Optional" vartype="String">dblWidth</input-subset>
          
          <output name="missing" optional="Optional" vartype="String">If strFileName is not specified, then the current background bitmap filename if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strFileName is specified, then the previous background bitmap filename if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="CurrentDetail">
        <description>Returns or changes the current detail view in a page layout view.</description>
        <OLE-syntax>Rhino.CurrentDetail (strLayout [, strDetail [, blnReturnNames]])<input name="strLayout" optional="Required" vartype="String">The title or identifier of an existing page layout view.
          <input name="strDetail" optional="Optional" vartype="String">The title identifier of the detail view to set current. If omitted, identifier of the current detail view is returned. Note, if no detail views are active, then the title or identifier of the page layout view is returned. Also, to set the page layout view current, simply user strLayout as the value you pass to strDetail.
          <input name="blnReturnNames" optional="Optional" vartype="Boolean">If True (default), then the name, or title, of the detail view is returned. If False, then the identifier of the detail view is returned.
          <output name="missing" optional="Optional" vartype="String">If strDetail is not specified, the identifier of the current detail view if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strDetail is specified, the title or identifier of the previous current detail view is successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="CurrentView">
        <description>Returns or sets the currently active view.</description>
        <OLE-syntax>Rhino.CurrentView ([strView [, bReturnName]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view to set current. If omitted, only the title or identifier of the current view is returned.
          <input name="blnReturnName" optional="Optional" vartype="Boolean">If True (default), then the name, or title, of the view is returned. If False, then the identifier of the view is returned.
          <output name="missing" optional="Optional" vartype="String">If the title is not specified, the title or identifier of the current view if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If the title is specified, the title or identifier of the previous current view is successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="DeleteNamedCPlane">
        <description>Removed a new named construction plane from the document.</description>
        <OLE-syntax>Rhino.DeleteNamedCPlane (strName)<input name="strName" optional="Required" vartype="String">The name of the named construction plane to remove.
          <output name="missing" optional="Optional" vartype="Parameters">Boolean</output>
          <output name="missing" optional="Optional" vartype="True or False indicating success or failure.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="DeleteNamedView">
        <description>Removed a new named view from the document.</description>
        <OLE-syntax>Rhino.DeleteNamedView (strName)<input name="strName" optional="Required" vartype="String">The name of the named view to remove.
          <output name="missing" optional="Optional" vartype="Parameters">Boolean</output>
          <output name="missing" optional="Optional" vartype="True or False indicating success or failure.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="DeleteViewDisplayMode">
        <description>Delete a advanced view display mode.</description>
        <OLE-syntax>Rhino.DeleteViewDisplayMode (strMode)<input name="strMode" optional="Required" vartype="String">The identifier of the display mode obtained from the ViewDisplayModes method.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success of failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="DetailNames">
        <description>Returns the names, or titles, or identifiers of all detail views in a page layout view.</description>
        <OLE-syntax>Rhino.DetailNames (strLayout [,blnReturnNames])<input name="strLayout" optional="Required" vartype="String">The title or identifier of an existing page layout view.
          <input name="blnReturnNames" optional="Optional" vartype="Boolean">If True (default), then the names, or titles, of the detail views are returned. If False, then the identifiers of the detail views are returned.
          <output name="missing" optional="Optional" vartype="Array">A array of strings identifying the detail view names, or titles, or identifiers if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ExportViewDisplayMode">
        <description>Exports an advanced view display mode to a formatted text file. Use the ImportViewDisplayMode method to import it.</description>
        <OLE-syntax>Rhino.ExportViewDisplayMode (strMode, strFilename)<input name="strMode" optional="Required" vartype="String">The identifier of the display mode obtained from the ViewDisplayModes method.
          <input name="strFilename" optional="Required" vartype="String">The file name.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success of failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ImportViewDisplayMode">
        <description>Imports an advanced view display mode previously exported with ExportViewDisplayMode.</description>
        <OLE-syntax>Rhino.ImportViewDisplayMode (strFilename [, blnOverwrite])<input name="strFilename" optional="Required" vartype="String">The file name.
          <input name="blnOverwrite" optional="Optional" vartype="Boolean">If True and the view display mode being imported  already exists, it will be overwritten. If False (Default), then  existing view display modes will not be overwritten.
          <output name="missing" optional="Optional" vartype="String">The name of the imported view display mode  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="IsBackgroundBitmap">
        <description>Verifies that the specified view contains a background bitmap.</description>
        <OLE-syntax>Rhino.IsBackgroundBitmap (strView)<input name="strView" optional="Required" vartype="String">The title or identifier of the view.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="IsDetail">
        <description>Verifies that a detail view exists on a page layout view.</description>
        <OLE-syntax>Rhino.IsDetail (strLayout, strDetail)<input name="strLayout" optional="Required" vartype="String">The title or identifier of an existing page layout view.
          <input name="strDetail" optional="Required" vartype="String">The title or identifier of an existing detail view.
          <output name="missing" optional="Optional" vartype="True">If strDetail is a detail view.</output>
          <output name="missing" optional="Optional" vartype="False">If strDetail is not a detail view.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="IsLayout">
        <description>Verifies that a view is a page layout view.</description>
        <OLE-syntax>Rhino.IsLayout (strLayout)<input name="strLayout" optional="Required" vartype="String">The title  or identifier of an existing page layout view.
          <output name="missing" optional="Optional" vartype="True">If strLayout  is a page layout view.</output>
          <output name="missing" optional="Optional" vartype="False">If strLayout  is a standard, model view.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="IsView">
        <description>Verifies that the specified view exists.</description>
        <OLE-syntax>Rhino.IsView (strView)<input name="strView" optional="Required" vartype="String">The title or identifier of the view.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="IsViewCurrent">
        <description>Verifies that the specified view is the current, or active, view.</description>
        <OLE-syntax>Rhino.IsViewCurrent (strView)<input name="strView" optional="Required" vartype="String">The title or identifier of the view.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="IsViewMaximized">
        <description>Verifies that the specified view is maximized - enlarged so as to fill the entire Rhino window.</description>
        <OLE-syntax>Rhino.IsViewMaximized ([strView])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="IsViewOutOfPlan">
        <description>Checks for views that are slightly out of plan. Best used on orthographic projected views.</description>
        <OLE-syntax>Rhino.IsViewOutOfPlan ([strView])<input name="strView" optional="Optional" vartype="String">The title  or identifier of the view. If omitted, the current active  view is used.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="IsViewPerspective">
        <description>Verifies that the specified view's projection is set to perspective.</description>
        <OLE-syntax>Rhino.IsViewPerspective (strView)<input name="strView" optional="Optional" vartype="String">The title  or identifier of the view. If omitted, the current active  view is used.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="IsViewTitleVisible">
        <description>Verifies that the specified view's title window is visible.</description>
        <OLE-syntax>Rhino.IsViewTitleVisible (strView)<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is omitted.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="IsWallpaper">
        <description>Verifies that the specified view contains a wallpaper bitmap.</description>
        <OLE-syntax>Rhino.IsWallpaper (strView)<input name="strView" optional="Required" vartype="String">The title or identifier of the view.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="MaximizeRestoreView">
        <description>Toggles a view's maximized/restore window state of the specified view.</description>
        <OLE-syntax>Rhino.MaximizeRestoreView (strView)<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="NamedCPlane">
        <description>Returns the plane geometry of the specified named construction plane.</description>
        <OLE-syntax>Rhino.NamedCPlane (strName)<input name="strName" optional="Required" vartype="String">The name of a named construction plane.
          <output name="missing" optional="Optional" vartype="Array">An array containing the plane. The elements of a construction plane array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">The construction plane's origin (3-D point).</output>
          <output name="missing" optional="Optional" vartype="1">The construction plane's X axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="2">The construction plane's Y axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="3">The construction plane's Z axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="NamedCPlanes">
        <description>Returns the names of all named construction planes in the document.</description>
        <OLE-syntax>Rhino.NamedCPlanes ()<output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array of strings identifying the named construction planes if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="NamedViews">
        <description>Returns the names of all named views in the document.</description>
        <OLE-syntax>Rhino.NamedViews ()<output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array of strings identifying the named views if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="RenameView">
        <description>Renames, or changes the title, of the specified view..</description>
        <OLE-syntax>Rhino.RenameView (strOldTitle, strNewTitle)<input name="strOldTitle" optional="Required" vartype="String">The title or identifier of the view to rename.
          <input name="strNewTitle" optional="Required" vartype="String">The new title of the view.
          <output name="missing" optional="Optional" vartype="String">The view's previous title is successful.</output>
          <output name="missing" optional="Optional" vartype="Null">if not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="RestoreNamedCPlane">
        <description>Restores a named construction plane to the specified view.</description>
        <OLE-syntax>Rhino.RestoreNamedCPlane (strName [, strView])<input name="strName" optional="Required" vartype="String">The name of the named construction plane to restore.
          <input name="strView" optional="Optional" vartype="String">The title or identifier of the view to restore the construction plane. If omitted, the current active view is used.
          <output name="missing" optional="Optional" vartype="Parameters">String</output>
          <output name="missing" optional="Optional" vartype="The name of the restored named construction plane if successful.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="RestoreNamedView">
        <description>Restores a named view to the specified view.</description>
        <OLE-syntax>Rhino.RestoreNamedView (strName [, strView [, blnRestoreBitmap]])<input name="strName" optional="Required" vartype="String">The name of the named view to restore.
          <input name="strView" optional="Optional" vartype="String">The title or identifier of the view to restore the view. If omitted, the current active view is used.
          <input name="blnRestoreBitmap" optional="Optional" vartype="Boolean">Restore the named view's background bitmap. If omitted, the named view's background bitmap is not restored (false).
          <output name="missing" optional="Optional" vartype="Parameters">String</output>
          <output name="missing" optional="Optional" vartype="The name of the restored named view if successful.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="RotateCamera">
        <description>Rotates a perspective-projected view's camera. See the RotateCamera command in the Rhino help file for more details.</description>
        <OLE-syntax>Rhino.RotateCamera ([strview [, intDirection [, dblAngle]]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="dblAngle" optional="Optional" vartype="double">The angle to rotate. If omitted, the angle of rotation is specified by the "Increment in divisions of a circle" parameter specified in Options command's View tab.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="RotateView">
        <description>Rotates a view. See the RotateView command in the Rhino help file for more information.</description>
        <OLE-syntax>Rhino.RotateView ([strview [, intDirection [, dblAngle]]])<input name="strView" optional="Optional" vartype="String">The title  or identifier of the view. If omitted, the current active  view is used.
          <input name="intDirection" optional="Optional" vartype="integer">The direction to  rotate the view, where 0 = Right, 1 = Left, 2 = Down, and 3 =  Up. The default is Right (0).
          <input name="dblAngle" optional="Optional" vartype="double">The angle to rotate. If omitted, the angle of rotation is specified by the "Increment in divisions of a circle" parameter specified in Options command's View  tab.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ShowGrid">
        <description>Shows or hides a view's construction plane grid.</description>
        <OLE-syntax>Rhino.ShowGrid ([strView [, blnShow]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view to modify. If omitted, the current active view is used.
          <input name="blnShow" optional="Optional" vartype="Boolean">The grid display state to set. If omitted, the current grid display state is returned.
          <output name="missing" optional="Optional" vartype="Boolean">If blnShow is not specified, then the grid display state if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnShow is specified, then the previous grid display state if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ShowGridAxes">
        <description>Shows or hides a view's construction plane grid axes.</description>
        <OLE-syntax>Rhino.ShowGridAxes ([strView [, blnShow]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view to modify. If omitted, the current active view is used.
          <input name="blnShow" optional="Optional" vartype="Boolean">The grid axes display state to set. If omitted, the current grid axes display state is returned.
          <output name="missing" optional="Optional" vartype="Boolean">If blnShow is not specified, then the grid axes display state if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnShow is specified, then the previous grid axes display state if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ShowViewTitle">
        <description>Shows or hides the title window of a view.</description>
        <OLE-syntax>Rhino.ShowViewTitle ([strView [, blnState]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="blnState" optional="Optional" vartype="Boolean">The visible state of the view's title window. If omitted, the title will be shown (True).
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ShowWorldAxes">
        <description>Shows or hides a view's world axes icon.</description>
        <OLE-syntax>Rhino.ShowWorldAxes ([strView [, blnShow]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view to modify. If omitted, the current active view is used.
          <input name="blnShow" optional="Optional" vartype="Boolean">The world axes icon display state to set. If omitted, the current world axes icon display state is returned.
          <output name="missing" optional="Optional" vartype="Boolean">If blnShow is not specified, then the world axes icon display state if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnShow is specified, then the previous world axes icon display state if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="SynchronizeCPlanes">
        <description>Synchronizes all views and their construction plane to that of a specified view's construction plane. </description>
        <OLE-syntax>Rhino.SynchronizeCPlanes ([strView])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view from which to synchronize. If omitted, the current active view is used.
          <output name="missing" optional="Optional" vartype="Parameters">Boolean</output>
          <output name="missing" optional="Optional" vartype="True or False indicating success or failure.">Null</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="TiltView">
        <description>Tilts a view by rotating the camera up vector. See the TiltView command in the Rhino help file for more details.</description>
        <OLE-syntax>Rhino.TiltView ([strview [, intDirection [, dblAngle]]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="dblAngle" optional="Optional" vartype="double">The angle to rotate. If omitted, the angle of rotation is specified by the "Increment in divisions of a circle" parameter specified in Options command's View tab.
          <output name="missing" optional="Optional" vartype="Boolean">True or False indicating success or failure.</output>
          <output name="missing" optional="Optional" vartype="Null">On error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewCamera">
        <description>Returns or sets the camera location of the specified view.</description>
        <OLE-syntax>Rhino.ViewCamera ([strView [, arrCamera]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="arrCamera" optional="Optional" vartype="single-xyz-array">A 3-D point identifying the new camera location. If arrCamera is not specified, the current camera location is returned.
          <output name="missing" optional="Optional" vartype="Array">If arrCamera is not specified, then a 3-D point containing the current camera location if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrCamera is specified, then a 3-D point containing the previous camera location if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewCameraIcon">
        <description>Shows or hides the camera icon. For more information on the camera icon, see the Rhino help file for the Camera command.</description>
        <OLE-syntax>Rhino.ViewCameraIcon ([strView])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view in which to show the camera icon. If strView = Null and the  camera icon is visible, it will be hidden.
          <output name="missing" optional="Optional" vartype="String">If strView  was not specified, then the current camera icon view identifier  if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strView  was specified, then the previous camera icon view identifier if  successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewCameraLens">
        <description>Returns or sets the 35mm camera lens length of the specified perspective projection view.</description>
        <OLE-syntax>Rhino.ViewCameraLens ([strView [, dblLength]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="dblLength" optional="Optional" vartype="double">The new 35mm camera lens length. If omitted, the previous 35mm camera lens length is returned.
          <output name="missing" optional="Optional" vartype="Number">If a lens length is not specified, the current lens length if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If a lens length is specified, the previous lens length is successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewCameraPlane">
        <description>Returns the orientation of a view's camera.</description>
        <OLE-syntax>Rhino.ViewCameraPlane ([strView])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <output name="missing" optional="Optional" vartype="Array">The view's camera plane if successful. The elements of a plane array are as follows:</output>
          <output name="missing" optional="Optional" vartype="Element">Description</output>
          <output name="missing" optional="Optional" vartype="0">The plane's origin (3-D point).</output>
          <output name="missing" optional="Optional" vartype="1">The plane's X axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="2">The plane's Y axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="3">The plane's Z axis direction (3-D vector).</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewCameraTarget">
        <description>Returns or sets the camera and target positions of the specified view.</description>
        <OLE-syntax>Rhino.ViewCameraTarget ([strView [, arrCamera [, arrTarget]]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="arrCamera" optional="Optional" vartype="single-xyz-array">A 3-D point identifying the new camera location. If both arrCamera and arrTarget are not specified, the current camera and target locations are returned.
          <input name="arrTarget" optional="Optional" vartype="single-xyz-array">A 3-D point identifying the new target location. If both arrCamera and arrTarget are not specified, the current camera and target locations are returned.
          <output name="missing" optional="Optional" vartype="Array">If both arrCamera and arrTarget are not specified, then an array of 3-D point containing the current camera and target locations is returned.</output>
          <output name="missing" optional="Optional" vartype="Array">If either arrCamera or arrTarget are specified, then an array of 3-D point containing the previous camera and target locations is returned.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewCameraUp">
        <description>Returns or sets the camera up direction of specified view.</description>
        <OLE-syntax>Rhino.ViewCameraUp ([strView [, arrUpVector]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="arrUpVector" optional="Optional" vartype="geometrical-string-array">A 3-D vector identifying the new camera location.
          <output name="missing" optional="Optional" vartype="Array">If arrUpVector is not specified, then a 3-D vector identifying the current camera up direction if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrUpVector is specified, then a 3-D vector identifying the previous camera up direction if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewCPlane">
        <description>Returns or sets the specified view's construction plane.</description>
        <OLE-syntax>Rhino.ViewCPlane ([strView [, arrPlane]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="arrPlane" optional="Optional" vartype="geometrical-string-array">The new construction plane. The elements of a plane array are as follows:<input-subset name="0" optional="Optional" vartype="geometrical-string-array">Required. The construction plane's origin (3-D point).</input-subset>
            <input-subset name="1" optional="Optional" vartype="geometrical-string-array">Required. The construction plane's X axis direction (3-D vector).</input-subset>
            <input-subset name="2" optional="Optional" vartype="geometrical-string-array">Required. The construction plane's Y axis direction (3-D vector).</input-subset>
            <input-subset name="3" optional="Optional" vartype="geometrical-string-array">Optional. The construction plane's Z axis direction (3-D vector).</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">If a construction plane is not specified, the current construction plane if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If a construction plane is specified, the previous construction plane if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewDisplayMode">
        <description>Returns or sets a view's display mode. A view's display mode can be either wireframe, shaded, or render preview.</description>
        <OLE-syntax>Rhino.ViewDisplayMode ([strView [, intMode]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="intMode" optional="Optional" vartype="integer">The display mode. The display modes are as follows:<input-subset name="0" optional="Optional" vartype="integer">Wireframe.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Shaded.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Render Preview.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If intMode is not specified, the current display mode for the specified view if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intMode is specified, the previous display mode for the specified view if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewDisplayModeEx">
        <description>Returns or sets a view's display mode. Unlike the ViewDisplayMode method, which only allows you to set a view to wireframe, shaded, or render preview, this method allows you to set a view to any display mode including those listed in the Advanced Display Modes section of Rhino's Options dialog box.</description>
        <OLE-syntax>Rhino.ViewDisplayModeEx ([strView [, strMode [, blnReturnNames]]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="strMode" optional="Optional" vartype="String">The name or identifier of the display mode obtained from the ViewDisplayModes method.
          <input name="blnReturnNames" optional="Optional" vartype="Boolean">If True (default), then the name the display mode is returned. If False, then the identifier of the display mode is returned.
          <output name="missing" optional="Optional" vartype="Number">If strMode is not specified, the current display mode for the specified view if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If strMode is specified, the previous display mode for the specified view if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewDisplayModeId">
        <description>Returns the identifier of a display mode given a display mode's name.</description>
        <OLE-syntax>Rhino.ViewDisplayModeId (strName])<input name="strName" optional="Required" vartype="String">The name of the display mode obtained from the ViewDisplayModes  method.
          <output name="missing" optional="Optional" vartype="String">The name of the display mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewDisplayModeName">
        <description>Returns the name of a display mode given a display mode's identifier.</description>
        <OLE-syntax>Rhino.ViewDisplayModeName (strMode])<input name="strMode" optional="Required" vartype="String">The identifier of the display mode obtained from the ViewDisplayModes  method.
          <output name="missing" optional="Optional" vartype="String">The name of the display mode if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewDisplayModes">
        <description>Returns a list of view display modes, including those listed in the Advanced Display Modes section of Rhino's Options dialog box.</description>
        <OLE-syntax>Rhino.ViewDisplayModes ([blnReturnNames [, blnHideIncompatible]])<input name="blnReturnName" optional="Optional" vartype="Boolean">If True (default), then the names of the  display modes are returned. If False, then the identifiers of  the display modes are returned.
          <input name="blnHideIncompatible" optional="Optional" vartype="Boolean">If True (default), then display modes that cannot be assigned to objects, using AddObjectDisplayMode,  are not returned. If False, then all object display modes are  returned.
          <output name="missing" optional="Optional" vartype="Array">A  array of strings identifying the display mode names or identifiers  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewFlatShade">
        <description>Returns or sets a view's display mode to flat shaded.</description>
        <OLE-syntax>Rhino.ViewFlatShade ([strView [, blnEnable]])<input name="strView" optional="Optional" vartype="String">The title  or identifier of the view. If omitted, the current active  view is used.
          <input name="blnEnable" optional="Optional" vartype="Boolean">The new flat shaded display state. If blnEnable is not specified, the current flat shaded state is returned.
          <output name="missing" optional="Optional" vartype="Array">If blnEnable is not specified, then the current flat shaded state  if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If blnEnable is specified, then the previous flat shaded state  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewNames">
        <description>Returns the names, or titles, or identifiers of all views in the document.</description>
        <OLE-syntax>Rhino.ViewNames ([blnReturnNames [, intType]])<input name="blnReturnNames" optional="Optional" vartype="Boolean">If True (default), then the names, or titles, of the views are returned. If False, then the identifiers of the views are returned.
          <input name="intType" optional="Optional" vartype="integer">The type of view to return, where:<input-subset name="0" optional="Optional" vartype="integer">Standard model views.</input-subset>
            <input-subset name="1" optional="Optional" vartype="integer">Page layout views.</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Both standard model and page layout views.</input-subset>
          
          <output name="missing" optional="Optional" vartype="Array">A array of strings identifying the view names, or titles, or identifiers if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewNearCorners">
        <description>Returns the 3-D corners points of a view's near clipping plane rectangle. This function can be useful in determining the "real world" size of a parallel-projected view.</description>
        <OLE-syntax>Rhino.ViewNearCorners ([strView])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <output name="missing" optional="Optional" vartype="Array">An array of four 3-D points that define the corners of the rectangle if successful. Points are returned in counter-clockwise order.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewProjection">
        <description>Returns or sets a view's projection mode. A view's projection mode can be either parallel, perspective, or two-point perspective.</description>
        <OLE-syntax>Rhino.ViewProjection ([strView [, intMode]])<input name="strView" optional="Optional" vartype="String">The title  or identifier of the view. If omitted, the current active  view is used.
          <input name="intMode" optional="Optional" vartype="integer">The projection  mode. The projection modes are as follows:<input-subset name="1" optional="Optional" vartype="integer">Parallel</input-subset>
            <input-subset name="2" optional="Optional" vartype="integer">Perspective (three-point)</input-subset>
            <input-subset name="3" optional="Optional" vartype="integer">Two-point perspective</input-subset>
          
          <output name="missing" optional="Optional" vartype="Number">If intMode  is not specified, the current projection mode for the specified  view if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If intMode  is specified, the previous projection mode for the specified view  if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewProjectionXform">
        <description>Returns a view-based, 2-D projection transformation that will allow you to project geometry to the world x-y plane to make a 2-D drawing. The transformation matrix returned is similar the one used by Rhino's Make2D command.</description>
        <OLE-syntax>Rhino.ViewProjectionXform ([strView])<input name="strView" optional="Optional" vartype="String">The title  or identifier of the view. If omitted, the current active  view is used.
          <output name="missing" optional="Optional" vartype="Array">The 4x4 transformation matrix if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewRadius">
        <description>Returns or sets the radius of the viewing frustum of a parallel-projected view. This function is useful when you need an absolute zoom factor for a parallel-projected view.</description>
        <OLE-syntax>Rhino.ViewRadius ([strView [, dblRadius]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="dblRadius" optional="Optional" vartype="double">The view radius.
          <output name="missing" optional="Optional" vartype="Number">If dblRadius is not specified, the current view radius for the specified view if successful.</output>
          <output name="missing" optional="Optional" vartype="Number">If dblRadius is specified, the previous view radius for the specified view if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewSize">
        <description>Returns the width and height in pixels of the specified view.</description>
        <OLE-syntax>Rhino.ViewSize ([strView])<input name="strView" optional="Optional" vartype="String">The title  or identifier of the view. If omitted, the current active  view is used.
          <output name="missing" optional="Optional" vartype="Array">A zero-based, one-dimensional array containing  two numbers identifying the width and height if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewSpeedTest">
        <description>Tests Rhino's display performance by regenerating a view a user-defined number of times. Note, this method is functionally equivalent to the TextMaxSpeed command.</description>
        <OLE-syntax>Rhino.ViewSpeedTest ([strView [, intFrames [, blnFreeze [, intDirection [, dblAngle]]]]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If  omitted, the current active view is used.
          <input name="intFrames " optional="Optional" vartype="String">The number of frames, or times to regenerate  the view. If omitted, the view will be regenerated 100 times.
          <input name="blnFreeze" optional="Optional" vartype="String">If True (Default), then Rhino's display list  will not be updated with every frame redraw. If False, then Rhino's  display list will be updated with every frame redraw.
          <input name="intDirection " optional="Optional" vartype="integer">The direction to rotate the view, where 0 = Right,  1 = Left, 2 = Down, and 3 = Up. The default direction is Right  (0).
          <input name="dblAngle" optional="Optional" vartype="double">The angle to rotate. If omitted, the rotation  angle of 5.0 degrees will be used.
          <output name="missing" optional="Optional" vartype="Number">The number of seconds it took to regenerate the view intFrames number of times, if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If  not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewTarget">
        <description>Returns or sets the target location of the specified view.</description>
        <OLE-syntax>Rhino.ViewTarget ([strView [, arrTarget]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="arrTarget" optional="Optional" vartype="single-xyz-array">A 3-D point identifying the new target location. If arrTarget is not specified, the current target location is returned.
          <output name="missing" optional="Optional" vartype="Array">If arrTarget is not specified, then a 3-D point containing the current target location if successful.</output>
          <output name="missing" optional="Optional" vartype="Array">If arrTarget is specified, then a 3-D point containing the previous target location if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ViewTitle">
        <description>Returns the name, or title, of a view given a view's identifier.</description>
        <OLE-syntax>Rhino.ViewTitle (strView])<input name="strMode" optional="Required" vartype="String">The identifier of the display mode obtained from the ViewNames method.
          <output name="missing" optional="Optional" vartype="String">The name, or title, of the view if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="Wallpaper">
        <description>Returns or sets the wallpaper bitmap of the specified view. To remove a wallpaper bitmap, pass an empty string, or "", as the filename to display.</description>
        <OLE-syntax>Rhino.Wallpaper ([strView [, strFileName]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="strFileName" optional="Optional" vartype="String">The name of the bitmap file to set as the wallpaper. The supported bitmap file formats are as follows:
          <output name="missing" optional="Optional" vartype="String">If strFileName is not specified, then the current wallpaper bitmap filename if successful.</output>
          <output name="missing" optional="Optional" vartype="String">If strFileName is specified, then the previous wallpaper bitmap filename if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="WallpaperGrayScale">
        <description>Returns or sets the grayscale display option of the wallpaper bitmap of the specified view.</description>
        <OLE-syntax>Rhino.WallpaperGrayScale ([strView [, blnGrayScale]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="blnGrayScale" optional="Optional" vartype="Boolean">Display the wallpaper bitmap in grayscale (True) or color (False).
          <output name="missing" optional="Optional" vartype="Boolean">If blnGrayScale is not specified, then the current grayscale display option if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnGrayScale is specified, then the previous grayscale display option if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="WallpaperHidden">
        <description>Returns or sets the visibility of the wallpaper bitmap of the specified view.</description>
        <OLE-syntax>Rhino.WallpaperHidden ([strView [, blnHidden]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="blnHidden" optional="Optional" vartype="Boolean">Hide the wallpaper bitmap (True) or show the wallpaper bitmap (False).
          <output name="missing" optional="Optional" vartype="Boolean">If blnHidden is not specified, then the current wallpaper visibility if successful.</output>
          <output name="missing" optional="Optional" vartype="Boolean">If blnHidden is specified, then the previous wallpaper visibility if successful.</output>
          <output name="missing" optional="Optional" vartype="Null">If not successful, or on error.</output>
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ZoomBoundingBox">
        <description>Zooms to the extents of a specified bounding box in the specified view, or in the active view.</description>
        <OLE-syntax>Rhino.ZoomBoundingBox (arrCorners [, strView [, blnAll]])<input name="arrCorners" optional="Required" vartype="multiple-xyz-array">An array of eight 3-D points that define the corners of the box. Points need to be in counter-clockwise order starting with the bottom rectangle of the box. Use BoundingBox to obtain the bounding box of objects.
          <input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="blnAll" optional="Optional" vartype="Boolean">Zoom extents in all views. If omitted, only the specified view is zoomed (False).
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ZoomExtents">
        <description>Zooms to the extents of visible objects in the specified view, or in the active view.</description>
        <OLE-syntax>Rhino.ZoomExtents ([strView [, blnAll]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="blnAll" optional="Optional" vartype="Boolean">Zoom extents in all views. If omitted, only the specified view is zoomed (False).
        </OLE-syntax>
      </method>
    </object>
    <object category="View_Methods" name="Rhino">
      <method name="ZoomSelected">
        <description>Zooms to the extents of selected objects in the specified view, or in the active view.</description>
        <OLE-syntax>Rhino.ZoomSelected ([strView [, blnAll]])<input name="strView" optional="Optional" vartype="String">The title or identifier of the view. If omitted, the current active view is used.
          <input name="blnAll" optional="Optional" vartype="Boolean">Zoom selected in all views. If omitted, only the specified view is zoomed (False).
        </OLE-syntax>
      </method>
    </object>
    <object category="" name="Rhino">
      <method name="Introduction">
        <description>Microsoft Windows Script is a comprehensive scripting infrastructure for the Windows platform. Windows Script provides script engines, such as Visual Basic Scripting Edition, which can be embedded into Windows applications and an extensive array of supporting technologies that make it easier for users to script Windows applications.</description>
      </method>
    </object>
    <object category="" name="Rhino">
      <method name="RhinoScript"></method>
    </object>
  </apiSet>
